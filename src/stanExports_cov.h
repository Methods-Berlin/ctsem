// Generated by rstantools.  Do not edit by hand.

/*
    ctsem is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ctsem is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ctsem.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace model_cov_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 62, column 2 to column 15)",
                                                      " (in 'string', line 63, column 2 to column 18)",
                                                      " (in 'string', line 64, column 2 to column 45)",
                                                      " (in 'string', line 67, column 2 to column 51)",
                                                      " (in 'string', line 68, column 2 to column 19)",
                                                      " (in 'string', line 70, column 2 to column 18)",
                                                      " (in 'string', line 71, column 2 to column 54)",
                                                      " (in 'string', line 72, column 2 to column 34)",
                                                      " (in 'string', line 74, column 4 to column 48)",
                                                      " (in 'string', line 75, column 25 to column 60)",
                                                      " (in 'string', line 75, column 4 to column 60)",
                                                      " (in 'string', line 76, column 24 to column 70)",
                                                      " (in 'string', line 76, column 4 to column 70)",
                                                      " (in 'string', line 77, column 24 to column 76)",
                                                      " (in 'string', line 77, column 4 to column 76)",
                                                      " (in 'string', line 73, column 12 to line 78, column 3)",
                                                      " (in 'string', line 73, column 2 to line 78, column 3)",
                                                      " (in 'string', line 79, column 2 to column 76)",
                                                      " (in 'string', line 82, column 6 to line 83, column 48)",
                                                      " (in 'string', line 81, column 17 to line 84, column 5)",
                                                      " (in 'string', line 81, column 4 to line 84, column 5)",
                                                      " (in 'string', line 80, column 15 to line 85, column 3)",
                                                      " (in 'string', line 80, column 2 to line 85, column 3)",
                                                      " (in 'string', line 88, column 2 to column 23)",
                                                      " (in 'string', line 89, column 14 to column 50)",
                                                      " (in 'string', line 89, column 2 to column 50)",
                                                      " (in 'string', line 52, column 2 to column 8)",
                                                      " (in 'string', line 53, column 2 to column 8)",
                                                      " (in 'string', line 54, column 9 to column 10)",
                                                      " (in 'string', line 54, column 11 to column 12)",
                                                      " (in 'string', line 54, column 2 to column 18)",
                                                      " (in 'string', line 55, column 10 to column 11)",
                                                      " (in 'string', line 55, column 12 to column 13)",
                                                      " (in 'string', line 55, column 2 to column 15)",
                                                      " (in 'string', line 56, column 11 to column 12)",
                                                      " (in 'string', line 56, column 2 to column 14)",
                                                      " (in 'string', line 57, column 2 to column 11)",
                                                      " (in 'string', line 58, column 2 to column 19)",
                                                      " (in 'string', line 59, column 2 to column 12)",
                                                      " (in 'string', line 62, column 9 to column 10)",
                                                      " (in 'string', line 63, column 9 to column 10)",
                                                      " (in 'string', line 64, column 9 to column 36)",
                                                      " (in 'string', line 67, column 9 to column 10)",
                                                      " (in 'string', line 67, column 12 to column 13)",
                                                      " (in 'string', line 68, column 9 to column 10)",
                                                      " (in 'string', line 68, column 11 to column 12)",
                                                      " (in 'string', line 72, column 9 to column 10)",
                                                      " (in 'string', line 3, column 2 to column 18)",
                                                      " (in 'string', line 4, column 9 to column 10)",
                                                      " (in 'string', line 4, column 11 to column 12)",
                                                      " (in 'string', line 4, column 2 to column 16)",
                                                      " (in 'string', line 5, column 9 to column 10)",
                                                      " (in 'string', line 5, column 2 to column 33)",
                                                      " (in 'string', line 6, column 9 to column 10)",
                                                      " (in 'string', line 6, column 2 to column 32)",
                                                      " (in 'string', line 7, column 2 to column 9)",
                                                      " (in 'string', line 8, column 2 to column 10)",
                                                      " (in 'string', line 9, column 2 to column 10)",
                                                      " (in 'string', line 10, column 2 to column 10)",
                                                      " (in 'string', line 11, column 2 to column 10)",
                                                      " (in 'string', line 15, column 6 to column 17)",
                                                      " (in 'string', line 16, column 6 to column 32)",
                                                      " (in 'string', line 14, column 13 to line 17, column 5)",
                                                      " (in 'string', line 14, column 4 to line 17, column 5)",
                                                      " (in 'string', line 13, column 15 to line 18, column 3)",
                                                      " (in 'string', line 13, column 2 to line 18, column 3)",
                                                      " (in 'string', line 12, column 15 to line 19, column 3)",
                                                      " (in 'string', line 12, column 2 to line 19, column 3)",
                                                      " (in 'string', line 23, column 8 to column 31)",
                                                      " (in 'string', line 24, column 8 to column 22)",
                                                      " (in 'string', line 22, column 16 to line 25, column 7)",
                                                      " (in 'string', line 22, column 6 to line 25, column 7)",
                                                      " (in 'string', line 27, column 8 to column 32)",
                                                      " (in 'string', line 28, column 8 to column 23)",
                                                      " (in 'string', line 26, column 15 to line 29, column 7)",
                                                      " (in 'string', line 26, column 6 to line 29, column 7)",
                                                      " (in 'string', line 21, column 17 to line 30, column 5)",
                                                      " (in 'string', line 21, column 4 to line 30, column 5)",
                                                      " (in 'string', line 31, column 4 to column 15)",
                                                      " (in 'string', line 32, column 4 to column 16)",
                                                      " (in 'string', line 20, column 15 to line 33, column 3)",
                                                      " (in 'string', line 20, column 2 to line 33, column 3)",
                                                      " (in 'string', line 35, column 4 to column 13)",
                                                      " (in 'string', line 36, column 4 to column 19)",
                                                      " (in 'string', line 37, column 4 to column 12)",
                                                      " (in 'string', line 38, column 4 to column 25)",
                                                      " (in 'string', line 39, column 4 to column 44)",
                                                      " (in 'string', line 40, column 4 to column 25)",
                                                      " (in 'string', line 41, column 4 to column 22)",
                                                      " (in 'string', line 43, column 17 to column 33)",
                                                      " (in 'string', line 43, column 6 to column 33)",
                                                      " (in 'string', line 44, column 16 to column 35)",
                                                      " (in 'string', line 44, column 6 to column 35)",
                                                      " (in 'string', line 42, column 17 to line 45, column 5)",
                                                      " (in 'string', line 42, column 4 to line 45, column 5)",
                                                      " (in 'string', line 46, column 4 to column 43)",
                                                      " (in 'string', line 34, column 15 to line 47, column 3)",
                                                      " (in 'string', line 34, column 2 to line 47, column 3)",
                                                      " (in 'string', line 48, column 2 to column 11)",
                                                      " (in 'string', line 2, column 47 to line 49, column 3)"};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
constraincorsqrt(const T0__& rawcor_arg__, const int& d,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& rawcor = to_ref(rawcor_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int counter;
    counter = std::numeric_limits<int>::min();
    
    current_statement__ = 48;
    counter = 0;
    current_statement__ = 49;
    validate_non_negative_index("o", "d", d);
    current_statement__ = 50;
    validate_non_negative_index("o", "d", d);
    Eigen::Matrix<local_scalar_t__, -1, -1> o;
    o = Eigen::Matrix<local_scalar_t__, -1, -1>(d, d);
    stan::math::fill(o, DUMMY_VAR__);
    
    current_statement__ = 52;
    validate_non_negative_index("ss", "d", d);
    Eigen::Matrix<local_scalar_t__, -1, 1> ss;
    ss = Eigen::Matrix<local_scalar_t__, -1, 1>(d);
    stan::math::fill(ss, DUMMY_VAR__);
    
    current_statement__ = 53;
    assign(ss, nil_index_list(), rep_vector(0, d), "assigning variable ss");
    current_statement__ = 54;
    validate_non_negative_index("s", "d", d);
    Eigen::Matrix<local_scalar_t__, -1, 1> s;
    s = Eigen::Matrix<local_scalar_t__, -1, 1>(d);
    stan::math::fill(s, DUMMY_VAR__);
    
    current_statement__ = 55;
    assign(s, nil_index_list(), rep_vector(0, d), "assigning variable s");
    local_scalar_t__ r;
    r = DUMMY_VAR__;
    
    local_scalar_t__ r3;
    r3 = DUMMY_VAR__;
    
    local_scalar_t__ r4;
    r4 = DUMMY_VAR__;
    
    local_scalar_t__ r1;
    r1 = DUMMY_VAR__;
    
    local_scalar_t__ r2;
    r2 = DUMMY_VAR__;
    
    current_statement__ = 68;
    for (int i = 1; i <= d; ++i) {
      current_statement__ = 66;
      for (int j = 1; j <= d; ++j) {
        current_statement__ = 64;
        if (logical_gt(j, i)) {
          current_statement__ = 61;
          counter = (counter + 1);
          current_statement__ = 62;
          assign(o,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            rawcor[(counter - 1)], "assigning variable o");
        } }}
    current_statement__ = 82;
    for (int i = 1; i <= d; ++i) {
      current_statement__ = 78;
      for (int j = 1; j <= d; ++j) {
        current_statement__ = 72;
        if (logical_gt(j, i)) {
          current_statement__ = 69;
          assign(ss, cons_list(index_uni(i), nil_index_list()),
            (ss[(i - 1)] +
              square(
                rvalue(o,
                  cons_list(index_uni(j),
                    cons_list(index_uni(i), nil_index_list())), "o"))),
            "assigning variable ss");
          current_statement__ = 70;
          assign(s, cons_list(index_uni(i), nil_index_list()),
            (s[(i - 1)] +
              rvalue(o,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), "o")),
            "assigning variable s");
        } 
        current_statement__ = 76;
        if (logical_lt(j, i)) {
          current_statement__ = 73;
          assign(ss, cons_list(index_uni(i), nil_index_list()),
            (ss[(i - 1)] +
              square(
                rvalue(o,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())), "o"))),
            "assigning variable ss");
          current_statement__ = 74;
          assign(s, cons_list(index_uni(i), nil_index_list()),
            (s[(i - 1)] +
              rvalue(o,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "o")),
            "assigning variable s");
        } }
      current_statement__ = 79;
      assign(s, cons_list(index_uni(i), nil_index_list()),
        (s[(i - 1)] + 1e-5), "assigning variable s");
      current_statement__ = 80;
      assign(ss, cons_list(index_uni(i), nil_index_list()),
        (ss[(i - 1)] + 1e-5), "assigning variable ss");}
    current_statement__ = 98;
    for (int i = 1; i <= d; ++i) {
      current_statement__ = 83;
      assign(o,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        0, "assigning variable o");
      current_statement__ = 84;
      r1 = stan::math::sqrt(ss[(i - 1)]);
      current_statement__ = 85;
      r2 = s[(i - 1)];
      current_statement__ = 86;
      r3 = ((stan::math::fabs(r2) / r1) - 1);
      current_statement__ = 87;
      r4 = stan::math::sqrt(
             log1p_exp(((2 * ((stan::math::fabs(r2) - r2) - 1)) - 4)));
      current_statement__ = 88;
      r = ((((r4 * r3) + 1) * r4) + 1);
      current_statement__ = 89;
      r = stan::math::sqrt((ss[(i - 1)] + r));
      current_statement__ = 95;
      for (int j = 1; j <= d; ++j) {
        current_statement__ = 91;
        if (logical_gt(j, i)) {
          current_statement__ = 90;
          assign(o,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            (rvalue(o,
               cons_list(index_uni(j),
                 cons_list(index_uni(i), nil_index_list())), "o") / r),
            "assigning variable o");
        } 
        current_statement__ = 93;
        if (logical_lt(j, i)) {
          current_statement__ = 92;
          assign(o,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            (rvalue(o,
               cons_list(index_uni(i),
                 cons_list(index_uni(j), nil_index_list())), "o") / r),
            "assigning variable o");
        } }
      current_statement__ = 96;
      assign(o,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        stan::math::sqrt(
          ((1 -
             sum(
               square(
                 rvalue(o,
                   cons_list(index_uni(i),
                     cons_list(index_omni(), nil_index_list())), "o")))) +
            1e-5)), "assigning variable o");}
    current_statement__ = 99;
    return o;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct constraincorsqrt_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& rawcor, const int& d, std::ostream* pstream__)  const 
{
return constraincorsqrt(rawcor, d, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_cov final : public model_base_crtp<model_cov> {
private:
  int d;
  int n;
  Eigen::Matrix<double, -1, -1> dat;
  std::vector<std::vector<int>> obs;
  std::vector<int> nobs;
  double reg;
  int corpriortype;
  int indep;
  int rawcor_1dim__;
 
public:
  ~model_cov() { }
  
  inline std::string model_name() const final { return "model_cov"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  model_cov(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_cov_namespace::model_cov";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization","d","int",
          context__.to_vec());
      d = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      d = context__.vals_i("d")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 29;
      validate_non_negative_index("dat", "n", n);
      current_statement__ = 30;
      validate_non_negative_index("dat", "d", d);
      current_statement__ = 31;
      context__.validate_dims("data initialization","dat","double",
          context__.to_vec(n, d));
      dat = Eigen::Matrix<double, -1, -1>(n, d);
      stan::math::fill(dat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> dat_flat__;
        current_statement__ = 31;
        assign(dat_flat__, nil_index_list(), context__.vals_r("dat"),
          "assigning variable dat_flat__");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 31;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 31;
            assign(dat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              dat_flat__[(pos__ - 1)], "assigning variable dat");
            current_statement__ = 31;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 32;
      validate_non_negative_index("obs", "n", n);
      current_statement__ = 33;
      validate_non_negative_index("obs", "d", d);
      current_statement__ = 34;
      context__.validate_dims("data initialization","obs","int",
          context__.to_vec(n, d));
      obs = std::vector<std::vector<int>>(n, std::vector<int>(d, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> obs_flat__;
        current_statement__ = 34;
        assign(obs_flat__, nil_index_list(), context__.vals_i("obs"),
          "assigning variable obs_flat__");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 34;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 34;
            assign(obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              obs_flat__[(pos__ - 1)], "assigning variable obs");
            current_statement__ = 34;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 35;
      validate_non_negative_index("nobs", "n", n);
      current_statement__ = 36;
      context__.validate_dims("data initialization","nobs","int",
          context__.to_vec(n));
      nobs = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 36;
      assign(nobs, nil_index_list(), context__.vals_i("nobs"),
        "assigning variable nobs");
      current_statement__ = 37;
      context__.validate_dims("data initialization","reg","double",
          context__.to_vec());
      reg = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      reg = context__.vals_r("reg")[(1 - 1)];
      current_statement__ = 38;
      context__.validate_dims("data initialization","corpriortype","int",
          context__.to_vec());
      corpriortype = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      corpriortype = context__.vals_i("corpriortype")[(1 - 1)];
      current_statement__ = 39;
      context__.validate_dims("data initialization","indep","int",
          context__.to_vec());
      indep = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      indep = context__.vals_i("indep")[(1 - 1)];
      current_statement__ = 40;
      validate_non_negative_index("mu", "d", d);
      current_statement__ = 41;
      validate_non_negative_index("logsd", "d", d);
      current_statement__ = 42;
      rawcor_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 42;
      rawcor_1dim__ = (indep ? 0 : (((d * d) - d) / 2));
      current_statement__ = 42;
      validate_non_negative_index("rawcor", "indep ? 0 : (d * d - d) / 2",
                                  rawcor_1dim__);
      current_statement__ = 43;
      validate_non_negative_index("mcor", "d", d);
      current_statement__ = 44;
      validate_non_negative_index("mcor", "d", d);
      current_statement__ = 45;
      validate_non_negative_index("covm", "d", d);
      current_statement__ = 46;
      validate_non_negative_index("covm", "d", d);
      current_statement__ = 47;
      validate_non_negative_index("llrow", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += d;
      num_params_r__ += d;
      num_params_r__ += rawcor_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_cov_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(d);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      mu = in__.vector(d);
      Eigen::Matrix<local_scalar_t__, -1, 1> logsd;
      logsd = Eigen::Matrix<local_scalar_t__, -1, 1>(d);
      stan::math::fill(logsd, DUMMY_VAR__);
      
      current_statement__ = 2;
      logsd = in__.vector(d);
      Eigen::Matrix<local_scalar_t__, -1, 1> rawcor;
      rawcor = Eigen::Matrix<local_scalar_t__, -1, 1>(rawcor_1dim__);
      stan::math::fill(rawcor, DUMMY_VAR__);
      
      current_statement__ = 3;
      rawcor = in__.vector(rawcor_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> mcor;
      mcor = Eigen::Matrix<local_scalar_t__, -1, -1>(d, d);
      stan::math::fill(mcor, DUMMY_VAR__);
      
      current_statement__ = 4;
      assign(mcor, nil_index_list(), diag_matrix(rep_vector(1, d)),
        "assigning variable mcor");
      Eigen::Matrix<local_scalar_t__, -1, -1> covm;
      covm = Eigen::Matrix<local_scalar_t__, -1, -1>(d, d);
      stan::math::fill(covm, DUMMY_VAR__);
      
      local_scalar_t__ corprior;
      corprior = DUMMY_VAR__;
      
      current_statement__ = 6;
      corprior = 0;
      local_scalar_t__ sdprior;
      sdprior = DUMMY_VAR__;
      
      current_statement__ = 7;
      sdprior = normal_lpdf<false>(logsd, mean(logsd), 10);
      Eigen::Matrix<local_scalar_t__, -1, 1> llrow;
      llrow = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(llrow, DUMMY_VAR__);
      
      current_statement__ = 8;
      assign(llrow, nil_index_list(), rep_vector(0, n),
        "assigning variable llrow");
      current_statement__ = 17;
      if (logical_negation(indep)) {
        current_statement__ = 9;
        assign(mcor, nil_index_list(),
          tcrossprod(constraincorsqrt(rawcor, d, pstream__)),
          "assigning variable mcor");
        current_statement__ = 11;
        if (logical_eq(corpriortype, 1)) {
          current_statement__ = 10;
          corprior = normal_lpdf<false>(rawcor, 0, 1);
        } 
        current_statement__ = 13;
        if (logical_eq(corpriortype, 2)) {
          current_statement__ = 12;
          corprior = normal_lpdf<false>(to_vector(mcor), 0, 1);
        } 
        current_statement__ = 15;
        if (logical_eq(corpriortype, 3)) {
          current_statement__ = 14;
          corprior = normal_lpdf<false>(eigenvalues_sym(mcor), 0, 1);
        } 
      } 
      current_statement__ = 18;
      assign(covm, nil_index_list(),
        multiply(
          multiply(diag_matrix(add(stan::math::exp(logsd), 1e-5)), mcor),
          diag_matrix(add(stan::math::exp(logsd), 1e-5))),
        "assigning variable covm");
      current_statement__ = 23;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 21;
        if (logical_gt(nobs[(i - 1)], 0)) {
          current_statement__ = 19;
          assign(llrow, cons_list(index_uni(i), nil_index_list()),
            multi_normal_lpdf<false>(
              rvalue(dat,
                cons_list(index_uni(i),
                  cons_list(
                    index_multi(rvalue(obs,
                                  cons_list(index_uni(i),
                                    cons_list(
                                      index_min_max(1, nobs[(i - 1)]),
                                      nil_index_list())), "obs")),
                    nil_index_list())), "dat"),
              rvalue(mu,
                cons_list(
                  index_multi(rvalue(obs,
                                cons_list(index_uni(i),
                                  cons_list(index_min_max(1, nobs[(i - 1)]),
                                    nil_index_list())), "obs")),
                  nil_index_list()), "mu"),
              rvalue(covm,
                cons_list(
                  index_multi(rvalue(obs,
                                cons_list(index_uni(i),
                                  cons_list(index_min_max(1, nobs[(i - 1)]),
                                    nil_index_list())), "obs")),
                  cons_list(
                    index_multi(rvalue(obs,
                                  cons_list(index_uni(i),
                                    cons_list(
                                      index_min_max(1, nobs[(i - 1)]),
                                      nil_index_list())), "obs")),
                    nil_index_list())), "covm")), "assigning variable llrow");
        } }
      {
        current_statement__ = 24;
        lp_accum__.add(sum(llrow));
        current_statement__ = 26;
        if (logical_neq(reg, 0)) {
          current_statement__ = 25;
          lp_accum__.add(((reg * corprior) + (reg * sdprior)));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_cov_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(d);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      mu = in__.vector(d);
      Eigen::Matrix<double, -1, 1> logsd;
      logsd = Eigen::Matrix<double, -1, 1>(d);
      stan::math::fill(logsd, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      logsd = in__.vector(d);
      Eigen::Matrix<double, -1, 1> rawcor;
      rawcor = Eigen::Matrix<double, -1, 1>(rawcor_1dim__);
      stan::math::fill(rawcor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      rawcor = in__.vector(rawcor_1dim__);
      Eigen::Matrix<double, -1, -1> mcor;
      mcor = Eigen::Matrix<double, -1, -1>(d, d);
      stan::math::fill(mcor, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> covm;
      covm = Eigen::Matrix<double, -1, -1>(d, d);
      stan::math::fill(covm, std::numeric_limits<double>::quiet_NaN());
      
      double corprior;
      corprior = std::numeric_limits<double>::quiet_NaN();
      
      double sdprior;
      sdprior = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> llrow;
      llrow = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(llrow, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        vars__.emplace_back(logsd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= rawcor_1dim__; ++sym1__) {
        vars__.emplace_back(rawcor[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(mcor, nil_index_list(), diag_matrix(rep_vector(1, d)),
        "assigning variable mcor");
      current_statement__ = 6;
      corprior = 0;
      current_statement__ = 7;
      sdprior = normal_lpdf<false>(logsd, mean(logsd), 10);
      current_statement__ = 8;
      assign(llrow, nil_index_list(), rep_vector(0, n),
        "assigning variable llrow");
      current_statement__ = 17;
      if (logical_negation(indep)) {
        current_statement__ = 9;
        assign(mcor, nil_index_list(),
          tcrossprod(constraincorsqrt(rawcor, d, pstream__)),
          "assigning variable mcor");
        current_statement__ = 11;
        if (logical_eq(corpriortype, 1)) {
          current_statement__ = 10;
          corprior = normal_lpdf<false>(rawcor, 0, 1);
        } 
        current_statement__ = 13;
        if (logical_eq(corpriortype, 2)) {
          current_statement__ = 12;
          corprior = normal_lpdf<false>(to_vector(mcor), 0, 1);
        } 
        current_statement__ = 15;
        if (logical_eq(corpriortype, 3)) {
          current_statement__ = 14;
          corprior = normal_lpdf<false>(eigenvalues_sym(mcor), 0, 1);
        } 
      } 
      current_statement__ = 18;
      assign(covm, nil_index_list(),
        multiply(
          multiply(diag_matrix(add(stan::math::exp(logsd), 1e-5)), mcor),
          diag_matrix(add(stan::math::exp(logsd), 1e-5))),
        "assigning variable covm");
      current_statement__ = 23;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 21;
        if (logical_gt(nobs[(i - 1)], 0)) {
          current_statement__ = 19;
          assign(llrow, cons_list(index_uni(i), nil_index_list()),
            multi_normal_lpdf<false>(
              rvalue(dat,
                cons_list(index_uni(i),
                  cons_list(
                    index_multi(rvalue(obs,
                                  cons_list(index_uni(i),
                                    cons_list(
                                      index_min_max(1, nobs[(i - 1)]),
                                      nil_index_list())), "obs")),
                    nil_index_list())), "dat"),
              rvalue(mu,
                cons_list(
                  index_multi(rvalue(obs,
                                cons_list(index_uni(i),
                                  cons_list(index_min_max(1, nobs[(i - 1)]),
                                    nil_index_list())), "obs")),
                  nil_index_list()), "mu"),
              rvalue(covm,
                cons_list(
                  index_multi(rvalue(obs,
                                cons_list(index_uni(i),
                                  cons_list(index_min_max(1, nobs[(i - 1)]),
                                    nil_index_list())), "obs")),
                  cons_list(
                    index_multi(rvalue(obs,
                                  cons_list(index_uni(i),
                                    cons_list(
                                      index_min_max(1, nobs[(i - 1)]),
                                      nil_index_list())), "obs")),
                    nil_index_list())), "covm")), "assigning variable llrow");
        } }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            vars__.emplace_back(
              rvalue(mcor,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "mcor"));}
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            vars__.emplace_back(
              rvalue(covm,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "covm"));}
        }
        vars__.emplace_back(corprior);
        vars__.emplace_back(sdprior);
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          vars__.emplace_back(llrow[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(d);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        assign(mu_flat__, nil_index_list(), context__.vals_r("mu"),
          "assigning variable mu_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 1;
          assign(mu, cons_list(index_uni(sym1__), nil_index_list()),
            mu_flat__[(pos__ - 1)], "assigning variable mu");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> logsd;
      logsd = Eigen::Matrix<double, -1, 1>(d);
      stan::math::fill(logsd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> logsd_flat__;
        current_statement__ = 2;
        assign(logsd_flat__, nil_index_list(), context__.vals_r("logsd"),
          "assigning variable logsd_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 2;
          assign(logsd, cons_list(index_uni(sym1__), nil_index_list()),
            logsd_flat__[(pos__ - 1)], "assigning variable logsd");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rawcor;
      rawcor = Eigen::Matrix<double, -1, 1>(rawcor_1dim__);
      stan::math::fill(rawcor, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rawcor_flat__;
        current_statement__ = 3;
        assign(rawcor_flat__, nil_index_list(), context__.vals_r("rawcor"),
          "assigning variable rawcor_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= rawcor_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(rawcor, cons_list(index_uni(sym1__), nil_index_list()),
            rawcor_flat__[(pos__ - 1)], "assigning variable rawcor");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        vars__.emplace_back(logsd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= rawcor_1dim__; ++sym1__) {
        vars__.emplace_back(rawcor[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mu");
    names__.emplace_back("logsd");
    names__.emplace_back("rawcor");
    names__.emplace_back("mcor");
    names__.emplace_back("covm");
    names__.emplace_back("corprior");
    names__.emplace_back("sdprior");
    names__.emplace_back("llrow");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(d)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(d)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(rawcor_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(d),
                                             static_cast<size_t>(d)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(d),
                                             static_cast<size_t>(d)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "logsd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= rawcor_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rawcor" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mcor" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "corprior");
      param_names__.emplace_back(std::string() + "sdprior");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llrow" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "logsd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= rawcor_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rawcor" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mcor" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "covm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "corprior");
      param_names__.emplace_back(std::string() + "sdprior");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llrow" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << d << "},\"block\":\"parameters\"},{\"name\":\"logsd\",\"type\":{\"name\":\"vector\",\"length\":" << d << "},\"block\":\"parameters\"},{\"name\":\"rawcor\",\"type\":{\"name\":\"vector\",\"length\":" << rawcor_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"mcor\",\"type\":{\"name\":\"matrix\",\"rows\":" << d << ",\"cols\":" << d << "},\"block\":\"transformed_parameters\"},{\"name\":\"covm\",\"type\":{\"name\":\"matrix\",\"rows\":" << d << ",\"cols\":" << d << "},\"block\":\"transformed_parameters\"},{\"name\":\"corprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sdprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"llrow\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << d << "},\"block\":\"parameters\"},{\"name\":\"logsd\",\"type\":{\"name\":\"vector\",\"length\":" << d << "},\"block\":\"parameters\"},{\"name\":\"rawcor\",\"type\":{\"name\":\"vector\",\"length\":" << rawcor_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"mcor\",\"type\":{\"name\":\"matrix\",\"rows\":" << d << ",\"cols\":" << d << "},\"block\":\"transformed_parameters\"},{\"name\":\"covm\",\"type\":{\"name\":\"matrix\",\"rows\":" << d << ",\"cols\":" << d << "},\"block\":\"transformed_parameters\"},{\"name\":\"corprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sdprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"llrow\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_cov_namespace::model_cov;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_cov_namespace::profiles__;
}
#endif
#endif
