// Generated by rstantools.  Do not edit by hand.

/*
    ctsem is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ctsem is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ctsem.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace model_ctsm_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 382, column 2 to column 30)",
                                                      " (in 'string', line 383, column 2 to column 35)",
                                                      " (in 'string', line 384, column 2 to column 43)",
                                                      " (in 'string', line 385, column 2 to column 81)",
                                                      " (in 'string', line 387, column 2 to column 44)",
                                                      " (in 'string', line 388, column 2 to column 41)",
                                                      " (in 'string', line 390, column 2 to column 70)",
                                                      " (in 'string', line 391, column 2 to column 43)",
                                                      " (in 'string', line 395, column 2 to column 31)",
                                                      " (in 'string', line 396, column 2 to column 49)",
                                                      " (in 'string', line 397, column 2 to column 45)",
                                                      " (in 'string', line 398, column 2 to column 49)",
                                                      " (in 'string', line 399, column 2 to column 46)",
                                                      " (in 'string', line 400, column 2 to column 52)",
                                                      " (in 'string', line 401, column 2 to column 61)",
                                                      " (in 'string', line 402, column 2 to column 56)",
                                                      " (in 'string', line 403, column 2 to column 14)",
                                                      " (in 'string', line 404, column 2 to column 86)",
                                                      " (in 'string', line 405, column 2 to column 72)",
                                                      " (in 'string', line 406, column 2 to column 68)",
                                                      " (in 'string', line 407, column 2 to column 58)",
                                                      " (in 'string', line 408, column 2 to column 55)",
                                                      " (in 'string', line 409, column 2 to column 21)",
                                                      " (in 'string', line 411, column 6 to column 61)",
                                                      " (in 'string', line 412, column 6 to column 62)",
                                                      " (in 'string', line 413, column 6 to column 61)",
                                                      " (in 'string', line 414, column 6 to column 60)",
                                                      " (in 'string', line 415, column 6 to column 64)",
                                                      " (in 'string', line 416, column 6 to column 66)",
                                                      " (in 'string', line 417, column 6 to column 68)",
                                                      " (in 'string', line 418, column 6 to column 59)",
                                                      " (in 'string', line 419, column 6 to column 60)",
                                                      " (in 'string', line 420, column 6 to column 67)",
                                                      " (in 'string', line 421, column 6 to column 69)",
                                                      " (in 'string', line 422, column 6 to column 68)",
                                                      " (in 'string', line 423, column 6 to column 62)",
                                                      " (in 'string', line 424, column 6 to column 65)",
                                                      " (in 'string', line 425, column 6 to column 73)",
                                                      " (in 'string', line 426, column 6 to column 144)",
                                                      " (in 'string', line 427, column 6 to column 143)",
                                                      " (in 'string', line 428, column 6 to column 142)",
                                                      " (in 'string', line 429, column 6 to column 141)",
                                                      " (in 'string', line 430, column 6 to column 145)",
                                                      " (in 'string', line 431, column 6 to column 147)",
                                                      " (in 'string', line 432, column 6 to column 149)",
                                                      " (in 'string', line 433, column 6 to column 140)",
                                                      " (in 'string', line 434, column 6 to column 141)",
                                                      " (in 'string', line 435, column 6 to column 148)",
                                                      " (in 'string', line 436, column 6 to column 152)",
                                                      " (in 'string', line 437, column 6 to column 151)",
                                                      " (in 'string', line 438, column 6 to column 145)",
                                                      " (in 'string', line 439, column 6 to column 148)",
                                                      " (in 'string', line 440, column 6 to column 156)",
                                                      " (in 'string', line 441, column 2 to column 113)",
                                                      " (in 'string', line 442, column 2 to column 40)",
                                                      " (in 'string', line 445, column 4 to column 20)",
                                                      " (in 'string', line 451, column 15 to column 59)",
                                                      " (in 'string', line 449, column 10 to column 23)",
                                                      " (in 'string', line 450, column 10 to column 55)",
                                                      " (in 'string', line 448, column 42 to line 451, column 9)",
                                                      " (in 'string', line 448, column 8 to line 451, column 59)",
                                                      " (in 'string', line 447, column 34 to line 452, column 7)",
                                                      " (in 'string', line 447, column 6 to line 452, column 7)",
                                                      " (in 'string', line 446, column 32 to line 453, column 5)",
                                                      " (in 'string', line 446, column 4 to line 453, column 5)",
                                                      " (in 'string', line 444, column 27 to line 454, column 5)",
                                                      " (in 'string', line 444, column 4 to line 454, column 5)",
                                                      " (in 'string', line 460, column 10 to column 34)",
                                                      " (in 'string', line 459, column 15 to line 461, column 9)",
                                                      " (in 'string', line 458, column 10 to column 77)",
                                                      " (in 'string', line 457, column 41 to line 459, column 9)",
                                                      " (in 'string', line 457, column 8 to line 461, column 9)",
                                                      " (in 'string', line 456, column 26 to line 462, column 7)",
                                                      " (in 'string', line 456, column 6 to line 462, column 7)",
                                                      " (in 'string', line 455, column 24 to line 463, column 5)",
                                                      " (in 'string', line 455, column 4 to line 463, column 5)",
                                                      " (in 'string', line 443, column 17 to line 464, column 3)",
                                                      " (in 'string', line 443, column 2 to line 464, column 3)",
                                                      " (in 'string', line 466, column 4 to column 19)",
                                                      " (in 'string', line 467, column 4 to column 62)",
                                                      " (in 'string', line 469, column 6 to column 39)",
                                                      " (in 'string', line 472, column 10 to column 23)",
                                                      " (in 'string', line 473, column 10 to column 62)",
                                                      " (in 'string', line 474, column 10 to column 31)",
                                                      " (in 'string', line 471, column 17 to line 475, column 9)",
                                                      " (in 'string', line 471, column 8 to line 475, column 9)",
                                                      " (in 'string', line 470, column 29 to line 476, column 7)",
                                                      " (in 'string', line 470, column 6 to line 476, column 7)",
                                                      " (in 'string', line 468, column 27 to line 477, column 5)",
                                                      " (in 'string', line 468, column 4 to line 477, column 5)",
                                                      " (in 'string', line 480, column 4 to column 62)",
                                                      " (in 'string', line 481, column 4 to column 78)",
                                                      " (in 'string', line 482, column 4 to column 50)",
                                                      " (in 'string', line 465, column 21 to line 483, column 3)",
                                                      " (in 'string', line 465, column 2 to line 483, column 3)",
                                                      " (in 'string', line 485, column 2 to column 16)",
                                                      " (in 'string', line 486, column 2 to column 16)",
                                                      " (in 'string', line 487, column 2 to column 12)",
                                                      " (in 'string', line 488, column 2 to column 15)",
                                                      " (in 'string', line 489, column 2 to column 17)",
                                                      " (in 'string', line 490, column 2 to column 18)",
                                                      " (in 'string', line 491, column 2 to column 16)",
                                                      " (in 'string', line 492, column 9 to column 19)",
                                                      " (in 'string', line 492, column 21 to column 31)",
                                                      " (in 'string', line 492, column 2 to column 40)",
                                                      " (in 'string', line 494, column 9 to column 18)",
                                                      " (in 'string', line 494, column 2 to column 24)",
                                                      " (in 'string', line 495, column 9 to column 18)",
                                                      " (in 'string', line 495, column 2 to column 28)",
                                                      " (in 'string', line 496, column 9 to column 19)",
                                                      " (in 'string', line 496, column 21 to column 30)",
                                                      " (in 'string', line 496, column 2 to column 34)",
                                                      " (in 'string', line 497, column 9 to column 18)",
                                                      " (in 'string', line 497, column 20 to column 29)",
                                                      " (in 'string', line 497, column 2 to column 82)",
                                                      " (in 'string', line 498, column 9 to column 18)",
                                                      " (in 'string', line 498, column 20 to column 29)",
                                                      " (in 'string', line 498, column 2 to column 36)",
                                                      " (in 'string', line 500, column 9 to column 19)",
                                                      " (in 'string', line 500, column 20 to column 30)",
                                                      " (in 'string', line 500, column 2 to column 77)",
                                                      " (in 'string', line 501, column 38 to column 66)",
                                                      " (in 'string', line 501, column 9 to column 19)",
                                                      " (in 'string', line 501, column 20 to column 30)",
                                                      " (in 'string', line 501, column 2 to column 68)",
                                                      " (in 'string', line 502, column 13 to column 23)",
                                                      " (in 'string', line 502, column 2 to column 65)",
                                                      " (in 'string', line 503, column 13 to column 23)",
                                                      " (in 'string', line 503, column 2 to column 33)",
                                                      " (in 'string', line 504, column 9 to column 19)",
                                                      " (in 'string', line 504, column 20 to column 30)",
                                                      " (in 'string', line 504, column 2 to column 36)",
                                                      " (in 'string', line 506, column 9 to column 19)",
                                                      " (in 'string', line 506, column 20 to column 30)",
                                                      " (in 'string', line 506, column 2 to column 36)",
                                                      " (in 'string', line 507, column 10 to column 19)",
                                                      " (in 'string', line 507, column 20 to column 30)",
                                                      " (in 'string', line 507, column 2 to column 35)",
                                                      " (in 'string', line 508, column 36 to column 64)",
                                                      " (in 'string', line 508, column 10 to column 19)",
                                                      " (in 'string', line 508, column 20 to column 30)",
                                                      " (in 'string', line 508, column 2 to column 66)",
                                                      " (in 'string', line 512, column 9 to column 16)",
                                                      " (in 'string', line 512, column 17 to column 24)",
                                                      " (in 'string', line 512, column 2 to column 40)",
                                                      " (in 'string', line 513, column 9 to column 16)",
                                                      " (in 'string', line 513, column 2 to column 31)",
                                                      " (in 'string', line 514, column 9 to column 16)",
                                                      " (in 'string', line 514, column 17 to column 24)",
                                                      " (in 'string', line 514, column 2 to column 78)",
                                                      " (in 'string', line 516, column 9 to column 16)",
                                                      " (in 'string', line 516, column 2 to column 45)",
                                                      " (in 'string', line 517, column 9 to column 16)",
                                                      " (in 'string', line 517, column 2 to column 28)",
                                                      " (in 'string', line 519, column 42 to column 70)",
                                                      " (in 'string', line 519, column 9 to column 19)",
                                                      " (in 'string', line 519, column 20 to column 30)",
                                                      " (in 'string', line 519, column 2 to column 72)",
                                                      " (in 'string', line 520, column 38 to column 66)",
                                                      " (in 'string', line 520, column 9 to column 18)",
                                                      " (in 'string', line 520, column 19 to column 28)",
                                                      " (in 'string', line 520, column 2 to column 68)",
                                                      " (in 'string', line 521, column 28 to column 56)",
                                                      " (in 'string', line 521, column 9 to column 19)",
                                                      " (in 'string', line 521, column 2 to column 58)",
                                                      " (in 'string', line 522, column 25 to column 53)",
                                                      " (in 'string', line 522, column 9 to column 18)",
                                                      " (in 'string', line 522, column 2 to column 55)",
                                                      " (in 'string', line 525, column 13 to column 30)",
                                                      " (in 'string', line 525, column 32 to column 49)",
                                                      " (in 'string', line 525, column 6 to column 57)",
                                                      " (in 'string', line 526, column 13 to column 29)",
                                                      " (in 'string', line 526, column 31 to column 47)",
                                                      " (in 'string', line 526, column 6 to column 58)",
                                                      " (in 'string', line 527, column 13 to column 29)",
                                                      " (in 'string', line 527, column 31 to column 47)",
                                                      " (in 'string', line 527, column 6 to column 57)",
                                                      " (in 'string', line 528, column 13 to column 29)",
                                                      " (in 'string', line 528, column 31 to column 47)",
                                                      " (in 'string', line 528, column 6 to column 56)",
                                                      " (in 'string', line 529, column 13 to column 29)",
                                                      " (in 'string', line 529, column 31 to column 47)",
                                                      " (in 'string', line 529, column 6 to column 60)",
                                                      " (in 'string', line 530, column 13 to column 29)",
                                                      " (in 'string', line 530, column 31 to column 47)",
                                                      " (in 'string', line 530, column 6 to column 62)",
                                                      " (in 'string', line 531, column 13 to column 29)",
                                                      " (in 'string', line 531, column 31 to column 47)",
                                                      " (in 'string', line 531, column 6 to column 64)",
                                                      " (in 'string', line 532, column 13 to column 29)",
                                                      " (in 'string', line 532, column 31 to column 47)",
                                                      " (in 'string', line 532, column 6 to column 55)",
                                                      " (in 'string', line 533, column 13 to column 29)",
                                                      " (in 'string', line 533, column 31 to column 47)",
                                                      " (in 'string', line 533, column 6 to column 56)",
                                                      " (in 'string', line 534, column 13 to column 29)",
                                                      " (in 'string', line 534, column 31 to column 47)",
                                                      " (in 'string', line 534, column 6 to column 63)",
                                                      " (in 'string', line 535, column 13 to column 30)",
                                                      " (in 'string', line 535, column 32 to column 49)",
                                                      " (in 'string', line 535, column 6 to column 65)",
                                                      " (in 'string', line 536, column 13 to column 30)",
                                                      " (in 'string', line 536, column 32 to column 49)",
                                                      " (in 'string', line 536, column 6 to column 64)",
                                                      " (in 'string', line 537, column 13 to column 30)",
                                                      " (in 'string', line 537, column 32 to column 49)",
                                                      " (in 'string', line 537, column 6 to column 58)",
                                                      " (in 'string', line 538, column 13 to column 30)",
                                                      " (in 'string', line 538, column 32 to column 49)",
                                                      " (in 'string', line 538, column 6 to column 61)",
                                                      " (in 'string', line 539, column 13 to column 30)",
                                                      " (in 'string', line 539, column 32 to column 49)",
                                                      " (in 'string', line 539, column 6 to column 69)",
                                                      " (in 'string', line 541, column 2 to column 51)",
                                                      " (in 'string', line 542, column 2 to column 47)",
                                                      " (in 'string', line 544, column 4 to column 31)",
                                                      " (in 'string', line 549, column 4 to column 38)",
                                                      " (in 'string', line 550, column 4 to column 41)",
                                                      " (in 'string', line 551, column 10 to column 41)",
                                                      " (in 'string', line 551, column 4 to column 43)",
                                                      " (in 'string', line 552, column 11 to column 71)",
                                                      " (in 'string', line 552, column 4 to column 74)",
                                                      " (in 'string', line 553, column 11 to column 69)",
                                                      " (in 'string', line 553, column 4 to column 72)",
                                                      " (in 'string', line 555, column 11 to column 23)",
                                                      " (in 'string', line 555, column 4 to column 59)",
                                                      " (in 'string', line 556, column 12 to column 27)",
                                                      " (in 'string', line 556, column 4 to column 69)",
                                                      " (in 'string', line 557, column 12 to column 25)",
                                                      " (in 'string', line 557, column 4 to column 63)",
                                                      " (in 'string', line 560, column 6 to column 41)",
                                                      " (in 'string', line 561, column 6 to column 48)",
                                                      " (in 'string', line 562, column 6 to column 44)",
                                                      " (in 'string', line 559, column 13 to line 563, column 5)",
                                                      " (in 'string', line 559, column 4 to line 563, column 5)",
                                                      " (in 'string', line 565, column 29 to column 40)",
                                                      " (in 'string', line 565, column 6 to column 40)",
                                                      " (in 'string', line 566, column 6 to column 40)",
                                                      " (in 'string', line 567, column 6 to column 40)",
                                                      " (in 'string', line 564, column 12 to line 568, column 5)",
                                                      " (in 'string', line 564, column 4 to line 568, column 5)",
                                                      " (in 'string', line 570, column 34 to column 85)",
                                                      " (in 'string', line 570, column 4 to column 85)",
                                                      " (in 'string', line 572, column 6 to column 38)",
                                                      " (in 'string', line 573, column 6 to column 28)",
                                                      " (in 'string', line 574, column 6 to column 18)",
                                                      " (in 'string', line 571, column 19 to line 576, column 5)",
                                                      " (in 'string', line 571, column 4 to line 576, column 5)",
                                                      " (in 'string', line 581, column 2 to column 27)",
                                                      " (in 'string', line 583, column 50 to column 117)",
                                                      " (in 'string', line 583, column 2 to column 117)",
                                                      " (in 'string', line 585, column 26 to line 586, column 64)",
                                                      " (in 'string', line 585, column 2 to line 586, column 64)",
                                                      " (in 'string', line 588, column 27 to line 589, column 68)",
                                                      " (in 'string', line 588, column 4 to line 589, column 68)",
                                                      " (in 'string', line 584, column 31 to line 590, column 3)",
                                                      " (in 'string', line 584, column 2 to line 590, column 3)",
                                                      " (in 'string', line 592, column 2 to line 594, column 33)",
                                                      " (in 'string', line 596, column 36 to line 597, column 72)",
                                                      " (in 'string', line 596, column 2 to line 597, column 72)",
                                                      " (in 'string', line 601, column 2 to column 21)",
                                                      " (in 'string', line 603, column 2 to line 604, column 29)",
                                                      " (in 'string', line 606, column 42 to column 113)",
                                                      " (in 'string', line 606, column 2 to column 113)",
                                                      " (in 'string', line 610, column 41 to column 117)",
                                                      " (in 'string', line 610, column 2 to column 117)",
                                                      " (in 'string', line 611, column 39 to column 111)",
                                                      " (in 'string', line 611, column 0 to column 111)",
                                                      " (in 'string', line 614, column 50 to column 76)",
                                                      " (in 'string', line 614, column 28 to column 76)",
                                                      " (in 'string', line 614, column 4 to column 76)",
                                                      " (in 'string', line 617, column 40 to column 112)",
                                                      " (in 'string', line 617, column 3 to column 112)",
                                                      " (in 'string', line 618, column 37 to column 107)",
                                                      " (in 'string', line 618, column 0 to column 107)",
                                                      " (in 'string', line 619, column 37 to column 115)",
                                                      " (in 'string', line 619, column 0 to column 115)",
                                                      " (in 'string', line 620, column 37 to column 119)",
                                                      " (in 'string', line 620, column 0 to column 119)",
                                                      " (in 'string', line 621, column 37 to column 123)",
                                                      " (in 'string', line 621, column 0 to column 123)",
                                                      " (in 'string', line 622, column 37 to column 105)",
                                                      " (in 'string', line 622, column 0 to column 105)",
                                                      " (in 'string', line 623, column 37 to column 107)",
                                                      " (in 'string', line 623, column 0 to column 107)",
                                                      " (in 'string', line 624, column 37 to column 121)",
                                                      " (in 'string', line 624, column 0 to column 121)",
                                                      " (in 'string', line 625, column 38 to column 105)",
                                                      " (in 'string', line 625, column 0 to column 105)",
                                                      " (in 'string', line 626, column 38 to column 105)",
                                                      " (in 'string', line 626, column 0 to column 105)",
                                                      " (in 'string', line 627, column 38 to column 103)",
                                                      " (in 'string', line 627, column 0 to column 103)",
                                                      " (in 'string', line 629, column 19 to column 43)",
                                                      " (in 'string', line 629, column 4 to column 43)",
                                                      " (in 'string', line 630, column 19 to column 52)",
                                                      " (in 'string', line 630, column 4 to column 52)",
                                                      " (in 'string', line 634, column 37 to column 113)",
                                                      " (in 'string', line 634, column 3 to column 113)",
                                                      " (in 'string', line 635, column 4 to column 46)",
                                                      " (in 'string', line 637, column 14 to column 129)",
                                                      " (in 'string', line 637, column 4 to column 129)",
                                                      " (in 'string', line 641, column 12 to column 73)",
                                                      " (in 'string', line 642, column 12 to column 75)",
                                                      " (in 'string', line 640, column 29 to line 643, column 11)",
                                                      " (in 'string', line 640, column 10 to line 643, column 11)",
                                                      " (in 'string', line 639, column 29 to line 644, column 9)",
                                                      " (in 'string', line 639, column 8 to line 644, column 9)",
                                                      " (in 'string', line 638, column 33 to line 645, column 7)",
                                                      " (in 'string', line 638, column 6 to line 645, column 7)",
                                                      " (in 'string', line 636, column 37 to line 646, column 5)",
                                                      " (in 'string', line 636, column 4 to line 646, column 5)",
                                                      " (in 'string', line 633, column 52 to line 647, column 2)",
                                                      " (in 'string', line 633, column 1 to line 647, column 2)",
                                                      " (in 'string', line 674, column 4 to column 17)",
                                                      " (in 'string', line 579, column 21 to line 675, column 5)",
                                                      " (in 'string', line 579, column 4 to line 675, column 5)",
                                                      " (in 'string', line 677, column 16 to column 46)",
                                                      " (in 'string', line 677, column 0 to column 46)",
                                                      " (in 'string', line 679, column 15 to column 22)",
                                                      " (in 'string', line 679, column 8 to column 29)",
                                                      " (in 'string', line 680, column 8 to column 26)",
                                                      " (in 'string', line 682, column 8 to column 46)",
                                                      " (in 'string', line 685, column 10 to column 40)",
                                                      " (in 'string', line 688, column 4 to column 19)",
                                                      " (in 'string', line 689, column 15 to column 25)",
                                                      " (in 'string', line 689, column 4 to column 45)",
                                                      " (in 'string', line 690, column 4 to column 19)",
                                                      " (in 'string', line 691, column 4 to line 717, column 5)",
                                                      " (in 'string', line 692, column 6 to column 24)",
                                                      " (in 'string', line 693, column 20 to column 43)",
                                                      " (in 'string', line 693, column 6 to column 43)",
                                                      " (in 'string', line 695, column 8 to line 696, column 86)",
                                                      " (in 'string', line 699, column 42 to column 111)",
                                                      " (in 'string', line 699, column 8 to column 111)",
                                                      " (in 'string', line 701, column 40 to column 110)",
                                                      " (in 'string', line 701, column 8 to column 110)",
                                                      " (in 'string', line 702, column 40 to column 108)",
                                                      " (in 'string', line 702, column 8 to column 108)",
                                                      " (in 'string', line 706, column 8 to column 70)",
                                                      " (in 'string', line 707, column 23 to column 41)",
                                                      " (in 'string', line 707, column 9 to column 41)",
                                                      " (in 'string', line 705, column 21 to line 708, column 7)",
                                                      " (in 'string', line 705, column 6 to line 708, column 7)",
                                                      " (in 'string', line 710, column 8 to column 52)",
                                                      " (in 'string', line 711, column 22 to column 65)",
                                                      " (in 'string', line 711, column 8 to column 65)",
                                                      " (in 'string', line 712, column 8 to line 715, column 9)",
                                                      " (in 'string', line 713, column 10 to column 36)",
                                                      " (in 'string', line 714, column 10 to column 37)",
                                                      " (in 'string', line 709, column 41 to line 716, column 7)",
                                                      " (in 'string', line 709, column 6 to line 716, column 7)",
                                                      " (in 'string', line 718, column 18 to column 36)",
                                                      " (in 'string', line 718, column 4 to column 36)",
                                                      " (in 'string', line 687, column 4 to line 719, column 5)",
                                                      " (in 'string', line 722, column 38 to column 116)",
                                                      " (in 'string', line 722, column 6 to column 116)",
                                                      " (in 'string', line 723, column 40 to column 107)",
                                                      " (in 'string', line 723, column 6 to column 107)",
                                                      " (in 'string', line 727, column 8 to column 95)",
                                                      " (in 'string', line 728, column 28 to column 59)",
                                                      " (in 'string', line 728, column 8 to column 59)",
                                                      " (in 'string', line 726, column 79 to line 729, column 7)",
                                                      " (in 'string', line 726, column 6 to line 729, column 7)",
                                                      " (in 'string', line 737, column 16 to column 55)",
                                                      " (in 'string', line 741, column 23 to column 66)",
                                                      " (in 'string', line 740, column 18 to column 47)",
                                                      " (in 'string', line 739, column 34 to line 741, column 17)",
                                                      " (in 'string', line 739, column 16 to line 741, column 66)",
                                                      " (in 'string', line 746, column 14 to column 118)",
                                                      " (in 'string', line 745, column 64 to line 747, column 13)",
                                                      " (in 'string', line 743, column 12 to line 747, column 13)",
                                                      " (in 'string', line 749, column 12 to line 750, column 89)",
                                                      " (in 'string', line 734, column 45 to line 752, column 13)",
                                                      " (in 'string', line 733, column 12 to line 752, column 13)",
                                                      " (in 'string', line 755, column 12 to column 93)",
                                                      " (in 'string', line 754, column 90 to line 756, column 13)",
                                                      " (in 'string', line 754, column 33 to line 756, column 13)",
                                                      " (in 'string', line 754, column 12 to line 756, column 13)",
                                                      " (in 'string', line 758, column 12 to column 47)",
                                                      " (in 'string', line 764, column 16 to column 101)",
                                                      " (in 'string', line 763, column 65 to line 765, column 15)",
                                                      " (in 'string', line 762, column 14 to line 765, column 15)",
                                                      " (in 'string', line 767, column 12 to column 46)",
                                                      " (in 'string', line 760, column 33 to line 768, column 13)",
                                                      " (in 'string', line 760, column 12 to line 768, column 13)",
                                                      " (in 'string', line 771, column 14 to column 71)",
                                                      " (in 'string', line 772, column 14 to column 76)",
                                                      " (in 'string', line 770, column 49 to line 773, column 13)",
                                                      " (in 'string', line 770, column 12 to line 773, column 13)",
                                                      " (in 'string', line 775, column 53 to column 85)",
                                                      " (in 'string', line 775, column 12 to column 85)",
                                                      " (in 'string', line 731, column 26 to line 776, column 9)",
                                                      " (in 'string', line 731, column 8 to line 776, column 9)",
                                                      " (in 'string', line 779, column 25 to column 45)",
                                                      " (in 'string', line 779, column 10 to column 45)",
                                                      " (in 'string', line 781, column 12 to column 68)",
                                                      " (in 'string', line 782, column 12 to column 75)",
                                                      " (in 'string', line 780, column 47 to line 783, column 11)",
                                                      " (in 'string', line 780, column 10 to line 783, column 11)",
                                                      " (in 'string', line 784, column 10 to column 37)",
                                                      " (in 'string', line 785, column 10 to column 52)",
                                                      " (in 'string', line 778, column 29 to line 786, column 9)",
                                                      " (in 'string', line 778, column 8 to line 786, column 9)",
                                                      " (in 'string', line 684, column 36 to line 788, column 9)",
                                                      " (in 'string', line 684, column 8 to line 788, column 9)",
                                                      " (in 'string', line 678, column 30 to line 789, column 7)",
                                                      " (in 'string', line 678, column 6 to line 789, column 7)",
                                                      " (in 'string', line 792, column 6 to column 28)",
                                                      " (in 'string', line 793, column 57 to column 75)",
                                                      " (in 'string', line 793, column 28 to column 75)",
                                                      " (in 'string', line 793, column 6 to column 75)",
                                                      " (in 'string', line 796, column 8 to line 797, column 88)",
                                                      " (in 'string', line 800, column 42 to column 111)",
                                                      " (in 'string', line 800, column 8 to column 111)",
                                                      " (in 'string', line 804, column 40 to column 124)",
                                                      " (in 'string', line 804, column 8 to column 124)",
                                                      " (in 'string', line 805, column 42 to column 109)",
                                                      " (in 'string', line 805, column 8 to column 109)",
                                                      " (in 'string', line 807, column 8 to column 62)",
                                                      " (in 'string', line 808, column 8 to column 63)",
                                                      " (in 'string', line 794, column 31 to line 809, column 7)",
                                                      " (in 'string', line 794, column 6 to line 809, column 7)",
                                                      " (in 'string', line 791, column 20 to line 810, column 5)",
                                                      " (in 'string', line 791, column 4 to line 810, column 5)",
                                                      " (in 'string', line 812, column 19 to column 120)",
                                                      " (in 'string', line 812, column 4 to column 120)",
                                                      " (in 'string', line 813, column 18 to line 814, column 90)",
                                                      " (in 'string', line 813, column 4 to line 814, column 90)",
                                                      " (in 'string', line 811, column 32 to line 821, column 3)",
                                                      " (in 'string', line 811, column 2 to line 821, column 3)",
                                                      " (in 'string', line 823, column 2 to column 30)",
                                                      " (in 'string', line 824, column 2 to column 34)",
                                                      " (in 'string', line 822, column 15 to line 825, column 1)",
                                                      " (in 'string', line 822, column 0 to line 825, column 1)",
                                                      " (in 'string', line 827, column 2 to column 27)",
                                                      " (in 'string', line 828, column 2 to column 24)",
                                                      " (in 'string', line 826, column 14 to line 829, column 1)",
                                                      " (in 'string', line 826, column 0 to line 829, column 1)",
                                                      " (in 'string', line 832, column 4 to column 19)",
                                                      " (in 'string', line 833, column 15 to column 25)",
                                                      " (in 'string', line 833, column 4 to column 45)",
                                                      " (in 'string', line 834, column 4 to column 19)",
                                                      " (in 'string', line 835, column 4 to line 870, column 5)",
                                                      " (in 'string', line 836, column 6 to column 24)",
                                                      " (in 'string', line 837, column 56 to column 79)",
                                                      " (in 'string', line 837, column 6 to column 79)",
                                                      " (in 'string', line 840, column 8 to line 841, column 88)",
                                                      " (in 'string', line 844, column 42 to column 111)",
                                                      " (in 'string', line 844, column 8 to column 111)",
                                                      " (in 'string', line 848, column 40 to column 112)",
                                                      " (in 'string', line 848, column 8 to column 112)",
                                                      " (in 'string', line 849, column 40 to column 122)",
                                                      " (in 'string', line 849, column 8 to column 122)",
                                                      " (in 'string', line 850, column 40 to column 126)",
                                                      " (in 'string', line 850, column 8 to column 126)",
                                                      " (in 'string', line 851, column 42 to column 107)",
                                                      " (in 'string', line 851, column 8 to column 107)",
                                                      " (in 'string', line 855, column 8 to column 75)",
                                                      " (in 'string', line 856, column 8 to column 73)",
                                                      " (in 'string', line 857, column 22 to column 38)",
                                                      " (in 'string', line 857, column 8 to column 38)",
                                                      " (in 'string', line 854, column 44 to line 858, column 7)",
                                                      " (in 'string', line 854, column 6 to line 858, column 7)",
                                                      " (in 'string', line 860, column 8 to column 72)",
                                                      " (in 'string', line 861, column 8 to column 71)",
                                                      " (in 'string', line 863, column 24 to column 70)",
                                                      " (in 'string', line 863, column 10 to column 70)",
                                                      " (in 'string', line 864, column 10 to line 867, column 11)",
                                                      " (in 'string', line 865, column 12 to column 35)",
                                                      " (in 'string', line 866, column 12 to column 30)",
                                                      " (in 'string', line 862, column 28 to line 868, column 9)",
                                                      " (in 'string', line 862, column 8 to line 868, column 9)",
                                                      " (in 'string', line 859, column 19 to line 869, column 7)",
                                                      " (in 'string', line 859, column 6 to line 869, column 7)",
                                                      " (in 'string', line 871, column 18 to column 34)",
                                                      " (in 'string', line 871, column 4 to column 34)",
                                                      " (in 'string', line 831, column 47 to line 872, column 3)",
                                                      " (in 'string', line 831, column 2 to line 872, column 3)",
                                                      " (in 'string', line 874, column 59 to column 113)",
                                                      " (in 'string', line 874, column 2 to column 113)",
                                                      " (in 'string', line 878, column 8 to column 89)",
                                                      " (in 'string', line 881, column 77 to column 133)",
                                                      " (in 'string', line 881, column 10 to column 133)",
                                                      " (in 'string', line 882, column 77 to column 141)",
                                                      " (in 'string', line 882, column 10 to column 141)",
                                                      " (in 'string', line 879, column 30 to line 883, column 9)",
                                                      " (in 'string', line 879, column 8 to line 883, column 9)",
                                                      " (in 'string', line 877, column 44 to line 884, column 7)",
                                                      " (in 'string', line 877, column 6 to line 884, column 7)",
                                                      " (in 'string', line 886, column 48 to line 887, column 64)",
                                                      " (in 'string', line 886, column 6 to line 887, column 64)",
                                                      " (in 'string', line 890, column 0 to column 35)",
                                                      " (in 'string', line 894, column 25 to line 904, column 103)",
                                                      " (in 'string', line 894, column 9 to line 904, column 103)",
                                                      " (in 'string', line 906, column 8 to column 86)",
                                                      " (in 'string', line 907, column 8 to column 45)",
                                                      " (in 'string', line 908, column 8 to column 38)",
                                                      " (in 'string', line 892, column 43 to line 909, column 7)",
                                                      " (in 'string', line 892, column 6 to line 909, column 7)",
                                                      " (in 'string', line 912, column 8 to column 32)",
                                                      " (in 'string', line 913, column 8 to column 30)",
                                                      " (in 'string', line 914, column 8 to column 29)",
                                                      " (in 'string', line 915, column 8 to column 33)",
                                                      " (in 'string', line 916, column 8 to column 84)",
                                                      " (in 'string', line 917, column 8 to column 73)",
                                                      " (in 'string', line 918, column 8 to column 25)",
                                                      " (in 'string', line 911, column 24 to line 919, column 7)",
                                                      " (in 'string', line 911, column 6 to line 919, column 7)",
                                                      " (in 'string', line 922, column 22 to column 121)",
                                                      " (in 'string', line 922, column 6 to column 121)",
                                                      " (in 'string', line 925, column 30 to column 129)",
                                                      " (in 'string', line 925, column 6 to column 129)",
                                                      " (in 'string', line 927, column 29 to column 87)",
                                                      " (in 'string', line 927, column 8 to column 87)",
                                                      " (in 'string', line 928, column 9 to column 105)",
                                                      " (in 'string', line 926, column 66 to line 933, column 7)",
                                                      " (in 'string', line 926, column 6 to line 933, column 7)",
                                                      " (in 'string', line 934, column 22 to column 41)",
                                                      " (in 'string', line 934, column 6 to column 41)",
                                                      " (in 'string', line 876, column 48 to line 936, column 5)",
                                                      " (in 'string', line 876, column 2 to line 936, column 5)",
                                                      " (in 'string', line 942, column 28 to column 85)",
                                                      " (in 'string', line 942, column 6 to column 85)",
                                                      " (in 'string', line 943, column 28 to column 96)",
                                                      " (in 'string', line 943, column 6 to column 96)",
                                                      " (in 'string', line 941, column 98 to line 944, column 5)",
                                                      " (in 'string', line 940, column 4 to line 944, column 5)",
                                                      " (in 'string', line 950, column 6 to line 952, column 79)",
                                                      " (in 'string', line 948, column 96 to line 953, column 5)",
                                                      " (in 'string', line 947, column 4 to line 953, column 5)",
                                                      " (in 'string', line 946, column 21 to line 954, column 3)",
                                                      " (in 'string', line 946, column 2 to line 954, column 3)",
                                                      " (in 'string', line 958, column 0 to column 16)",
                                                      " (in 'string', line 958, column 17 to column 39)",
                                                      " (in 'string', line 958, column 40 to column 60)",
                                                      " (in 'string', line 958, column 61 to column 79)",
                                                      " (in 'string', line 958, column 80 to column 106)",
                                                      " (in 'string', line 958, column 107 to column 137)",
                                                      " (in 'string', line 958, column 138 to column 172)",
                                                      " (in 'string', line 958, column 173 to column 189)",
                                                      " (in 'string', line 958, column 190 to column 208)",
                                                      " (in 'string', line 958, column 209 to column 241)",
                                                      " (in 'string', line 958, column 242 to column 274)",
                                                      " (in 'string', line 958, column 275 to column 305)",
                                                      " (in 'string', line 958, column 306 to column 324)",
                                                      " (in 'string', line 958, column 325 to column 349)",
                                                      " (in 'string', line 958, column 350 to column 390)",
                                                      " (in 'string', line 957, column 13 to line 959, column 3)",
                                                      " (in 'string', line 957, column 2 to line 959, column 3)",
                                                      " (in 'string', line 962, column 4 to column 19)",
                                                      " (in 'string', line 970, column 15 to column 25)",
                                                      " (in 'string', line 970, column 26 to column 36)",
                                                      " (in 'string', line 970, column 8 to column 47)",
                                                      " (in 'string', line 971, column 8 to column 90)",
                                                      " (in 'string', line 972, column 8 to column 82)",
                                                      " (in 'string', line 973, column 8 to column 103)",
                                                      " (in 'string', line 974, column 8 to column 77)",
                                                      " (in 'string', line 975, column 8 to column 99)",
                                                      " (in 'string', line 969, column 12 to line 976, column 7)",
                                                      " (in 'string', line 965, column 8 to column 32)",
                                                      " (in 'string', line 966, column 8 to column 28)",
                                                      " (in 'string', line 967, column 8 to column 38)",
                                                      " (in 'string', line 968, column 8 to column 34)",
                                                      " (in 'string', line 964, column 20 to line 969, column 7)",
                                                      " (in 'string', line 964, column 6 to line 976, column 7)",
                                                      " (in 'string', line 977, column 6 to column 26)",
                                                      " (in 'string', line 978, column 6 to column 16)",
                                                      " (in 'string', line 979, column 45 to column 54)",
                                                      " (in 'string', line 979, column 6 to column 54)",
                                                      " (in 'string', line 983, column 49 to column 70)",
                                                      " (in 'string', line 983, column 4 to column 70)",
                                                      " (in 'string', line 984, column 47 to column 74)",
                                                      " (in 'string', line 984, column 4 to column 74)",
                                                      " (in 'string', line 985, column 47 to column 72)",
                                                      " (in 'string', line 985, column 4 to column 72)",
                                                      " (in 'string', line 986, column 47 to column 70)",
                                                      " (in 'string', line 986, column 4 to column 70)",
                                                      " (in 'string', line 987, column 47 to column 78)",
                                                      " (in 'string', line 987, column 4 to column 78)",
                                                      " (in 'string', line 988, column 47 to column 82)",
                                                      " (in 'string', line 988, column 4 to column 82)",
                                                      " (in 'string', line 989, column 47 to column 86)",
                                                      " (in 'string', line 989, column 4 to column 86)",
                                                      " (in 'string', line 990, column 47 to column 68)",
                                                      " (in 'string', line 990, column 4 to column 68)",
                                                      " (in 'string', line 991, column 47 to column 70)",
                                                      " (in 'string', line 991, column 4 to column 70)",
                                                      " (in 'string', line 992, column 47 to column 84)",
                                                      " (in 'string', line 992, column 4 to column 84)",
                                                      " (in 'string', line 993, column 49 to column 86)",
                                                      " (in 'string', line 993, column 4 to column 86)",
                                                      " (in 'string', line 994, column 49 to column 84)",
                                                      " (in 'string', line 994, column 4 to column 84)",
                                                      " (in 'string', line 995, column 49 to column 72)",
                                                      " (in 'string', line 995, column 4 to column 72)",
                                                      " (in 'string', line 996, column 49 to column 78)",
                                                      " (in 'string', line 996, column 4 to column 78)",
                                                      " (in 'string', line 997, column 49 to column 94)",
                                                      " (in 'string', line 997, column 4 to column 94)",
                                                      " (in 'string', line 998, column 48 to column 77)",
                                                      " (in 'string', line 998, column 5 to column 77)",
                                                      " (in 'string', line 981, column 51 to line 999, column 9)",
                                                      " (in 'string', line 980, column 6 to line 999, column 9)",
                                                      " (in 'string', line 963, column 36 to line 1001, column 5)",
                                                      " (in 'string', line 963, column 4 to line 1001, column 5)",
                                                      " (in 'string', line 961, column 85 to line 1002, column 3)",
                                                      " (in 'string', line 961, column 2 to line 1002, column 3)",
                                                      " (in 'string', line 547, column 78 to line 1004, column 2)",
                                                      " (in 'string', line 545, column 4 to line 1004, column 2)",
                                                      " (in 'string', line 1006, column 2 to column 17)",
                                                      " (in 'string', line 543, column 45 to line 1007, column 1)",
                                                      " (in 'string', line 543, column 2 to line 1007, column 1)",
                                                      " (in 'string', line 1009, column 2 to column 8)",
                                                      " (in 'string', line 1010, column 2 to column 14)",
                                                      " (in 'string', line 1011, column 2 to column 12)",
                                                      " (in 'string', line 1012, column 2 to column 18)",
                                                      " (in 'string', line 1008, column 14 to line 1013, column 1)",
                                                      " (in 'string', line 1008, column 0 to line 1013, column 1)",
                                                      " (in 'string', line 1014, column 0 to column 15)",
                                                      " (in 'string', line 484, column 2 to line 1015, column 3)",
                                                      " (in 'string', line 1048, column 2 to column 27)",
                                                      " (in 'string', line 1049, column 2 to column 28)",
                                                      " (in 'string', line 1050, column 2 to column 41)",
                                                      " (in 'string', line 1051, column 2 to column 45)",
                                                      " (in 'string', line 1053, column 11 to column 18)",
                                                      " (in 'string', line 1053, column 20 to column 31)",
                                                      " (in 'string', line 1053, column 4 to column 35)",
                                                      " (in 'string', line 1056, column 8 to line 1057, column 91)",
                                                      " (in 'string', line 1055, column 26 to line 1058, column 7)",
                                                      " (in 'string', line 1055, column 6 to line 1058, column 7)",
                                                      " (in 'string', line 1054, column 19 to line 1059, column 5)",
                                                      " (in 'string', line 1054, column 4 to line 1059, column 5)",
                                                      " (in 'string', line 1062, column 6 to column 18)",
                                                      " (in 'string', line 1063, column 6 to column 14)",
                                                      " (in 'string', line 1064, column 6 to column 14)",
                                                      " (in 'string', line 1065, column 6 to column 39)",
                                                      " (in 'string', line 1069, column 12 to column 21)",
                                                      " (in 'string', line 1070, column 12 to column 19)",
                                                      " (in 'string', line 1071, column 12 to column 20)",
                                                      " (in 'string', line 1075, column 67 to column 77)",
                                                      " (in 'string', line 1074, column 16 to line 1075, column 77)",
                                                      " (in 'string', line 1073, column 42 to line 1077, column 15)",
                                                      " (in 'string', line 1073, column 14 to line 1077, column 15)",
                                                      " (in 'string', line 1072, column 45 to line 1078, column 13)",
                                                      " (in 'string', line 1072, column 12 to line 1078, column 13)",
                                                      " (in 'string', line 1068, column 54 to line 1079, column 11)",
                                                      " (in 'string', line 1068, column 10 to line 1079, column 11)",
                                                      " (in 'string', line 1067, column 35 to line 1080, column 9)",
                                                      " (in 'string', line 1067, column 8 to line 1080, column 9)",
                                                      " (in 'string', line 1066, column 19 to line 1081, column 7)",
                                                      " (in 'string', line 1066, column 6 to line 1081, column 7)",
                                                      " (in 'string', line 1083, column 6 to column 128)",
                                                      " (in 'string', line 1086, column 10 to column 147)",
                                                      " (in 'string', line 1085, column 28 to line 1087, column 9)",
                                                      " (in 'string', line 1085, column 8 to line 1087, column 9)",
                                                      " (in 'string', line 1088, column 8 to column 78)",
                                                      " (in 'string', line 1084, column 25 to line 1089, column 7)",
                                                      " (in 'string', line 1084, column 6 to line 1089, column 7)",
                                                      " (in 'string', line 1095, column 8 to line 1098, column 21)",
                                                      " (in 'string', line 1094, column 15 to line 1099, column 9)",
                                                      " (in 'string', line 1093, column 10 to column 54)",
                                                      " (in 'string', line 1092, column 54 to line 1094, column 9)",
                                                      " (in 'string', line 1092, column 8 to line 1099, column 9)",
                                                      " (in 'string', line 1091, column 27 to line 1100, column 7)",
                                                      " (in 'string', line 1091, column 6 to line 1100, column 7)",
                                                      " (in 'string', line 1090, column 21 to line 1101, column 5)",
                                                      " (in 'string', line 1090, column 6 to line 1101, column 5)",
                                                      " (in 'string', line 1061, column 24 to line 1102, column 5)",
                                                      " (in 'string', line 1061, column 4 to line 1102, column 5)",
                                                      " (in 'string', line 1105, column 4 to column 39)",
                                                      " (in 'string', line 1106, column 4 to column 35)",
                                                      " (in 'string', line 1104, column 17 to line 1107, column 3)",
                                                      " (in 'string', line 1104, column 2 to line 1107, column 3)",
                                                      " (in 'string', line 1052, column 2 to line 1108, column 3)",
                                                      " (in 'string', line 1019, column 2 to column 39)",
                                                      " (in 'string', line 1020, column 39 to column 160)",
                                                      " (in 'string', line 1020, column 2 to column 160)",
                                                      " (in 'string', line 1022, column 41 to column 120)",
                                                      " (in 'string', line 1022, column 4 to column 120)",
                                                      " (in 'string', line 1023, column 68 to column 213)",
                                                      " (in 'string', line 1023, column 41 to column 213)",
                                                      " (in 'string', line 1023, column 4 to column 213)",
                                                      " (in 'string', line 1024, column 4 to column 65)",
                                                      " (in 'string', line 1021, column 17 to line 1025, column 3)",
                                                      " (in 'string', line 1021, column 2 to line 1025, column 3)",
                                                      " (in 'string', line 1028, column 29 to column 139)",
                                                      " (in 'string', line 1028, column 6 to column 139)",
                                                      " (in 'string', line 1027, column 23 to line 1029, column 5)",
                                                      " (in 'string', line 1027, column 4 to line 1029, column 5)",
                                                      " (in 'string', line 1026, column 17 to line 1030, column 3)",
                                                      " (in 'string', line 1026, column 2 to line 1030, column 3)",
                                                      " (in 'string', line 1033, column 27 to column 80)",
                                                      " (in 'string', line 1033, column 4 to column 80)",
                                                      " (in 'string', line 1032, column 21 to line 1034, column 3)",
                                                      " (in 'string', line 1032, column 2 to line 1034, column 3)",
                                                      " (in 'string', line 1037, column 25 to column 75)",
                                                      " (in 'string', line 1037, column 6 to column 75)",
                                                      " (in 'string', line 1038, column 6 to column 59)",
                                                      " (in 'string', line 1036, column 23 to line 1039, column 5)",
                                                      " (in 'string', line 1036, column 4 to line 1039, column 5)",
                                                      " (in 'string', line 1031, column 38 to line 1040, column 3)",
                                                      " (in 'string', line 1031, column 2 to line 1040, column 3)",
                                                      " (in 'string', line 1042, column 23 to column 66)",
                                                      " (in 'string', line 1042, column 2 to column 66)",
                                                      " (in 'string', line 1044, column 2 to column 14)",
                                                      " (in 'string', line 1045, column 18 to column 43)",
                                                      " (in 'string', line 1045, column 2 to column 43)",
                                                      " (in 'string', line 285, column 2 to column 27)",
                                                      " (in 'string', line 286, column 2 to column 25)",
                                                      " (in 'string', line 287, column 2 to column 23)",
                                                      " (in 'string', line 288, column 2 to column 17)",
                                                      " (in 'string', line 289, column 2 to column 16)",
                                                      " (in 'string', line 290, column 2 to column 23)",
                                                      " (in 'string', line 291, column 2 to column 23)",
                                                      " (in 'string', line 292, column 9 to column 32)",
                                                      " (in 'string', line 292, column 34 to column 55)",
                                                      " (in 'string', line 292, column 2 to column 69)",
                                                      " (in 'string', line 293, column 2 to column 22)",
                                                      " (in 'string', line 294, column 2 to column 21)",
                                                      " (in 'string', line 295, column 2 to column 36)",
                                                      " (in 'string', line 296, column 2 to column 34)",
                                                      " (in 'string', line 297, column 22 to column 33)",
                                                      " (in 'string', line 297, column 9 to column 18)",
                                                      " (in 'string', line 297, column 2 to column 35)",
                                                      " (in 'string', line 298, column 2 to column 15)",
                                                      " (in 'string', line 299, column 26 to column 37)",
                                                      " (in 'string', line 299, column 9 to column 16)",
                                                      " (in 'string', line 299, column 2 to column 39)",
                                                      " (in 'string', line 301, column 2 to column 19)",
                                                      " (in 'string', line 302, column 12 to column 23)",
                                                      " (in 'string', line 302, column 2 to column 25)",
                                                      " (in 'string', line 303, column 14 to column 25)",
                                                      " (in 'string', line 303, column 2 to column 27)",
                                                      " (in 'string', line 304, column 2 to column 23)",
                                                      " (in 'string', line 305, column 2 to column 21)",
                                                      " (in 'string', line 306, column 2 to column 18)",
                                                      " (in 'string', line 307, column 2 to column 30)",
                                                      " (in 'string', line 308, column 9 to column 20)",
                                                      " (in 'string', line 308, column 2 to column 30)",
                                                      " (in 'string', line 309, column 22 to column 33)",
                                                      " (in 'string', line 309, column 2 to column 35)",
                                                      " (in 'string', line 310, column 25 to column 44)",
                                                      " (in 'string', line 310, column 2 to column 46)",
                                                      " (in 'string', line 316, column 13 to column 24)",
                                                      " (in 'string', line 316, column 2 to column 26)",
                                                      " (in 'string', line 317, column 17 to column 28)",
                                                      " (in 'string', line 317, column 30 to column 39)",
                                                      " (in 'string', line 317, column 2 to column 41)",
                                                      " (in 'string', line 318, column 2 to column 17)",
                                                      " (in 'string', line 319, column 14 to column 24)",
                                                      " (in 'string', line 319, column 2 to column 26)",
                                                      " (in 'string', line 320, column 19 to column 28)",
                                                      " (in 'string', line 320, column 2 to column 30)",
                                                      " (in 'string', line 321, column 16 to column 27)",
                                                      " (in 'string', line 321, column 2 to column 29)",
                                                      " (in 'string', line 322, column 20 to column 31)",
                                                      " (in 'string', line 322, column 33 to column 42)",
                                                      " (in 'string', line 322, column 2 to column 44)",
                                                      " (in 'string', line 323, column 14 to column 25)",
                                                      " (in 'string', line 323, column 2 to column 27)",
                                                      " (in 'string', line 324, column 18 to column 29)",
                                                      " (in 'string', line 324, column 31 to column 40)",
                                                      " (in 'string', line 324, column 2 to column 42)",
                                                      " (in 'string', line 326, column 2 to column 17)",
                                                      " (in 'string', line 327, column 2 to column 19)",
                                                      " (in 'string', line 328, column 2 to column 19)",
                                                      " (in 'string', line 329, column 2 to column 20)",
                                                      " (in 'string', line 330, column 2 to column 14)",
                                                      " (in 'string', line 331, column 24 to column 31)",
                                                      " (in 'string', line 331, column 33 to column 40)",
                                                      " (in 'string', line 331, column 2 to column 42)",
                                                      " (in 'string', line 332, column 2 to column 19)",
                                                      " (in 'string', line 333, column 15 to column 27)",
                                                      " (in 'string', line 333, column 2 to column 31)",
                                                      " (in 'string', line 334, column 17 to column 29)",
                                                      " (in 'string', line 334, column 2 to column 33)",
                                                      " (in 'string', line 335, column 2 to column 20)",
                                                      " (in 'string', line 336, column 17 to column 24)",
                                                      " (in 'string', line 336, column 2 to column 26)",
                                                      " (in 'string', line 337, column 17 to column 27)",
                                                      " (in 'string', line 337, column 2 to column 29)",
                                                      " (in 'string', line 338, column 2 to column 23)",
                                                      " (in 'string', line 339, column 2 to column 17)",
                                                      " (in 'string', line 340, column 2 to column 26)",
                                                      " (in 'string', line 341, column 2 to column 15)",
                                                      " (in 'string', line 342, column 19 to column 30)",
                                                      " (in 'string', line 342, column 2 to column 32)",
                                                      " (in 'string', line 343, column 2 to column 15)",
                                                      " (in 'string', line 344, column 2 to column 13)",
                                                      " (in 'string', line 345, column 2 to column 16)",
                                                      " (in 'string', line 346, column 32 to column 60)",
                                                      " (in 'string', line 346, column 2 to column 62)",
                                                      " (in 'string', line 347, column 2 to column 17)",
                                                      " (in 'string', line 348, column 16 to column 26)",
                                                      " (in 'string', line 348, column 2 to column 28)",
                                                      " (in 'string', line 349, column 2 to column 16)",
                                                      " (in 'string', line 350, column 15 to column 24)",
                                                      " (in 'string', line 350, column 2 to column 26)",
                                                      " (in 'string', line 351, column 2 to column 17)",
                                                      " (in 'string', line 352, column 2 to column 14)",
                                                      " (in 'string', line 353, column 2 to column 18)",
                                                      " (in 'string', line 354, column 19 to column 26)",
                                                      " (in 'string', line 354, column 2 to column 28)",
                                                      " (in 'string', line 355, column 2 to column 23)",
                                                      " (in 'string', line 356, column 2 to column 21)",
                                                      " (in 'string', line 357, column 2 to column 22)",
                                                      " (in 'string', line 358, column 18 to column 33)",
                                                      " (in 'string', line 358, column 2 to column 35)",
                                                      " (in 'string', line 359, column 2 to column 20)",
                                                      " (in 'string', line 363, column 9 to column 28)",
                                                      " (in 'string', line 363, column 29 to column 48)",
                                                      " (in 'string', line 363, column 2 to column 111)",
                                                      " (in 'string', line 364, column 9 to column 27)",
                                                      " (in 'string', line 364, column 2 to column 75)",
                                                      " (in 'string', line 365, column 9 to column 18)",
                                                      " (in 'string', line 365, column 2 to column 63)",
                                                      " (in 'string', line 366, column 22 to column 29)",
                                                      " (in 'string', line 366, column 2 to column 52)",
                                                      " (in 'string', line 367, column 2 to column 21)",
                                                      " (in 'string', line 368, column 2 to column 53)",
                                                      " (in 'string', line 373, column 6 to column 20)",
                                                      " (in 'string', line 374, column 6 to column 39)",
                                                      " (in 'string', line 372, column 42 to line 375, column 7)",
                                                      " (in 'string', line 372, column 6 to line 375, column 7)",
                                                      " (in 'string', line 371, column 24 to line 376, column 5)",
                                                      " (in 'string', line 371, column 4 to line 376, column 5)",
                                                      " (in 'string', line 370, column 16 to line 377, column 3)",
                                                      " (in 'string', line 370, column 2 to line 377, column 3)",
                                                      " (in 'string', line 382, column 9 to column 16)",
                                                      " (in 'string', line 383, column 9 to column 20)",
                                                      " (in 'string', line 384, column 9 to column 32)",
                                                      " (in 'string', line 385, column 53 to column 79)",
                                                      " (in 'string', line 385, column 9 to column 37)",
                                                      " (in 'string', line 387, column 9 to column 23)",
                                                      " (in 'string', line 388, column 9 to column 24)",
                                                      " (in 'string', line 390, column 9 to column 51)",
                                                      " (in 'string', line 391, column 9 to column 31)",
                                                      " (in 'string', line 395, column 9 to column 20)",
                                                      " (in 'string', line 396, column 9 to column 20)",
                                                      " (in 'string', line 396, column 22 to column 33)",
                                                      " (in 'string', line 397, column 9 to column 20)",
                                                      " (in 'string', line 397, column 22 to column 33)",
                                                      " (in 'string', line 398, column 9 to column 20)",
                                                      " (in 'string', line 398, column 22 to column 33)",
                                                      " (in 'string', line 399, column 9 to column 20)",
                                                      " (in 'string', line 399, column 22 to column 33)",
                                                      " (in 'string', line 404, column 9 to column 35)",
                                                      " (in 'string', line 405, column 42 to column 70)",
                                                      " (in 'string', line 405, column 9 to column 19)",
                                                      " (in 'string', line 405, column 20 to column 30)",
                                                      " (in 'string', line 406, column 38 to column 66)",
                                                      " (in 'string', line 406, column 9 to column 18)",
                                                      " (in 'string', line 406, column 19 to column 28)",
                                                      " (in 'string', line 407, column 28 to column 56)",
                                                      " (in 'string', line 407, column 9 to column 19)",
                                                      " (in 'string', line 408, column 25 to column 53)",
                                                      " (in 'string', line 408, column 9 to column 18)",
                                                      " (in 'string', line 409, column 18 to column 19)",
                                                      " (in 'string', line 409, column 9 to column 10)",
                                                      " (in 'string', line 411, column 13 to column 30)",
                                                      " (in 'string', line 411, column 32 to column 49)",
                                                      " (in 'string', line 412, column 13 to column 29)",
                                                      " (in 'string', line 412, column 31 to column 47)",
                                                      " (in 'string', line 413, column 13 to column 29)",
                                                      " (in 'string', line 413, column 31 to column 47)",
                                                      " (in 'string', line 414, column 13 to column 29)",
                                                      " (in 'string', line 414, column 31 to column 47)",
                                                      " (in 'string', line 415, column 13 to column 29)",
                                                      " (in 'string', line 415, column 31 to column 47)",
                                                      " (in 'string', line 416, column 13 to column 29)",
                                                      " (in 'string', line 416, column 31 to column 47)",
                                                      " (in 'string', line 417, column 13 to column 29)",
                                                      " (in 'string', line 417, column 31 to column 47)",
                                                      " (in 'string', line 418, column 13 to column 29)",
                                                      " (in 'string', line 418, column 31 to column 47)",
                                                      " (in 'string', line 419, column 13 to column 29)",
                                                      " (in 'string', line 419, column 31 to column 47)",
                                                      " (in 'string', line 420, column 13 to column 29)",
                                                      " (in 'string', line 420, column 31 to column 47)",
                                                      " (in 'string', line 421, column 13 to column 30)",
                                                      " (in 'string', line 421, column 32 to column 49)",
                                                      " (in 'string', line 422, column 13 to column 30)",
                                                      " (in 'string', line 422, column 32 to column 49)",
                                                      " (in 'string', line 423, column 13 to column 30)",
                                                      " (in 'string', line 423, column 32 to column 49)",
                                                      " (in 'string', line 424, column 13 to column 30)",
                                                      " (in 'string', line 424, column 32 to column 49)",
                                                      " (in 'string', line 425, column 13 to column 30)",
                                                      " (in 'string', line 425, column 32 to column 49)",
                                                      " (in 'string', line 426, column 63 to column 142)",
                                                      " (in 'string', line 426, column 13 to column 30)",
                                                      " (in 'string', line 426, column 32 to column 49)",
                                                      " (in 'string', line 427, column 64 to column 141)",
                                                      " (in 'string', line 427, column 13 to column 29)",
                                                      " (in 'string', line 427, column 31 to column 47)",
                                                      " (in 'string', line 428, column 63 to column 140)",
                                                      " (in 'string', line 428, column 13 to column 29)",
                                                      " (in 'string', line 428, column 31 to column 47)",
                                                      " (in 'string', line 429, column 62 to column 139)",
                                                      " (in 'string', line 429, column 13 to column 29)",
                                                      " (in 'string', line 429, column 31 to column 47)",
                                                      " (in 'string', line 430, column 66 to column 143)",
                                                      " (in 'string', line 430, column 13 to column 29)",
                                                      " (in 'string', line 430, column 31 to column 47)",
                                                      " (in 'string', line 431, column 68 to column 145)",
                                                      " (in 'string', line 431, column 13 to column 29)",
                                                      " (in 'string', line 431, column 31 to column 47)",
                                                      " (in 'string', line 432, column 70 to column 147)",
                                                      " (in 'string', line 432, column 13 to column 29)",
                                                      " (in 'string', line 432, column 31 to column 47)",
                                                      " (in 'string', line 433, column 61 to column 138)",
                                                      " (in 'string', line 433, column 13 to column 29)",
                                                      " (in 'string', line 433, column 31 to column 47)",
                                                      " (in 'string', line 434, column 62 to column 139)",
                                                      " (in 'string', line 434, column 13 to column 29)",
                                                      " (in 'string', line 434, column 31 to column 47)",
                                                      " (in 'string', line 435, column 69 to column 146)",
                                                      " (in 'string', line 435, column 13 to column 29)",
                                                      " (in 'string', line 435, column 31 to column 47)",
                                                      " (in 'string', line 436, column 71 to column 150)",
                                                      " (in 'string', line 436, column 13 to column 30)",
                                                      " (in 'string', line 436, column 32 to column 49)",
                                                      " (in 'string', line 437, column 70 to column 149)",
                                                      " (in 'string', line 437, column 13 to column 30)",
                                                      " (in 'string', line 437, column 32 to column 49)",
                                                      " (in 'string', line 438, column 64 to column 143)",
                                                      " (in 'string', line 438, column 13 to column 30)",
                                                      " (in 'string', line 438, column 32 to column 49)",
                                                      " (in 'string', line 439, column 67 to column 146)",
                                                      " (in 'string', line 439, column 13 to column 30)",
                                                      " (in 'string', line 439, column 32 to column 49)",
                                                      " (in 'string', line 440, column 75 to column 154)",
                                                      " (in 'string', line 440, column 13 to column 30)",
                                                      " (in 'string', line 440, column 32 to column 49)",
                                                      " (in 'string', line 441, column 9 to column 56)",
                                                      " (in 'string', line 441, column 58 to column 103)",
                                                      " (in 'string', line 442, column 9 to column 16)",
                                                      " (in 'string', line 442, column 18 to column 25)",
                                                      " (in 'string', line 1048, column 9 to column 16)",
                                                      " (in 'string', line 1049, column 9 to column 20)",
                                                      " (in 'string', line 1050, column 9 to column 20)",
                                                      " (in 'string', line 1050, column 21 to column 32)",
                                                      " (in 'string', line 1051, column 9 to column 16)",
                                                      " (in 'string', line 1051, column 17 to column 24)",
                                                      " (in 'string', line 3, column 14 to column 21)",
                                                      " (in 'string', line 3, column 4 to column 23)",
                                                      " (in 'string', line 4, column 28 to column 80)",
                                                      " (in 'string', line 4, column 4 to column 80)",
                                                      " (in 'string', line 5, column 4 to column 18)",
                                                      " (in 'string', line 2, column 51 to line 6, column 3)",
                                                      " (in 'string', line 8, column 14 to column 21)",
                                                      " (in 'string', line 8, column 4 to column 54)",
                                                      " (in 'string', line 9, column 14 to column 24)",
                                                      " (in 'string', line 9, column 4 to column 26)",
                                                      " (in 'string', line 10, column 4 to column 20)",
                                                      " (in 'string', line 14, column 10 to column 29)",
                                                      " (in 'string', line 15, column 10 to column 23)",
                                                      " (in 'string', line 13, column 25 to line 16, column 9)",
                                                      " (in 'string', line 13, column 8 to line 16, column 9)",
                                                      " (in 'string', line 12, column 25 to line 17, column 7)",
                                                      " (in 'string', line 12, column 6 to line 17, column 7)",
                                                      " (in 'string', line 11, column 19 to line 18, column 5)",
                                                      " (in 'string', line 11, column 4 to line 18, column 5)",
                                                      " (in 'string', line 19, column 4 to column 18)",
                                                      " (in 'string', line 7, column 52 to line 20, column 3)",
                                                      " (in 'string', line 23, column 4 to column 20)",
                                                      " (in 'string', line 24, column 11 to column 12)",
                                                      " (in 'string', line 24, column 13 to column 14)",
                                                      " (in 'string', line 24, column 4 to column 18)",
                                                      " (in 'string', line 25, column 11 to column 12)",
                                                      " (in 'string', line 25, column 4 to column 35)",
                                                      " (in 'string', line 26, column 11 to column 12)",
                                                      " (in 'string', line 26, column 4 to column 34)",
                                                      " (in 'string', line 27, column 4 to column 11)",
                                                      " (in 'string', line 28, column 4 to column 12)",
                                                      " (in 'string', line 29, column 4 to column 12)",
                                                      " (in 'string', line 30, column 4 to column 12)",
                                                      " (in 'string', line 35, column 10 to column 35)",
                                                      " (in 'string', line 36, column 10 to column 26)",
                                                      " (in 'string', line 34, column 18 to line 37, column 9)",
                                                      " (in 'string', line 34, column 8 to line 37, column 9)",
                                                      " (in 'string', line 39, column 10 to column 36)",
                                                      " (in 'string', line 40, column 10 to column 27)",
                                                      " (in 'string', line 38, column 17 to line 41, column 9)",
                                                      " (in 'string', line 38, column 8 to line 41, column 9)",
                                                      " (in 'string', line 33, column 19 to line 42, column 7)",
                                                      " (in 'string', line 33, column 6 to line 42, column 7)",
                                                      " (in 'string', line 43, column 6 to column 19)",
                                                      " (in 'string', line 44, column 6 to column 20)",
                                                      " (in 'string', line 32, column 17 to line 45, column 5)",
                                                      " (in 'string', line 32, column 4 to line 45, column 5)",
                                                      " (in 'string', line 48, column 6 to column 15)",
                                                      " (in 'string', line 49, column 6 to column 21)",
                                                      " (in 'string', line 50, column 6 to column 29)",
                                                      " (in 'string', line 51, column 6 to column 50)",
                                                      " (in 'string', line 52, column 6 to column 27)",
                                                      " (in 'string', line 53, column 6 to column 24)",
                                                      " (in 'string', line 55, column 19 to column 37)",
                                                      " (in 'string', line 55, column 8 to column 37)",
                                                      " (in 'string', line 56, column 18 to column 39)",
                                                      " (in 'string', line 56, column 8 to column 39)",
                                                      " (in 'string', line 54, column 19 to line 57, column 7)",
                                                      " (in 'string', line 54, column 6 to line 57, column 7)",
                                                      " (in 'string', line 58, column 6 to column 45)",
                                                      " (in 'string', line 47, column 17 to line 59, column 5)",
                                                      " (in 'string', line 47, column 4 to line 59, column 5)",
                                                      " (in 'string', line 60, column 4 to column 13)",
                                                      " (in 'string', line 22, column 37 to line 61, column 1)",
                                                      " (in 'string', line 69, column 13 to column 37)",
                                                      " (in 'string', line 65, column 8 to column 83)",
                                                      " (in 'string', line 63, column 24 to line 69, column 7)",
                                                      " (in 'string', line 63, column 4 to line 69, column 37)",
                                                      " (in 'string', line 62, column 52 to line 70, column 3)",
                                                      " (in 'string', line 72, column 4 to column 21)",
                                                      " (in 'string', line 73, column 11 to column 14)",
                                                      " (in 'string', line 73, column 15 to column 18)",
                                                      " (in 'string', line 73, column 4 to column 24)",
                                                      " (in 'string', line 78, column 12 to column 66)",
                                                      " (in 'string', line 77, column 24 to line 79, column 11)",
                                                      " (in 'string', line 77, column 10 to line 79, column 11)",
                                                      " (in 'string', line 76, column 22 to line 80, column 9)",
                                                      " (in 'string', line 76, column 8 to line 80, column 9)",
                                                      " (in 'string', line 75, column 20 to line 81, column 7)",
                                                      " (in 'string', line 75, column 6 to line 81, column 7)",
                                                      " (in 'string', line 74, column 18 to line 82, column 5)",
                                                      " (in 'string', line 74, column 4 to line 82, column 5)",
                                                      " (in 'string', line 83, column 4 to column 15)",
                                                      " (in 'string', line 71, column 46 to line 84, column 3)",
                                                      " (in 'string', line 87, column 2 to column 17)",
                                                      " (in 'string', line 88, column 2 to column 20)",
                                                      " (in 'string', line 89, column 9 to column 13)",
                                                      " (in 'string', line 89, column 14 to column 18)",
                                                      " (in 'string', line 89, column 2 to column 22)",
                                                      " (in 'string', line 90, column 9 to column 13)",
                                                      " (in 'string', line 90, column 2 to column 20)",
                                                      " (in 'string', line 91, column 9 to column 10)",
                                                      " (in 'string', line 91, column 11 to column 12)",
                                                      " (in 'string', line 91, column 2 to column 17)",
                                                      " (in 'string', line 92, column 2 to column 10)",
                                                      " (in 'string', line 96, column 8 to column 16)",
                                                      " (in 'string', line 97, column 8 to column 13)",
                                                      " (in 'string', line 102, column 14 to column 19)",
                                                      " (in 'string', line 105, column 26 to column 46)",
                                                      " (in 'string', line 105, column 16 to column 46)",
                                                      " (in 'string', line 106, column 26 to column 46)",
                                                      " (in 'string', line 106, column 16 to column 46)",
                                                      " (in 'string', line 104, column 22 to line 107, column 15)",
                                                      " (in 'string', line 104, column 14 to line 107, column 15)",
                                                      " (in 'string', line 110, column 25 to column 54)",
                                                      " (in 'string', line 110, column 16 to column 54)",
                                                      " (in 'string', line 114, column 30 to column 47)",
                                                      " (in 'string', line 114, column 20 to column 47)",
                                                      " (in 'string', line 115, column 30 to column 47)",
                                                      " (in 'string', line 115, column 20 to column 47)",
                                                      " (in 'string', line 113, column 28 to line 116, column 19)",
                                                      " (in 'string', line 113, column 18 to line 116, column 19)",
                                                      " (in 'string', line 119, column 30 to column 47)",
                                                      " (in 'string', line 119, column 20 to column 47)",
                                                      " (in 'string', line 120, column 30 to column 47)",
                                                      " (in 'string', line 120, column 20 to column 47)",
                                                      " (in 'string', line 121, column 30 to column 47)",
                                                      " (in 'string', line 121, column 20 to column 47)",
                                                      " (in 'string', line 122, column 30 to column 47)",
                                                      " (in 'string', line 122, column 20 to column 47)",
                                                      " (in 'string', line 117, column 60 to line 123, column 19)",
                                                      " (in 'string', line 117, column 18 to line 123, column 19)",
                                                      " (in 'string', line 111, column 24 to line 124, column 17)",
                                                      " (in 'string', line 111, column 16 to line 124, column 17)",
                                                      " (in 'string', line 109, column 22 to line 125, column 15)",
                                                      " (in 'string', line 109, column 14 to line 125, column 15)",
                                                      " (in 'string', line 126, column 33 to column 42)",
                                                      " (in 'string', line 126, column 14 to column 42)",
                                                      " (in 'string', line 101, column 24 to line 127, column 13)",
                                                      " (in 'string', line 101, column 12 to line 127, column 13)",
                                                      " (in 'string', line 100, column 24 to line 128, column 11)",
                                                      " (in 'string', line 100, column 10 to line 128, column 11)",
                                                      " (in 'string', line 99, column 22 to line 129, column 9)",
                                                      " (in 'string', line 99, column 8 to line 129, column 9)",
                                                      " (in 'string', line 95, column 16 to line 130, column 7)",
                                                      " (in 'string', line 95, column 6 to line 130, column 7)",
                                                      " (in 'string', line 94, column 17 to line 131, column 5)",
                                                      " (in 'string', line 94, column 4 to line 131, column 5)",
                                                      " (in 'string', line 93, column 15 to line 132, column 3)",
                                                      " (in 'string', line 93, column 2 to line 132, column 3)",
                                                      " (in 'string', line 134, column 2 to column 6)",
                                                      " (in 'string', line 137, column 4 to column 9)",
                                                      " (in 'string', line 138, column 4 to column 21)",
                                                      " (in 'string', line 136, column 17 to line 139, column 5)",
                                                      " (in 'string', line 136, column 4 to line 139, column 5)",
                                                      " (in 'string', line 135, column 15 to line 140, column 3)",
                                                      " (in 'string', line 135, column 2 to line 140, column 3)",
                                                      " (in 'string', line 141, column 2 to column 17)",
                                                      " (in 'string', line 143, column 4 to column 8)",
                                                      " (in 'string', line 146, column 4 to column 9)",
                                                      " (in 'string', line 147, column 4 to column 22)",
                                                      " (in 'string', line 148, column 13 to column 31)",
                                                      " (in 'string', line 148, column 4 to column 31)",
                                                      " (in 'string', line 145, column 17 to line 149, column 5)",
                                                      " (in 'string', line 145, column 4 to line 149, column 5)",
                                                      " (in 'string', line 144, column 15 to line 150, column 3)",
                                                      " (in 'string', line 144, column 2 to line 150, column 3)",
                                                      " (in 'string', line 152, column 16 to column 69)",
                                                      " (in 'string', line 152, column 2 to column 69)",
                                                      " (in 'string', line 154, column 2 to column 12)",
                                                      " (in 'string', line 86, column 47 to line 155, column 1)",
                                                      " (in 'string', line 157, column 11 to column 20)",
                                                      " (in 'string', line 157, column 21 to column 30)",
                                                      " (in 'string', line 157, column 4 to column 36)",
                                                      " (in 'string', line 162, column 6 to column 46)",
                                                      " (in 'string', line 165, column 10 to column 42)",
                                                      " (in 'string', line 166, column 10 to column 42)",
                                                      " (in 'string', line 164, column 24 to line 167, column 9)",
                                                      " (in 'string', line 164, column 8 to line 167, column 9)",
                                                      " (in 'string', line 163, column 30 to line 169, column 7)",
                                                      " (in 'string', line 163, column 6 to line 169, column 7)",
                                                      " (in 'string', line 158, column 28 to line 170, column 5)",
                                                      " (in 'string', line 158, column 4 to line 170, column 5)",
                                                      " (in 'string', line 171, column 4 to column 15)",
                                                      " (in 'string', line 156, column 49 to line 172, column 3)",
                                                      " (in 'string', line 174, column 4 to column 21)",
                                                      " (in 'string', line 175, column 23 to column 42)",
                                                      " (in 'string', line 175, column 4 to column 42)",
                                                      " (in 'string', line 176, column 23 to column 44)",
                                                      " (in 'string', line 176, column 0 to column 44)",
                                                      " (in 'string', line 177, column 17 to column 31)",
                                                      " (in 'string', line 177, column 0 to column 31)",
                                                      " (in 'string', line 178, column 17 to column 44)",
                                                      " (in 'string', line 178, column 0 to column 44)",
                                                      " (in 'string', line 179, column 17 to column 38)",
                                                      " (in 'string', line 179, column 0 to column 38)",
                                                      " (in 'string', line 180, column 17 to column 45)",
                                                      " (in 'string', line 180, column 0 to column 45)",
                                                      " (in 'string', line 181, column 17 to column 37)",
                                                      " (in 'string', line 181, column 0 to column 37)",
                                                      " (in 'string', line 182, column 17 to column 38)",
                                                      " (in 'string', line 182, column 0 to column 38)",
                                                      " (in 'string', line 183, column 18 to column 36)",
                                                      " (in 'string', line 183, column 0 to column 36)",
                                                      " (in 'string', line 184, column 18 to column 44)",
                                                      " (in 'string', line 184, column 0 to column 44)",
                                                      " (in 'string', line 185, column 18 to column 37)",
                                                      " (in 'string', line 185, column 0 to column 37)",
                                                      " (in 'string', line 186, column 18 to column 76)",
                                                      " (in 'string', line 186, column 0 to column 76)",
                                                      " (in 'string', line 187, column 18 to column 36)",
                                                      " (in 'string', line 187, column 0 to column 36)",
                                                      " (in 'string', line 188, column 18 to column 38)",
                                                      " (in 'string', line 188, column 0 to column 38)",
                                                      " (in 'string', line 189, column 22 to column 41)",
                                                      " (in 'string', line 189, column 0 to column 41)",
                                                      " (in 'string', line 190, column 36 to column 50)",
                                                      " (in 'string', line 190, column 0 to column 50)",
                                                      " (in 'string', line 191, column 4 to column 17)",
                                                      " (in 'string', line 173, column 123 to line 192, column 3)",
                                                      " (in 'string', line 196, column 15 to column 26)",
                                                      " (in 'string', line 196, column 4 to column 35)",
                                                      " (in 'string', line 199, column 8 to column 19)",
                                                      " (in 'string', line 207, column 12 to line 208, column 73)",
                                                      " (in 'string', line 205, column 13 to line 209, column 13)",
                                                      " (in 'string', line 203, column 10 to line 209, column 13)",
                                                      " (in 'string', line 210, column 11 to column 18)",
                                                      " (in 'string', line 202, column 77 to line 211, column 9)",
                                                      " (in 'string', line 202, column 8 to line 211, column 9)",
                                                      " (in 'string', line 201, column 17 to line 212, column 7)",
                                                      " (in 'string', line 201, column 8 to line 212, column 7)",
                                                      " (in 'string', line 200, column 27 to line 213, column 7)",
                                                      " (in 'string', line 200, column 6 to line 213, column 7)",
                                                      " (in 'string', line 198, column 36 to line 214, column 7)",
                                                      " (in 'string', line 198, column 6 to line 214, column 7)",
                                                      " (in 'string', line 197, column 19 to line 215, column 5)",
                                                      " (in 'string', line 197, column 4 to line 215, column 5)",
                                                      " (in 'string', line 216, column 2 to column 16)",
                                                      " (in 'string', line 195, column 107 to line 217, column 3)",
                                                      " (in 'string', line 221, column 11 to column 22)",
                                                      " (in 'string', line 221, column 23 to column 34)",
                                                      " (in 'string', line 221, column 4 to column 43)",
                                                      " (in 'string', line 223, column 6 to column 22)",
                                                      " (in 'string', line 224, column 70 to column 82)",
                                                      " (in 'string', line 224, column 30 to column 82)",
                                                      " (in 'string', line 224, column 6 to column 82)",
                                                      " (in 'string', line 229, column 43 to column 90)",
                                                      " (in 'string', line 229, column 10 to column 90)",
                                                      " (in 'string', line 230, column 42 to column 91)",
                                                      " (in 'string', line 230, column 10 to column 91)",
                                                      " (in 'string', line 231, column 27 to column 69)",
                                                      " (in 'string', line 231, column 10 to column 69)",
                                                      " (in 'string', line 228, column 11 to line 232, column 9)",
                                                      " (in 'string', line 226, column 8 to line 232, column 9)",
                                                      " (in 'string', line 225, column 32 to line 233, column 7)",
                                                      " (in 'string', line 225, column 6 to line 233, column 7)",
                                                      " (in 'string', line 222, column 25 to line 234, column 5)",
                                                      " (in 'string', line 222, column 4 to line 234, column 5)",
                                                      " (in 'string', line 237, column 59 to column 88)",
                                                      " (in 'string', line 237, column 8 to column 88)",
                                                      " (in 'string', line 236, column 30 to line 238, column 7)",
                                                      " (in 'string', line 236, column 6 to line 238, column 7)",
                                                      " (in 'string', line 235, column 28 to line 239, column 5)",
                                                      " (in 'string', line 235, column 4 to line 239, column 5)",
                                                      " (in 'string', line 240, column 2 to column 17)",
                                                      " (in 'string', line 220, column 123 to line 241, column 3)",
                                                      " (in 'string', line 245, column 10 to column 17)",
                                                      " (in 'string', line 245, column 4 to column 19)",
                                                      " (in 'string', line 247, column 6 to column 15)",
                                                      " (in 'string', line 250, column 10 to column 19)",
                                                      " (in 'string', line 251, column 10 to column 16)",
                                                      " (in 'string', line 249, column 50 to line 252, column 9)",
                                                      " (in 'string', line 249, column 8 to line 252, column 9)",
                                                      " (in 'string', line 248, column 25 to line 253, column 7)",
                                                      " (in 'string', line 248, column 6 to line 253, column 7)",
                                                      " (in 'string', line 246, column 23 to line 254, column 5)",
                                                      " (in 'string', line 246, column 4 to line 254, column 5)",
                                                      " (in 'string', line 255, column 4 to column 13)",
                                                      " (in 'string', line 244, column 34 to line 256, column 3)",
                                                      " (in 'string', line 260, column 11 to column 18)",
                                                      " (in 'string', line 260, column 19 to column 26)",
                                                      " (in 'string', line 260, column 4 to column 32)",
                                                      " (in 'string', line 261, column 11 to column 20)",
                                                      " (in 'string', line 261, column 4 to column 44)",
                                                      " (in 'string', line 262, column 11 to column 18)",
                                                      " (in 'string', line 262, column 4 to column 20)",
                                                      " (in 'string', line 263, column 4 to column 16)",
                                                      " (in 'string', line 273, column 17 to column 40)",
                                                      " (in 'string', line 271, column 10 to column 24)",
                                                      " (in 'string', line 272, column 10 to column 23)",
                                                      " (in 'string', line 270, column 18 to line 273, column 11)",
                                                      " (in 'string', line 270, column 10 to line 273, column 40)",
                                                      " (in 'string', line 269, column 27 to line 274, column 9)",
                                                      " (in 'string', line 269, column 8 to line 274, column 9)",
                                                      " (in 'string', line 268, column 13 to line 275, column 7)",
                                                      " (in 'string', line 266, column 8 to column 20)",
                                                      " (in 'string', line 267, column 8 to column 17)",
                                                      " (in 'string', line 265, column 15 to line 268, column 7)",
                                                      " (in 'string', line 265, column 6 to line 275, column 7)",
                                                      " (in 'string', line 264, column 23 to line 276, column 5)",
                                                      " (in 'string', line 264, column 4 to line 276, column 5)",
                                                      " (in 'string', line 277, column 17 to column 51)",
                                                      " (in 'string', line 277, column 4 to column 51)",
                                                      " (in 'string', line 278, column 4 to column 15)",
                                                      " (in 'string', line 259, column 24 to line 279, column 3)"};
std::vector<int>
vecequals(const std::vector<int>& a, const int& test, const int& comparison,
          std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 946;
    validate_non_negative_index("check", "size(a)", stan::math::size(a));
    std::vector<int> check;
    check = std::vector<int>(stan::math::size(a), std::numeric_limits<int>::min());
    
    current_statement__ = 949;
    for (int i = 1; i <= stan::math::size(check); ++i) {
      current_statement__ = 948;
      assign(check, cons_list(index_uni(i), nil_index_list()),
        (comparison ? logical_eq(test, a[(i - 1)]) :
           logical_neq(test, a[(i - 1)])), "assigning variable check");}
    current_statement__ = 950;
    return check;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct vecequals_functor__ {
std::vector<int>
operator()(const std::vector<int>& a, const int& test, const int& comparison,
           std::ostream* pstream__)  const 
{
return vecequals(a, test, comparison, pstream__);
}
};
std::vector<int>
whichequals(const std::vector<int>& b, const int& test,
            const int& comparison, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 952;
    validate_non_negative_index("check", "size(b)", stan::math::size(b));
    std::vector<int> check;
    check = std::vector<int>(stan::math::size(b), std::numeric_limits<int>::min());
    
    current_statement__ = 953;
    assign(check, nil_index_list(),
      vecequals(b, test, comparison, pstream__), "assigning variable check");
    current_statement__ = 954;
    validate_non_negative_index("which", "sum(check)", sum(check));
    std::vector<int> which;
    which = std::vector<int>(sum(check), std::numeric_limits<int>::min());
    
    int counter;
    counter = std::numeric_limits<int>::min();
    
    current_statement__ = 956;
    counter = 1;
    current_statement__ = 964;
    if (logical_gt(stan::math::size(b), 0)) {
      current_statement__ = 962;
      for (int i = 1; i <= stan::math::size(b); ++i) {
        current_statement__ = 960;
        if (logical_eq(check[(i - 1)], 1)) {
          current_statement__ = 957;
          assign(which, cons_list(index_uni(counter), nil_index_list()), i,
            "assigning variable which");
          current_statement__ = 958;
          counter = (counter + 1);
        } }
    } 
    current_statement__ = 965;
    return which;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct whichequals_functor__ {
std::vector<int>
operator()(const std::vector<int>& b, const int& test, const int& comparison,
           std::ostream* pstream__)  const 
{
return whichequals(b, test, comparison, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
constraincorsqrt(const T0__& mat_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& mat = to_ref(mat_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int d;
    d = std::numeric_limits<int>::min();
    
    current_statement__ = 967;
    d = rows(mat);
    current_statement__ = 968;
    validate_non_negative_index("o", "d", d);
    current_statement__ = 969;
    validate_non_negative_index("o", "d", d);
    Eigen::Matrix<local_scalar_t__, -1, -1> o;
    o = Eigen::Matrix<local_scalar_t__, -1, -1>(d, d);
    stan::math::fill(o, DUMMY_VAR__);
    
    current_statement__ = 971;
    validate_non_negative_index("ss", "d", d);
    Eigen::Matrix<local_scalar_t__, -1, 1> ss;
    ss = Eigen::Matrix<local_scalar_t__, -1, 1>(d);
    stan::math::fill(ss, DUMMY_VAR__);
    
    current_statement__ = 972;
    assign(ss, nil_index_list(), rep_vector(0, d), "assigning variable ss");
    current_statement__ = 973;
    validate_non_negative_index("s", "d", d);
    Eigen::Matrix<local_scalar_t__, -1, 1> s;
    s = Eigen::Matrix<local_scalar_t__, -1, 1>(d);
    stan::math::fill(s, DUMMY_VAR__);
    
    current_statement__ = 974;
    assign(s, nil_index_list(), rep_vector(0, d), "assigning variable s");
    local_scalar_t__ r;
    r = DUMMY_VAR__;
    
    local_scalar_t__ r3;
    r3 = DUMMY_VAR__;
    
    local_scalar_t__ r4;
    r4 = DUMMY_VAR__;
    
    local_scalar_t__ r1;
    r1 = DUMMY_VAR__;
    
    current_statement__ = 992;
    for (int i = 1; i <= d; ++i) {
      current_statement__ = 988;
      for (int j = 1; j <= d; ++j) {
        current_statement__ = 982;
        if (logical_gt(j, i)) {
          current_statement__ = 979;
          assign(ss, cons_list(index_uni(i), nil_index_list()),
            (ss[(i - 1)] +
              square(
                rvalue(mat,
                  cons_list(index_uni(j),
                    cons_list(index_uni(i), nil_index_list())), "mat"))),
            "assigning variable ss");
          current_statement__ = 980;
          assign(s, cons_list(index_uni(i), nil_index_list()),
            (s[(i - 1)] +
              rvalue(mat,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), "mat")),
            "assigning variable s");
        } 
        current_statement__ = 986;
        if (logical_lt(j, i)) {
          current_statement__ = 983;
          assign(ss, cons_list(index_uni(i), nil_index_list()),
            (ss[(i - 1)] +
              square(
                rvalue(mat,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())), "mat"))),
            "assigning variable ss");
          current_statement__ = 984;
          assign(s, cons_list(index_uni(i), nil_index_list()),
            (s[(i - 1)] +
              rvalue(mat,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "mat")),
            "assigning variable s");
        } }
      current_statement__ = 989;
      assign(s, cons_list(index_uni(i), nil_index_list()),
        (s[(i - 1)] + 1e-5), "assigning variable s");
      current_statement__ = 990;
      assign(ss, cons_list(index_uni(i), nil_index_list()),
        (ss[(i - 1)] + 1e-5), "assigning variable ss");}
    current_statement__ = 1007;
    for (int i = 1; i <= d; ++i) {
      current_statement__ = 993;
      assign(o,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        0, "assigning variable o");
      current_statement__ = 994;
      r1 = stan::math::sqrt(ss[(i - 1)]);
      current_statement__ = 995;
      r3 = ((stan::math::fabs(s[(i - 1)]) / r1) - 1);
      current_statement__ = 996;
      r4 = stan::math::sqrt(
             log1p_exp(
               ((2 * ((stan::math::fabs(s[(i - 1)]) - s[(i - 1)]) - 1)) - 4)));
      current_statement__ = 997;
      r = ((((r4 * r3) + 1) * r4) + 1);
      current_statement__ = 998;
      r = stan::math::sqrt((ss[(i - 1)] + r));
      current_statement__ = 1004;
      for (int j = 1; j <= d; ++j) {
        current_statement__ = 1000;
        if (logical_gt(j, i)) {
          current_statement__ = 999;
          assign(o,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            (rvalue(mat,
               cons_list(index_uni(j),
                 cons_list(index_uni(i), nil_index_list())), "mat") / r),
            "assigning variable o");
        } 
        current_statement__ = 1002;
        if (logical_lt(j, i)) {
          current_statement__ = 1001;
          assign(o,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            (rvalue(mat,
               cons_list(index_uni(i),
                 cons_list(index_uni(j), nil_index_list())), "mat") / r),
            "assigning variable o");
        } }
      current_statement__ = 1005;
      assign(o,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        stan::math::sqrt(
          ((1 -
             sum(
               square(
                 rvalue(o,
                   cons_list(index_uni(i),
                     cons_list(index_omni(), nil_index_list())), "o")))) +
            1e-5)), "assigning variable o");}
    current_statement__ = 1008;
    return o;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct constraincorsqrt_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& mat, std::ostream* pstream__)  const 
{
return constraincorsqrt(mat, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
sdcovsqrt2cov(const T0__& mat_arg__, const int& choleskymats,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& mat = to_ref(mat_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1013;
    if (logical_lt(choleskymats, 1)) {
      current_statement__ = 1011;
      return tcrossprod(
               diag_pre_multiply(diagonal(mat),
                 constraincorsqrt(mat, pstream__)));
    } else {
      current_statement__ = 1010;
      return tcrossprod(mat);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sdcovsqrt2cov_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& mat, const int& choleskymats, std::ostream* pstream__)  const 
{
return sdcovsqrt2cov(mat, choleskymats, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
sqkron_prod(const T0__& mata_arg__, const T1__& matb_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& mata = to_ref(mata_arg__);
  const auto& matb = to_ref(matb_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int d;
    d = std::numeric_limits<int>::min();
    
    current_statement__ = 1015;
    d = rows(mata);
    current_statement__ = 1016;
    validate_non_negative_index("out", "d * d", (d * d));
    current_statement__ = 1017;
    validate_non_negative_index("out", "d * d", (d * d));
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>((d * d), (d * d));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 1027;
    for (int k = 1; k <= d; ++k) {
      current_statement__ = 1025;
      for (int l = 1; l <= d; ++l) {
        current_statement__ = 1023;
        for (int i = 1; i <= d; ++i) {
          current_statement__ = 1021;
          for (int j = 1; j <= d; ++j) {
            current_statement__ = 1019;
            assign(out,
              cons_list(index_uni(((d * (i - 1)) + k)),
                cons_list(index_uni(((d * (j - 1)) + l)), nil_index_list())),
              (rvalue(mata,
                 cons_list(index_uni(i),
                   cons_list(index_uni(j), nil_index_list())), "mata") *
                rvalue(matb,
                  cons_list(index_uni(k),
                    cons_list(index_uni(l), nil_index_list())), "matb")),
              "assigning variable out");}}}}
    current_statement__ = 1028;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sqkron_prod_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
operator()(const T0__& mata, const T1__& matb, std::ostream* pstream__)  const 
{
return sqkron_prod(mata, matb, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
ksolve(const T0__& A_arg__, const T1__& Q_arg__, const int& verbose,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& A = to_ref(A_arg__);
  const auto& Q = to_ref(Q_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int d;
    d = std::numeric_limits<int>::min();
    
    current_statement__ = 1030;
    d = rows(A);
    int d2;
    d2 = std::numeric_limits<int>::min();
    
    current_statement__ = 1031;
    d2 = (((d * d) - d) / 2);
    current_statement__ = 1032;
    validate_non_negative_index("O", "d + d2", (d + d2));
    current_statement__ = 1033;
    validate_non_negative_index("O", "d + d2", (d + d2));
    Eigen::Matrix<local_scalar_t__, -1, -1> O;
    O = Eigen::Matrix<local_scalar_t__, -1, -1>((d + d2), (d + d2));
    stan::math::fill(O, DUMMY_VAR__);
    
    current_statement__ = 1035;
    validate_non_negative_index("triQ", "d + d2", (d + d2));
    Eigen::Matrix<local_scalar_t__, -1, 1> triQ;
    triQ = Eigen::Matrix<local_scalar_t__, -1, 1>((d + d2));
    stan::math::fill(triQ, DUMMY_VAR__);
    
    current_statement__ = 1037;
    validate_non_negative_index("AQ", "d", d);
    current_statement__ = 1038;
    validate_non_negative_index("AQ", "d", d);
    Eigen::Matrix<local_scalar_t__, -1, -1> AQ;
    AQ = Eigen::Matrix<local_scalar_t__, -1, -1>(d, d);
    stan::math::fill(AQ, DUMMY_VAR__);
    
    int z;
    z = std::numeric_limits<int>::min();
    
    current_statement__ = 1040;
    z = 0;
    current_statement__ = 1085;
    for (int j = 1; j <= d; ++j) {
      current_statement__ = 1083;
      for (int i = 1; i <= j; ++i) {
        current_statement__ = 1081;
        if (logical_gte(j, i)) {
          int y;
          y = std::numeric_limits<int>::min();
          
          current_statement__ = 1041;
          y = 0;
          current_statement__ = 1042;
          z = (z + 1);
          current_statement__ = 1079;
          for (int ci = 1; ci <= d; ++ci) {
            current_statement__ = 1077;
            for (int ri = 1; ri <= d; ++ri) {
              current_statement__ = 1075;
              if (logical_gte(ci, ri)) {
                current_statement__ = 1043;
                y = (y + 1);
                current_statement__ = 1049;
                if (logical_eq(i, j)) {
                  current_statement__ = 1045;
                  if (logical_eq(ri, i)) {
                    current_statement__ = 1044;
                    assign(O,
                      cons_list(index_uni(z),
                        cons_list(index_uni(y), nil_index_list())),
                      (2 *
                        rvalue(A,
                          cons_list(index_uni(ri),
                            cons_list(index_uni(ci), nil_index_list())), "A")),
                      "assigning variable O");
                  } 
                  current_statement__ = 1047;
                  if (logical_eq(ci, i)) {
                    current_statement__ = 1046;
                    assign(O,
                      cons_list(index_uni(z),
                        cons_list(index_uni(y), nil_index_list())),
                      (2 *
                        rvalue(A,
                          cons_list(index_uni(ci),
                            cons_list(index_uni(ri), nil_index_list())), "A")),
                      "assigning variable O");
                  } 
                } 
                current_statement__ = 1071;
                if (logical_neq(i, j)) {
                  current_statement__ = 1051;
                  if (logical_eq(y, z)) {
                    current_statement__ = 1050;
                    assign(O,
                      cons_list(index_uni(z),
                        cons_list(index_uni(y), nil_index_list())),
                      (rvalue(A,
                         cons_list(index_uni(ri),
                           cons_list(index_uni(ri), nil_index_list())), "A")
                        +
                        rvalue(A,
                          cons_list(index_uni(ci),
                            cons_list(index_uni(ci), nil_index_list())), "A")),
                      "assigning variable O");
                  } 
                  current_statement__ = 1069;
                  if (logical_neq(y, z)) {
                    current_statement__ = 1057;
                    if (logical_eq(ci, ri)) {
                      current_statement__ = 1053;
                      if (logical_eq(ci, i)) {
                        current_statement__ = 1052;
                        assign(O,
                          cons_list(index_uni(z),
                            cons_list(index_uni(y), nil_index_list())),
                          rvalue(A,
                            cons_list(index_uni(j),
                              cons_list(index_uni(ci), nil_index_list())),
                            "A"), "assigning variable O");
                      } 
                      current_statement__ = 1055;
                      if (logical_eq(ci, j)) {
                        current_statement__ = 1054;
                        assign(O,
                          cons_list(index_uni(z),
                            cons_list(index_uni(y), nil_index_list())),
                          rvalue(A,
                            cons_list(index_uni(i),
                              cons_list(index_uni(ci), nil_index_list())),
                            "A"), "assigning variable O");
                      } 
                    } 
                    current_statement__ = 1067;
                    if ((primitive_value(logical_neq(ci, ri)) &&
                        primitive_value((primitive_value((primitive_value(
                        (primitive_value(logical_eq(ri, i)) ||
                        primitive_value(logical_eq(ri, j)))) ||
                        primitive_value(logical_eq(ci, i)))) ||
                        primitive_value(logical_eq(ci, j)))))) {
                      current_statement__ = 1059;
                      if (logical_eq(ri, i)) {
                        current_statement__ = 1058;
                        assign(O,
                          cons_list(index_uni(z),
                            cons_list(index_uni(y), nil_index_list())),
                          rvalue(A,
                            cons_list(index_uni(j),
                              cons_list(index_uni(ci), nil_index_list())),
                            "A"), "assigning variable O");
                      } 
                      current_statement__ = 1061;
                      if (logical_eq(ri, j)) {
                        current_statement__ = 1060;
                        assign(O,
                          cons_list(index_uni(z),
                            cons_list(index_uni(y), nil_index_list())),
                          rvalue(A,
                            cons_list(index_uni(i),
                              cons_list(index_uni(ci), nil_index_list())),
                            "A"), "assigning variable O");
                      } 
                      current_statement__ = 1063;
                      if (logical_eq(ci, i)) {
                        current_statement__ = 1062;
                        assign(O,
                          cons_list(index_uni(z),
                            cons_list(index_uni(y), nil_index_list())),
                          rvalue(A,
                            cons_list(index_uni(j),
                              cons_list(index_uni(ri), nil_index_list())),
                            "A"), "assigning variable O");
                      } 
                      current_statement__ = 1065;
                      if (logical_eq(ci, j)) {
                        current_statement__ = 1064;
                        assign(O,
                          cons_list(index_uni(z),
                            cons_list(index_uni(y), nil_index_list())),
                          rvalue(A,
                            cons_list(index_uni(i),
                              cons_list(index_uni(ri), nil_index_list())),
                            "A"), "assigning variable O");
                      } 
                    } 
                  } 
                } 
                current_statement__ = 1073;
                if (is_nan(
                      rvalue(O,
                        cons_list(index_uni(z),
                          cons_list(index_uni(y), nil_index_list())), "O"))) {
                  current_statement__ = 1072;
                  assign(O,
                    cons_list(index_uni(z),
                      cons_list(index_uni(y), nil_index_list())), 0,
                    "assigning variable O");
                } 
              } }}
        } }}
    current_statement__ = 1086;
    z = 0;
    current_statement__ = 1092;
    for (int j = 1; j <= d; ++j) {
      current_statement__ = 1090;
      for (int i = 1; i <= j; ++i) {
        current_statement__ = 1087;
        z = (z + 1);
        current_statement__ = 1088;
        assign(triQ, cons_list(index_uni(z), nil_index_list()),
          rvalue(Q,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())), "Q"),
          "assigning variable triQ");}}
    current_statement__ = 1093;
    assign(triQ, nil_index_list(),
      mdivide_left(minus(O), stan::model::deep_copy(triQ)),
      "assigning variable triQ");
    current_statement__ = 1094;
    z = 0;
    current_statement__ = 1102;
    for (int j = 1; j <= d; ++j) {
      current_statement__ = 1100;
      for (int i = 1; i <= j; ++i) {
        current_statement__ = 1095;
        z = (z + 1);
        current_statement__ = 1096;
        assign(AQ,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          triQ[(z - 1)], "assigning variable AQ");
        current_statement__ = 1098;
        if (logical_neq(i, j)) {
          current_statement__ = 1097;
          assign(AQ,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())), triQ[(z - 1)],
            "assigning variable AQ");
        } }}
    current_statement__ = 1104;
    if (logical_gt(verbose, 1)) {
      current_statement__ = 1103;
      if (pstream__) {
        stan_print(pstream__, "AQ = ");
        stan_print(pstream__, AQ);
        stan_print(pstream__, "   triQ = ");
        stan_print(pstream__, triQ);
        stan_print(pstream__, "   O = ");
        stan_print(pstream__, O);
        stan_print(pstream__, "\n");
      }
    } 
    current_statement__ = 1105;
    return AQ;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ksolve_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
operator()(const T0__& A, const T1__& Q, const int& verbose,
           std::ostream* pstream__)  const 
{
return ksolve(A, Q, verbose, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
makesym(const T0__& mat_arg__, const int& verbose, const int& pd,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& mat = to_ref(mat_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1107;
    validate_non_negative_index("out", "rows(mat)", rows(mat));
    current_statement__ = 1108;
    validate_non_negative_index("out", "cols(mat)", cols(mat));
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(mat), cols(mat));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 1118;
    for (int coli = 1; coli <= cols(mat); ++coli) {
      current_statement__ = 1110;
      assign(out,
        cons_list(index_uni(coli),
          cons_list(index_uni(coli), nil_index_list())),
        (rvalue(mat,
           cons_list(index_uni(coli),
             cons_list(index_uni(coli), nil_index_list())), "mat") + 1e-10),
        "assigning variable out");
      current_statement__ = 1116;
      for (int rowi = 1; rowi <= rows(mat); ++rowi) {
        current_statement__ = 1114;
        if (logical_gt(rowi, coli)) {
          current_statement__ = 1111;
          assign(out,
            cons_list(index_uni(rowi),
              cons_list(index_uni(coli), nil_index_list())),
            rvalue(mat,
              cons_list(index_uni(rowi),
                cons_list(index_uni(coli), nil_index_list())), "mat"),
            "assigning variable out");
          current_statement__ = 1112;
          assign(out,
            cons_list(index_uni(coli),
              cons_list(index_uni(rowi), nil_index_list())),
            rvalue(mat,
              cons_list(index_uni(rowi),
                cons_list(index_uni(coli), nil_index_list())), "mat"),
            "assigning variable out");
        } }}
    current_statement__ = 1119;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct makesym_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& mat, const int& verbose, const int& pd,
           std::ostream* pstream__)  const 
{
return makesym(mat, verbose, pd, pstream__);
}
};
template <typename T0__>
stan::promote_args_t<T0__>
tform(const T0__& parin, const int& transform, const double& multiplier,
      const double& meanscale, const double& offset,
      const double& inneroffset, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ param;
    param = DUMMY_VAR__;
    
    current_statement__ = 1121;
    param = parin;
    current_statement__ = 1123;
    if (logical_neq(meanscale, 1.0)) {
      current_statement__ = 1122;
      param = (param * meanscale);
    } 
    current_statement__ = 1125;
    if (logical_neq(inneroffset, 0.0)) {
      current_statement__ = 1124;
      param = (param + inneroffset);
    } 
    current_statement__ = 1127;
    if (logical_eq(transform, 0)) {
      current_statement__ = 1126;
      param = param;
    } 
    current_statement__ = 1129;
    if (logical_eq(transform, 1)) {
      current_statement__ = 1128;
      param = log1p_exp(param);
    } 
    current_statement__ = 1131;
    if (logical_eq(transform, 2)) {
      current_statement__ = 1130;
      param = stan::math::exp(param);
    } 
    current_statement__ = 1133;
    if (logical_eq(transform, 3)) {
      current_statement__ = 1132;
      param = (1 / (1 + stan::math::exp(-param)));
    } 
    current_statement__ = 1135;
    if (logical_eq(transform, 4)) {
      current_statement__ = 1134;
      param = pow(param, 3);
    } 
    current_statement__ = 1137;
    if (logical_eq(transform, 5)) {
      current_statement__ = 1136;
      param = stan::math::log1p(param);
    } 
    current_statement__ = 1139;
    if (logical_eq(transform, 50)) {
      current_statement__ = 1138;
      param = meanscale;
    } 
    current_statement__ = 1141;
    if (logical_eq(transform, 51)) {
      current_statement__ = 1140;
      param = (1 / (1 + stan::math::exp(-param)));
    } 
    current_statement__ = 1143;
    if (logical_eq(transform, 52)) {
      current_statement__ = 1142;
      param = stan::math::exp(param);
    } 
    current_statement__ = 1145;
    if (logical_eq(transform, 53)) {
      current_statement__ = 1144;
      param = ((1 / (1 + stan::math::exp(-param))) -
                (pow(stan::math::exp(param), 2) /
                  pow((1 + stan::math::exp(param)), 2)));
    } 
    current_statement__ = 1147;
    if (logical_eq(transform, 54)) {
      current_statement__ = 1146;
      param = (3 * pow(param, 2));
    } 
    current_statement__ = 1149;
    if (logical_eq(transform, 55)) {
      current_statement__ = 1148;
      param = (1 / (1 + param));
    } 
    current_statement__ = 1151;
    if (logical_neq(multiplier, 1.0)) {
      current_statement__ = 1150;
      param = (param * multiplier);
    } 
    current_statement__ = 1153;
    if ((primitive_value(logical_lt(transform, 49)) && primitive_value(
        logical_neq(offset, 0.0)))) {
      current_statement__ = 1152;
      param = (param + offset);
    } 
    current_statement__ = 1154;
    return param;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct tform_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& parin, const int& transform, const double& multiplier,
           const double& meanscale, const double& offset,
           const double& inneroffset, std::ostream* pstream__)  const 
{
return tform(parin, transform, multiplier, meanscale, offset, inneroffset,
         pstream__);
}
};
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>>, 1, -1>
parvectform(const std::vector<int>& which, const T1__& rawpar_arg__,
            const int& when, const std::vector<std::vector<int>>& ms,
            const std::vector<std::vector<double>>& mval, const int& subi,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>>;
  const auto& rawpar = to_ref(rawpar_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1156;
    validate_non_negative_index("parout", "size(which)",
                                stan::math::size(which));
    Eigen::Matrix<local_scalar_t__, 1, -1> parout;
    parout = Eigen::Matrix<local_scalar_t__, 1, -1>(stan::math::size(which));
    stan::math::fill(parout, DUMMY_VAR__);
    
    current_statement__ = 1172;
    if (stan::math::size(which)) {
      current_statement__ = 1170;
      for (int whichout = 1; whichout <= stan::math::size(which); ++whichout) {
        int done;
        done = std::numeric_limits<int>::min();
        
        current_statement__ = 1158;
        done = 0;
        current_statement__ = 1168;
        for (int ri = 1; ri <= stan::math::size(ms); ++ri) {
          current_statement__ = 1166;
          if (logical_negation(done)) {
            current_statement__ = 1164;
            if ((primitive_value((primitive_value(
                logical_eq(ms[(ri - 1)][(8 - 1)], when)) || primitive_value(
                logical_eq(ms[(ri - 1)][(8 - 1)], 100)))) && primitive_value(
                logical_eq(ms[(ri - 1)][(3 - 1)], which[(whichout - 1)])))) {
              current_statement__ = 1161;
              if ((primitive_value(logical_eq(subi, 0)) || primitive_value(
                  (primitive_value(logical_gt(ms[(ri - 1)][(3 - 1)], 0)) &&
                  primitive_value((primitive_value((primitive_value(
                  logical_gt(ms[(ri - 1)][(5 - 1)], 0)) || primitive_value(
                  logical_gt(ms[(ri - 1)][(6 - 1)], 0)))) || primitive_value(
                  logical_gt(ms[(ri - 1)][(8 - 1)], 0)))))))) {
                current_statement__ = 1159;
                assign(parout,
                  cons_list(index_uni(whichout), nil_index_list()),
                  tform(rawpar[(ms[(ri - 1)][(3 - 1)] - 1)],
                    ms[(ri - 1)][(4 - 1)], mval[(ri - 1)][(2 - 1)],
                    mval[(ri - 1)][(3 - 1)], mval[(ri - 1)][(4 - 1)],
                    mval[(ri - 1)][(6 - 1)], pstream__),
                  "assigning variable parout");
              } 
              current_statement__ = 1162;
              done = 1;
            } 
          } }}
    } 
    current_statement__ = 1173;
    return parout;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct parvectform_functor__ {
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>>, 1, -1>
operator()(const std::vector<int>& which, const T1__& rawpar,
           const int& when, const std::vector<std::vector<int>>& ms,
           const std::vector<std::vector<double>>& mval, const int& subi,
           std::ostream* pstream__)  const 
{
return parvectform(which, rawpar, when, ms, mval, subi, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
mcalc(const T0__& matin_arg__, const T1__& tfpars_arg__,
      const T2__& tfstates_arg__, const std::vector<int>& when, const int& m,
      const std::vector<std::vector<int>>& ms,
      const std::vector<std::vector<double>>& mval, const int& subi,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& matin = to_ref(matin_arg__);
  const auto& tfpars = to_ref(tfpars_arg__);
  const auto& tfstates = to_ref(tfstates_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1175;
    validate_non_negative_index("matout", "rows(matin)", rows(matin));
    current_statement__ = 1176;
    validate_non_negative_index("matout", "cols(matin)", cols(matin));
    Eigen::Matrix<local_scalar_t__, -1, -1> matout;
    matout = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(matin), cols(matin));
    stan::math::fill(matout, DUMMY_VAR__);
    
    current_statement__ = 1193;
    for (int ri = 1; ri <= stan::math::size(ms); ++ri) {
      int whenyes;
      whenyes = std::numeric_limits<int>::min();
      
      current_statement__ = 1178;
      whenyes = 0;
      current_statement__ = 1181;
      for (int wi = 1; wi <= stan::math::size(when); ++wi) {
        current_statement__ = 1180;
        if ((primitive_value(
            logical_eq(when[(wi - 1)], ms[(ri - 1)][(8 - 1)])) ||
            primitive_value(logical_eq(ms[(ri - 1)][(8 - 1)], 100)))) {
          current_statement__ = 1179;
          whenyes = 1;
        } }
      current_statement__ = 1191;
      if ((primitive_value(logical_eq(m, ms[(ri - 1)][(7 - 1)])) &&
          primitive_value(whenyes))) {
        current_statement__ = 1189;
        if ((primitive_value(logical_eq(subi, 0)) || primitive_value(
            (primitive_value(logical_gt(ms[(ri - 1)][(3 - 1)], 0)) &&
            primitive_value((primitive_value((primitive_value(
            logical_gt(ms[(ri - 1)][(5 - 1)], 0)) || primitive_value(
            logical_gt(ms[(ri - 1)][(6 - 1)], 0)))) || primitive_value(
            logical_gt(ms[(ri - 1)][(8 - 1)], 0)))))))) {
          current_statement__ = 1183;
          if ((primitive_value(logical_gt(ms[(ri - 1)][(3 - 1)], 0)) &&
              primitive_value(logical_eq(ms[(ri - 1)][(8 - 1)], 0)))) {
            current_statement__ = 1182;
            assign(matout,
              cons_list(index_uni(ms[(ri - 1)][(1 - 1)]),
                cons_list(index_uni(ms[(ri - 1)][(2 - 1)]), nil_index_list())),
              tfpars[(ms[(ri - 1)][(3 - 1)] - 1)],
              "assigning variable matout");
          } 
          current_statement__ = 1185;
          if ((primitive_value(logical_gt(ms[(ri - 1)][(3 - 1)], 0)) &&
              primitive_value(logical_gt(ms[(ri - 1)][(8 - 1)], 0)))) {
            current_statement__ = 1184;
            assign(matout,
              cons_list(index_uni(ms[(ri - 1)][(1 - 1)]),
                cons_list(index_uni(ms[(ri - 1)][(2 - 1)]), nil_index_list())),
              tfstates[(ms[(ri - 1)][(3 - 1)] - 1)],
              "assigning variable matout");
          } 
          current_statement__ = 1187;
          if (logical_lt(ms[(ri - 1)][(3 - 1)], 1)) {
            current_statement__ = 1186;
            assign(matout,
              cons_list(index_uni(ms[(ri - 1)][(1 - 1)]),
                cons_list(index_uni(ms[(ri - 1)][(2 - 1)]), nil_index_list())),
              mval[(ri - 1)][(1 - 1)], "assigning variable matout");
          } 
        } 
      } }
    current_statement__ = 1199;
    for (int ri = 1; ri <= rows(matin); ++ri) {
      current_statement__ = 1197;
      for (int ci = 1; ci <= cols(matin); ++ci) {
        current_statement__ = 1195;
        if ((primitive_value(
            is_nan(
              rvalue(matout,
                cons_list(index_uni(ri),
                  cons_list(index_uni(ci), nil_index_list())), "matout"))) &&
            primitive_value(
            logical_negation(
              is_nan(
                rvalue(matin,
                  cons_list(index_uni(ri),
                    cons_list(index_uni(ci), nil_index_list())), "matin")))))) {
          current_statement__ = 1194;
          assign(matout,
            cons_list(index_uni(ri),
              cons_list(index_uni(ci), nil_index_list())),
            rvalue(matin,
              cons_list(index_uni(ri),
                cons_list(index_uni(ci), nil_index_list())), "matin"),
            "assigning variable matout");
        } }}
    current_statement__ = 1200;
    return matout;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct mcalc_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
operator()(const T0__& matin, const T1__& tfpars, const T2__& tfstates,
           const std::vector<int>& when, const int& m,
           const std::vector<std::vector<int>>& ms,
           const std::vector<std::vector<double>>& mval, const int& subi,
           std::ostream* pstream__)  const 
{
return mcalc(matin, tfpars, tfstates, when, m, ms, mval, subi, pstream__);
}
};
template <typename T0__>
std::vector<int>
checkoffdiagzero(const T0__& M_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& M = to_ref(M_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1202;
    validate_non_negative_index("z", "rows(M)", rows(M));
    std::vector<int> z;
    z = std::vector<int>(rows(M), std::numeric_limits<int>::min());
    
    current_statement__ = 1212;
    for (int i = 1; i <= rows(M); ++i) {
      current_statement__ = 1204;
      assign(z, cons_list(index_uni(i), nil_index_list()), 0,
        "assigning variable z");
      current_statement__ = 1210;
      for (int j = 1; j <= rows(M); ++j) {
        current_statement__ = 1208;
        if ((primitive_value(logical_neq(i, j)) && primitive_value(
            (primitive_value(
            logical_neq(
              rvalue(M,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "M"), 0.0)) ||
            primitive_value(
            logical_neq(
              rvalue(M,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), "M"), 0.0)))))) {
          current_statement__ = 1205;
          assign(z, cons_list(index_uni(i), nil_index_list()), 1,
            "assigning variable z");
          break;
        } }}
    current_statement__ = 1213;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct checkoffdiagzero_functor__ {
template <typename T0__>
std::vector<int>
operator()(const T0__& M, std::ostream* pstream__)  const 
{
return checkoffdiagzero(M, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
expm2(const T0__& M_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& M = to_ref(M_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1215;
    validate_non_negative_index("out", "rows(M)", rows(M));
    current_statement__ = 1216;
    validate_non_negative_index("out", "rows(M)", rows(M));
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(M), rows(M));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 1218;
    validate_non_negative_index("z0", "rows(out)", rows(out));
    std::vector<int> z0;
    z0 = std::vector<int>(rows(out), std::numeric_limits<int>::min());
    
    current_statement__ = 1219;
    assign(z0, nil_index_list(), checkoffdiagzero(M, pstream__),
      "assigning variable z0");
    current_statement__ = 1220;
    validate_non_negative_index("z1", "sum(z0)", sum(z0));
    std::vector<int> z1;
    z1 = std::vector<int>(sum(z0), std::numeric_limits<int>::min());
    
    int count;
    count = std::numeric_limits<int>::min();
    
    current_statement__ = 1222;
    count = 1;
    current_statement__ = 1236;
    for (int j = 1; j <= cols(M); ++j) {
      current_statement__ = 1234;
      if (z0[(j - 1)]) {
        current_statement__ = 1231;
        assign(z1, cons_list(index_uni(count), nil_index_list()), j,
          "assigning variable z1");
        current_statement__ = 1232;
        count = (count + 1);
      } else {
        current_statement__ = 1229;
        for (int i = 1; i <= rows(M); ++i) {
          current_statement__ = 1227;
          if (logical_neq(i, j)) {
            current_statement__ = 1224;
            assign(out,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), 0,
              "assigning variable out");
            current_statement__ = 1225;
            assign(out,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), 0,
              "assigning variable out");
          } else {
            current_statement__ = 1223;
            assign(out,
              cons_list(index_uni(i),
                cons_list(index_uni(i), nil_index_list())),
              stan::math::exp(
                rvalue(M,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())), "M")),
              "assigning variable out");
          }}
      }}
    current_statement__ = 1238;
    if (stan::math::size(z1)) {
      current_statement__ = 1237;
      assign(out,
        cons_list(index_multi(z1),
          cons_list(index_multi(z1), nil_index_list())),
        matrix_exp(
          rvalue(M,
            cons_list(index_multi(z1),
              cons_list(index_multi(z1), nil_index_list())), "M")),
        "assigning variable out");
    } 
    current_statement__ = 1239;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct expm2_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& M, std::ostream* pstream__)  const 
{
return expm2(M, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_ctsm final : public model_base_crtp<model_ctsm> {
private:
  int ndatapoints;
  int nmanifest;
  int nlatent;
  int nlatentpop;
  int nsubjects;
  int ntipred;
  int ntdpred;
  Eigen::Matrix<double, -1, -1> tipredsdata;
  int nmissingtipreds;
  int ntipredeffects;
  double tipredsimputedscale;
  double tipredeffectscale;
  std::vector<Eigen::Matrix<double, -1, 1>> Y;
  int nopriors;
  std::vector<Eigen::Matrix<double, -1, 1>> tdpreds;
  double maxtimestep;
  std::vector<double> time;
  std::vector<int> subject;
  int nparams;
  int continuoustime;
  int nindvarying;
  int nindvaryingoffdiagonals;
  Eigen::Matrix<double, -1, 1> sdscale;
  std::vector<int> indvaryingindex;
  std::vector<int> notindvaryingindex;
  std::vector<int> nobs_y;
  std::vector<std::vector<int>> whichobs_y;
  int ndiffusion;
  std::vector<int> derrind;
  std::vector<int> manifesttype;
  std::vector<int> nbinary_y;
  std::vector<std::vector<int>> whichbinary_y;
  std::vector<int> ncont_y;
  std::vector<std::vector<int>> whichcont_y;
  int intoverpop;
  std::vector<int> statedep;
  int choleskymats;
  int intoverstates;
  int verbose;
  std::vector<std::vector<int>> TIPREDEFFECTsetup;
  int nrowmatsetup;
  std::vector<std::vector<int>> matsetup;
  std::vector<std::vector<double>> matvalues;
  std::vector<std::vector<int>> whenmat;
  std::vector<std::vector<int>> whenvecp;
  std::vector<std::vector<int>> whenvecs;
  std::vector<std::vector<int>> matrixdims;
  int savescores;
  int savesubjectmatrices;
  int dokalman;
  std::vector<int> dokalmanrows;
  int nsubsets;
  double Jstep;
  double priormod;
  std::vector<int> intoverpopindvaryingindex;
  int nJAxfinite;
  std::vector<int> JAxfinite;
  int nJyfinite;
  std::vector<int> Jyfinite;
  int taylorheun;
  int popcovn;
  int llsinglerow;
  std::vector<int> laplaceprior;
  int laplaceprioronly;
  int laplacetipreds;
  int CINTnonzerosize;
  std::vector<int> CINTnonzero;
  int JAxDRIFTequiv;
  Eigen::Matrix<double, -1, -1> IIlatentpop;
  Eigen::Matrix<double, -1, 1> nlpzerovec;
  Eigen::Matrix<double, -1, 1> nlplusonezerovec;
  std::vector<int> tieffectindices;
  int ntieffects;
  int dosmoother;
  int baseindparams_1dim__;
  int baseindparams_2dim__;
  int etaupdbasestates_1dim__;
  int subsetpar_1dim__;
  int llrow_1dim__;
  int etacova_2dim__;
  int ycova_2dim__;
  int etaa_2dim__;
  int ya_2dim__;
  int pop_PARS_1dim__;
  int pop_PARS_2dim__;
  int pop_T0MEANS_1dim__;
  int pop_T0MEANS_2dim__;
  int pop_LAMBDA_1dim__;
  int pop_LAMBDA_2dim__;
  int pop_DRIFT_1dim__;
  int pop_DRIFT_2dim__;
  int pop_DIFFUSION_1dim__;
  int pop_DIFFUSION_2dim__;
  int pop_MANIFESTVAR_1dim__;
  int pop_MANIFESTVAR_2dim__;
  int pop_MANIFESTMEANS_1dim__;
  int pop_MANIFESTMEANS_2dim__;
  int pop_CINT_1dim__;
  int pop_CINT_2dim__;
  int pop_T0VAR_1dim__;
  int pop_T0VAR_2dim__;
  int pop_TDPREDEFFECT_1dim__;
  int pop_TDPREDEFFECT_2dim__;
  int pop_DIFFUSIONcov_1dim__;
  int pop_DIFFUSIONcov_2dim__;
  int pop_MANIFESTcov_1dim__;
  int pop_MANIFESTcov_2dim__;
  int pop_T0cov_1dim__;
  int pop_T0cov_2dim__;
  int pop_asymCINT_1dim__;
  int pop_asymCINT_2dim__;
  int pop_asymDIFFUSIONcov_1dim__;
  int pop_asymDIFFUSIONcov_2dim__;
  int subj_PARS_1dim__;
  int subj_PARS_2dim__;
  int subj_PARS_3dim__;
  int subj_T0MEANS_1dim__;
  int subj_T0MEANS_2dim__;
  int subj_T0MEANS_3dim__;
  int subj_LAMBDA_1dim__;
  int subj_LAMBDA_2dim__;
  int subj_LAMBDA_3dim__;
  int subj_DRIFT_1dim__;
  int subj_DRIFT_2dim__;
  int subj_DRIFT_3dim__;
  int subj_DIFFUSION_1dim__;
  int subj_DIFFUSION_2dim__;
  int subj_DIFFUSION_3dim__;
  int subj_MANIFESTVAR_1dim__;
  int subj_MANIFESTVAR_2dim__;
  int subj_MANIFESTVAR_3dim__;
  int subj_MANIFESTMEANS_1dim__;
  int subj_MANIFESTMEANS_2dim__;
  int subj_MANIFESTMEANS_3dim__;
  int subj_CINT_1dim__;
  int subj_CINT_2dim__;
  int subj_CINT_3dim__;
  int subj_T0VAR_1dim__;
  int subj_T0VAR_2dim__;
  int subj_T0VAR_3dim__;
  int subj_TDPREDEFFECT_1dim__;
  int subj_TDPREDEFFECT_2dim__;
  int subj_TDPREDEFFECT_3dim__;
  int subj_DIFFUSIONcov_1dim__;
  int subj_DIFFUSIONcov_2dim__;
  int subj_DIFFUSIONcov_3dim__;
  int subj_MANIFESTcov_1dim__;
  int subj_MANIFESTcov_2dim__;
  int subj_MANIFESTcov_3dim__;
  int subj_T0cov_1dim__;
  int subj_T0cov_2dim__;
  int subj_T0cov_3dim__;
  int subj_asymCINT_1dim__;
  int subj_asymCINT_2dim__;
  int subj_asymCINT_3dim__;
  int subj_asymDIFFUSIONcov_1dim__;
  int subj_asymDIFFUSIONcov_2dim__;
  int subj_asymDIFFUSIONcov_3dim__;
  int tipreds_1dim__;
  int tipreds_2dim__;
 
public:
  ~model_ctsm() { }
  
  inline std::string model_name() const final { return "model_ctsm"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  model_ctsm(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_ctsm_namespace::model_ctsm";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 709;
      context__.validate_dims("data initialization","ndatapoints","int",
          context__.to_vec());
      ndatapoints = std::numeric_limits<int>::min();
      
      current_statement__ = 709;
      ndatapoints = context__.vals_i("ndatapoints")[(1 - 1)];
      current_statement__ = 709;
      current_statement__ = 709;
      check_greater_or_equal(function__, "ndatapoints", ndatapoints, 0);
      current_statement__ = 710;
      context__.validate_dims("data initialization","nmanifest","int",
          context__.to_vec());
      nmanifest = std::numeric_limits<int>::min();
      
      current_statement__ = 710;
      nmanifest = context__.vals_i("nmanifest")[(1 - 1)];
      current_statement__ = 710;
      current_statement__ = 710;
      check_greater_or_equal(function__, "nmanifest", nmanifest, 1);
      current_statement__ = 711;
      context__.validate_dims("data initialization","nlatent","int",
          context__.to_vec());
      nlatent = std::numeric_limits<int>::min();
      
      current_statement__ = 711;
      nlatent = context__.vals_i("nlatent")[(1 - 1)];
      current_statement__ = 711;
      current_statement__ = 711;
      check_greater_or_equal(function__, "nlatent", nlatent, 1);
      current_statement__ = 712;
      context__.validate_dims("data initialization","nlatentpop","int",
          context__.to_vec());
      nlatentpop = std::numeric_limits<int>::min();
      
      current_statement__ = 712;
      nlatentpop = context__.vals_i("nlatentpop")[(1 - 1)];
      current_statement__ = 713;
      context__.validate_dims("data initialization","nsubjects","int",
          context__.to_vec());
      nsubjects = std::numeric_limits<int>::min();
      
      current_statement__ = 713;
      nsubjects = context__.vals_i("nsubjects")[(1 - 1)];
      current_statement__ = 714;
      context__.validate_dims("data initialization","ntipred","int",
          context__.to_vec());
      ntipred = std::numeric_limits<int>::min();
      
      current_statement__ = 714;
      ntipred = context__.vals_i("ntipred")[(1 - 1)];
      current_statement__ = 714;
      current_statement__ = 714;
      check_greater_or_equal(function__, "ntipred", ntipred, 0);
      current_statement__ = 715;
      context__.validate_dims("data initialization","ntdpred","int",
          context__.to_vec());
      ntdpred = std::numeric_limits<int>::min();
      
      current_statement__ = 715;
      ntdpred = context__.vals_i("ntdpred")[(1 - 1)];
      current_statement__ = 715;
      current_statement__ = 715;
      check_greater_or_equal(function__, "ntdpred", ntdpred, 0);
      current_statement__ = 716;
      validate_non_negative_index("tipredsdata", "ntipred ? nsubjects : 0",
                                  (ntipred ? nsubjects : 0));
      current_statement__ = 717;
      validate_non_negative_index("tipredsdata", "ntipred ? ntipred : 0",
                                  (ntipred ? ntipred : 0));
      current_statement__ = 718;
      context__.validate_dims("data initialization","tipredsdata","double",
          context__.to_vec((ntipred ? nsubjects : 0),
            (ntipred ? ntipred : 0)));
      tipredsdata = Eigen::Matrix<double, -1, -1>((ntipred ? nsubjects : 0), (
        ntipred ? ntipred : 0));
      stan::math::fill(tipredsdata, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tipredsdata_flat__;
        current_statement__ = 718;
        assign(tipredsdata_flat__, nil_index_list(),
          context__.vals_r("tipredsdata"),
          "assigning variable tipredsdata_flat__");
        current_statement__ = 718;
        pos__ = 1;
        current_statement__ = 718;
        for (int sym1__ = 1; sym1__ <= (ntipred ? ntipred : 0); ++sym1__) {
          current_statement__ = 718;
          for (int sym2__ = 1; sym2__ <= (ntipred ? nsubjects : 0); ++sym2__) {
            current_statement__ = 718;
            assign(tipredsdata,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tipredsdata_flat__[(pos__ - 1)],
              "assigning variable tipredsdata");
            current_statement__ = 718;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 719;
      context__.validate_dims("data initialization","nmissingtipreds","int",
          context__.to_vec());
      nmissingtipreds = std::numeric_limits<int>::min();
      
      current_statement__ = 719;
      nmissingtipreds = context__.vals_i("nmissingtipreds")[(1 - 1)];
      current_statement__ = 720;
      context__.validate_dims("data initialization","ntipredeffects","int",
          context__.to_vec());
      ntipredeffects = std::numeric_limits<int>::min();
      
      current_statement__ = 720;
      ntipredeffects = context__.vals_i("ntipredeffects")[(1 - 1)];
      current_statement__ = 721;
      context__.validate_dims("data initialization","tipredsimputedscale",
          "double",context__.to_vec());
      tipredsimputedscale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 721;
      tipredsimputedscale = context__.vals_r("tipredsimputedscale")[(1 - 1)];
      current_statement__ = 721;
      current_statement__ = 721;
      check_greater_or_equal(function__, "tipredsimputedscale",
                             tipredsimputedscale, 0);
      current_statement__ = 722;
      context__.validate_dims("data initialization","tipredeffectscale",
          "double",context__.to_vec());
      tipredeffectscale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 722;
      tipredeffectscale = context__.vals_r("tipredeffectscale")[(1 - 1)];
      current_statement__ = 722;
      current_statement__ = 722;
      check_greater_or_equal(function__, "tipredeffectscale",
                             tipredeffectscale, 0);
      current_statement__ = 723;
      validate_non_negative_index("Y", "ndatapoints", ndatapoints);
      current_statement__ = 724;
      validate_non_negative_index("Y", "nmanifest", nmanifest);
      current_statement__ = 725;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(ndatapoints, nmanifest));
      Y = std::vector<Eigen::Matrix<double, -1, 1>>(ndatapoints, Eigen::Matrix<double, -1, 1>(nmanifest));
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 725;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 725;
        pos__ = 1;
        current_statement__ = 725;
        for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
          current_statement__ = 725;
          for (int sym2__ = 1; sym2__ <= ndatapoints; ++sym2__) {
            current_statement__ = 725;
            assign(Y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Y_flat__[(pos__ - 1)], "assigning variable Y");
            current_statement__ = 725;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 726;
      context__.validate_dims("data initialization","nopriors","int",
          context__.to_vec());
      nopriors = std::numeric_limits<int>::min();
      
      current_statement__ = 726;
      nopriors = context__.vals_i("nopriors")[(1 - 1)];
      current_statement__ = 727;
      validate_non_negative_index("tdpreds", "ndatapoints", ndatapoints);
      current_statement__ = 728;
      validate_non_negative_index("tdpreds", "ntdpred", ntdpred);
      current_statement__ = 729;
      context__.validate_dims("data initialization","tdpreds","double",
          context__.to_vec(ndatapoints, ntdpred));
      tdpreds = std::vector<Eigen::Matrix<double, -1, 1>>(ndatapoints, Eigen::Matrix<double, -1, 1>(ntdpred));
      stan::math::fill(tdpreds, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tdpreds_flat__;
        current_statement__ = 729;
        assign(tdpreds_flat__, nil_index_list(), context__.vals_r("tdpreds"),
          "assigning variable tdpreds_flat__");
        current_statement__ = 729;
        pos__ = 1;
        current_statement__ = 729;
        for (int sym1__ = 1; sym1__ <= ntdpred; ++sym1__) {
          current_statement__ = 729;
          for (int sym2__ = 1; sym2__ <= ndatapoints; ++sym2__) {
            current_statement__ = 729;
            assign(tdpreds,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tdpreds_flat__[(pos__ - 1)], "assigning variable tdpreds");
            current_statement__ = 729;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 730;
      context__.validate_dims("data initialization","maxtimestep","double",
          context__.to_vec());
      maxtimestep = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 730;
      maxtimestep = context__.vals_r("maxtimestep")[(1 - 1)];
      current_statement__ = 731;
      validate_non_negative_index("time", "ndatapoints", ndatapoints);
      current_statement__ = 732;
      context__.validate_dims("data initialization","time","double",
          context__.to_vec(ndatapoints));
      time = std::vector<double>(ndatapoints, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 732;
      assign(time, nil_index_list(), context__.vals_r("time"),
        "assigning variable time");
      current_statement__ = 733;
      validate_non_negative_index("subject", "ndatapoints", ndatapoints);
      current_statement__ = 734;
      context__.validate_dims("data initialization","subject","int",
          context__.to_vec(ndatapoints));
      subject = std::vector<int>(ndatapoints, std::numeric_limits<int>::min());
      
      current_statement__ = 734;
      assign(subject, nil_index_list(), context__.vals_i("subject"),
        "assigning variable subject");
      current_statement__ = 735;
      context__.validate_dims("data initialization","nparams","int",
          context__.to_vec());
      nparams = std::numeric_limits<int>::min();
      
      current_statement__ = 735;
      nparams = context__.vals_i("nparams")[(1 - 1)];
      current_statement__ = 735;
      current_statement__ = 735;
      check_greater_or_equal(function__, "nparams", nparams, 0);
      current_statement__ = 736;
      context__.validate_dims("data initialization","continuoustime","int",
          context__.to_vec());
      continuoustime = std::numeric_limits<int>::min();
      
      current_statement__ = 736;
      continuoustime = context__.vals_i("continuoustime")[(1 - 1)];
      current_statement__ = 737;
      context__.validate_dims("data initialization","nindvarying","int",
          context__.to_vec());
      nindvarying = std::numeric_limits<int>::min();
      
      current_statement__ = 737;
      nindvarying = context__.vals_i("nindvarying")[(1 - 1)];
      current_statement__ = 738;
      context__.validate_dims("data initialization",
          "nindvaryingoffdiagonals","int",context__.to_vec());
      nindvaryingoffdiagonals = std::numeric_limits<int>::min();
      
      current_statement__ = 738;
      nindvaryingoffdiagonals = context__.vals_i("nindvaryingoffdiagonals")[
          (1 - 1)];
      current_statement__ = 739;
      validate_non_negative_index("sdscale", "nindvarying", nindvarying);
      current_statement__ = 740;
      context__.validate_dims("data initialization","sdscale","double",
          context__.to_vec(nindvarying));
      sdscale = Eigen::Matrix<double, -1, 1>(nindvarying);
      stan::math::fill(sdscale, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sdscale_flat__;
        current_statement__ = 740;
        assign(sdscale_flat__, nil_index_list(), context__.vals_r("sdscale"),
          "assigning variable sdscale_flat__");
        current_statement__ = 740;
        pos__ = 1;
        current_statement__ = 740;
        for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
          current_statement__ = 740;
          assign(sdscale, cons_list(index_uni(sym1__), nil_index_list()),
            sdscale_flat__[(pos__ - 1)], "assigning variable sdscale");
          current_statement__ = 740;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 741;
      validate_non_negative_index("indvaryingindex", "nindvarying",
                                  nindvarying);
      current_statement__ = 742;
      context__.validate_dims("data initialization","indvaryingindex","int",
          context__.to_vec(nindvarying));
      indvaryingindex = std::vector<int>(nindvarying, std::numeric_limits<int>::min());
      
      current_statement__ = 742;
      assign(indvaryingindex, nil_index_list(),
        context__.vals_i("indvaryingindex"),
        "assigning variable indvaryingindex");
      current_statement__ = 743;
      validate_non_negative_index("notindvaryingindex",
                                  "nparams - nindvarying",
                                  (nparams - nindvarying));
      current_statement__ = 744;
      context__.validate_dims("data initialization","notindvaryingindex",
          "int",context__.to_vec((nparams - nindvarying)));
      notindvaryingindex = std::vector<int>((nparams - nindvarying), std::numeric_limits<int>::min());
      
      current_statement__ = 744;
      assign(notindvaryingindex, nil_index_list(),
        context__.vals_i("notindvaryingindex"),
        "assigning variable notindvaryingindex");
      current_statement__ = 745;
      validate_non_negative_index("nobs_y", "ndatapoints", ndatapoints);
      current_statement__ = 746;
      context__.validate_dims("data initialization","nobs_y","int",
          context__.to_vec(ndatapoints));
      nobs_y = std::vector<int>(ndatapoints, std::numeric_limits<int>::min());
      
      current_statement__ = 746;
      assign(nobs_y, nil_index_list(), context__.vals_i("nobs_y"),
        "assigning variable nobs_y");
      current_statement__ = 747;
      validate_non_negative_index("whichobs_y", "ndatapoints", ndatapoints);
      current_statement__ = 748;
      validate_non_negative_index("whichobs_y", "nmanifest", nmanifest);
      current_statement__ = 749;
      context__.validate_dims("data initialization","whichobs_y","int",
          context__.to_vec(ndatapoints, nmanifest));
      whichobs_y = std::vector<std::vector<int>>(ndatapoints, std::vector<int>(nmanifest, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> whichobs_y_flat__;
        current_statement__ = 749;
        assign(whichobs_y_flat__, nil_index_list(),
          context__.vals_i("whichobs_y"),
          "assigning variable whichobs_y_flat__");
        current_statement__ = 749;
        pos__ = 1;
        current_statement__ = 749;
        for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
          current_statement__ = 749;
          for (int sym2__ = 1; sym2__ <= ndatapoints; ++sym2__) {
            current_statement__ = 749;
            assign(whichobs_y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              whichobs_y_flat__[(pos__ - 1)], "assigning variable whichobs_y");
            current_statement__ = 749;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 750;
      context__.validate_dims("data initialization","ndiffusion","int",
          context__.to_vec());
      ndiffusion = std::numeric_limits<int>::min();
      
      current_statement__ = 750;
      ndiffusion = context__.vals_i("ndiffusion")[(1 - 1)];
      current_statement__ = 751;
      validate_non_negative_index("derrind", "ndiffusion", ndiffusion);
      current_statement__ = 752;
      context__.validate_dims("data initialization","derrind","int",
          context__.to_vec(ndiffusion));
      derrind = std::vector<int>(ndiffusion, std::numeric_limits<int>::min());
      
      current_statement__ = 752;
      assign(derrind, nil_index_list(), context__.vals_i("derrind"),
        "assigning variable derrind");
      current_statement__ = 753;
      validate_non_negative_index("manifesttype", "nmanifest", nmanifest);
      current_statement__ = 754;
      context__.validate_dims("data initialization","manifesttype","int",
          context__.to_vec(nmanifest));
      manifesttype = std::vector<int>(nmanifest, std::numeric_limits<int>::min());
      
      current_statement__ = 754;
      assign(manifesttype, nil_index_list(),
        context__.vals_i("manifesttype"), "assigning variable manifesttype");
      current_statement__ = 755;
      validate_non_negative_index("nbinary_y", "ndatapoints", ndatapoints);
      current_statement__ = 756;
      context__.validate_dims("data initialization","nbinary_y","int",
          context__.to_vec(ndatapoints));
      nbinary_y = std::vector<int>(ndatapoints, std::numeric_limits<int>::min());
      
      current_statement__ = 756;
      assign(nbinary_y, nil_index_list(), context__.vals_i("nbinary_y"),
        "assigning variable nbinary_y");
      current_statement__ = 757;
      validate_non_negative_index("whichbinary_y", "ndatapoints", ndatapoints);
      current_statement__ = 758;
      validate_non_negative_index("whichbinary_y", "nmanifest", nmanifest);
      current_statement__ = 759;
      context__.validate_dims("data initialization","whichbinary_y","int",
          context__.to_vec(ndatapoints, nmanifest));
      whichbinary_y = std::vector<std::vector<int>>(ndatapoints, std::vector<int>(nmanifest, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> whichbinary_y_flat__;
        current_statement__ = 759;
        assign(whichbinary_y_flat__, nil_index_list(),
          context__.vals_i("whichbinary_y"),
          "assigning variable whichbinary_y_flat__");
        current_statement__ = 759;
        pos__ = 1;
        current_statement__ = 759;
        for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
          current_statement__ = 759;
          for (int sym2__ = 1; sym2__ <= ndatapoints; ++sym2__) {
            current_statement__ = 759;
            assign(whichbinary_y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              whichbinary_y_flat__[(pos__ - 1)],
              "assigning variable whichbinary_y");
            current_statement__ = 759;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 760;
      validate_non_negative_index("ncont_y", "ndatapoints", ndatapoints);
      current_statement__ = 761;
      context__.validate_dims("data initialization","ncont_y","int",
          context__.to_vec(ndatapoints));
      ncont_y = std::vector<int>(ndatapoints, std::numeric_limits<int>::min());
      
      current_statement__ = 761;
      assign(ncont_y, nil_index_list(), context__.vals_i("ncont_y"),
        "assigning variable ncont_y");
      current_statement__ = 762;
      validate_non_negative_index("whichcont_y", "ndatapoints", ndatapoints);
      current_statement__ = 763;
      validate_non_negative_index("whichcont_y", "nmanifest", nmanifest);
      current_statement__ = 764;
      context__.validate_dims("data initialization","whichcont_y","int",
          context__.to_vec(ndatapoints, nmanifest));
      whichcont_y = std::vector<std::vector<int>>(ndatapoints, std::vector<int>(nmanifest, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> whichcont_y_flat__;
        current_statement__ = 764;
        assign(whichcont_y_flat__, nil_index_list(),
          context__.vals_i("whichcont_y"),
          "assigning variable whichcont_y_flat__");
        current_statement__ = 764;
        pos__ = 1;
        current_statement__ = 764;
        for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
          current_statement__ = 764;
          for (int sym2__ = 1; sym2__ <= ndatapoints; ++sym2__) {
            current_statement__ = 764;
            assign(whichcont_y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              whichcont_y_flat__[(pos__ - 1)],
              "assigning variable whichcont_y");
            current_statement__ = 764;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 765;
      context__.validate_dims("data initialization","intoverpop","int",
          context__.to_vec());
      intoverpop = std::numeric_limits<int>::min();
      
      current_statement__ = 765;
      intoverpop = context__.vals_i("intoverpop")[(1 - 1)];
      current_statement__ = 766;
      context__.validate_dims("data initialization","statedep","int",
          context__.to_vec(54));
      statedep = std::vector<int>(54, std::numeric_limits<int>::min());
      
      current_statement__ = 766;
      assign(statedep, nil_index_list(), context__.vals_i("statedep"),
        "assigning variable statedep");
      current_statement__ = 767;
      context__.validate_dims("data initialization","choleskymats","int",
          context__.to_vec());
      choleskymats = std::numeric_limits<int>::min();
      
      current_statement__ = 767;
      choleskymats = context__.vals_i("choleskymats")[(1 - 1)];
      current_statement__ = 768;
      context__.validate_dims("data initialization","intoverstates","int",
          context__.to_vec());
      intoverstates = std::numeric_limits<int>::min();
      
      current_statement__ = 768;
      intoverstates = context__.vals_i("intoverstates")[(1 - 1)];
      current_statement__ = 769;
      context__.validate_dims("data initialization","verbose","int",
          context__.to_vec());
      verbose = std::numeric_limits<int>::min();
      
      current_statement__ = 769;
      verbose = context__.vals_i("verbose")[(1 - 1)];
      current_statement__ = 770;
      validate_non_negative_index("TIPREDEFFECTsetup", "nparams", nparams);
      current_statement__ = 771;
      validate_non_negative_index("TIPREDEFFECTsetup", "ntipred", ntipred);
      current_statement__ = 772;
      context__.validate_dims("data initialization","TIPREDEFFECTsetup",
          "int",context__.to_vec(nparams, ntipred));
      TIPREDEFFECTsetup = std::vector<std::vector<int>>(nparams, std::vector<int>(ntipred, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> TIPREDEFFECTsetup_flat__;
        current_statement__ = 772;
        assign(TIPREDEFFECTsetup_flat__, nil_index_list(),
          context__.vals_i("TIPREDEFFECTsetup"),
          "assigning variable TIPREDEFFECTsetup_flat__");
        current_statement__ = 772;
        pos__ = 1;
        current_statement__ = 772;
        for (int sym1__ = 1; sym1__ <= ntipred; ++sym1__) {
          current_statement__ = 772;
          for (int sym2__ = 1; sym2__ <= nparams; ++sym2__) {
            current_statement__ = 772;
            assign(TIPREDEFFECTsetup,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              TIPREDEFFECTsetup_flat__[(pos__ - 1)],
              "assigning variable TIPREDEFFECTsetup");
            current_statement__ = 772;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 773;
      context__.validate_dims("data initialization","nrowmatsetup","int",
          context__.to_vec());
      nrowmatsetup = std::numeric_limits<int>::min();
      
      current_statement__ = 773;
      nrowmatsetup = context__.vals_i("nrowmatsetup")[(1 - 1)];
      current_statement__ = 774;
      validate_non_negative_index("matsetup", "nrowmatsetup", nrowmatsetup);
      current_statement__ = 775;
      context__.validate_dims("data initialization","matsetup","int",
          context__.to_vec(nrowmatsetup, 9));
      matsetup = std::vector<std::vector<int>>(nrowmatsetup, std::vector<int>(9, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> matsetup_flat__;
        current_statement__ = 775;
        assign(matsetup_flat__, nil_index_list(),
          context__.vals_i("matsetup"), "assigning variable matsetup_flat__");
        current_statement__ = 775;
        pos__ = 1;
        current_statement__ = 775;
        for (int sym1__ = 1; sym1__ <= 9; ++sym1__) {
          current_statement__ = 775;
          for (int sym2__ = 1; sym2__ <= nrowmatsetup; ++sym2__) {
            current_statement__ = 775;
            assign(matsetup,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              matsetup_flat__[(pos__ - 1)], "assigning variable matsetup");
            current_statement__ = 775;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 776;
      validate_non_negative_index("matvalues", "nrowmatsetup", nrowmatsetup);
      current_statement__ = 777;
      context__.validate_dims("data initialization","matvalues","double",
          context__.to_vec(nrowmatsetup, 6));
      matvalues = std::vector<std::vector<double>>(nrowmatsetup, std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> matvalues_flat__;
        current_statement__ = 777;
        assign(matvalues_flat__, nil_index_list(),
          context__.vals_r("matvalues"),
          "assigning variable matvalues_flat__");
        current_statement__ = 777;
        pos__ = 1;
        current_statement__ = 777;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 777;
          for (int sym2__ = 1; sym2__ <= nrowmatsetup; ++sym2__) {
            current_statement__ = 777;
            assign(matvalues,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              matvalues_flat__[(pos__ - 1)], "assigning variable matvalues");
            current_statement__ = 777;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 778;
      context__.validate_dims("data initialization","whenmat","int",
          context__.to_vec(54, 5));
      whenmat = std::vector<std::vector<int>>(54, std::vector<int>(5, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> whenmat_flat__;
        current_statement__ = 778;
        assign(whenmat_flat__, nil_index_list(), context__.vals_i("whenmat"),
          "assigning variable whenmat_flat__");
        current_statement__ = 778;
        pos__ = 1;
        current_statement__ = 778;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 778;
          for (int sym2__ = 1; sym2__ <= 54; ++sym2__) {
            current_statement__ = 778;
            assign(whenmat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              whenmat_flat__[(pos__ - 1)], "assigning variable whenmat");
            current_statement__ = 778;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 779;
      validate_non_negative_index("whenvecp", "nparams", nparams);
      current_statement__ = 780;
      context__.validate_dims("data initialization","whenvecp","int",
          context__.to_vec(2, nparams));
      whenvecp = std::vector<std::vector<int>>(2, std::vector<int>(nparams, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> whenvecp_flat__;
        current_statement__ = 780;
        assign(whenvecp_flat__, nil_index_list(),
          context__.vals_i("whenvecp"), "assigning variable whenvecp_flat__");
        current_statement__ = 780;
        pos__ = 1;
        current_statement__ = 780;
        for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
          current_statement__ = 780;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 780;
            assign(whenvecp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              whenvecp_flat__[(pos__ - 1)], "assigning variable whenvecp");
            current_statement__ = 780;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 781;
      validate_non_negative_index("whenvecs", "nlatentpop", nlatentpop);
      current_statement__ = 782;
      context__.validate_dims("data initialization","whenvecs","int",
          context__.to_vec(6, nlatentpop));
      whenvecs = std::vector<std::vector<int>>(6, std::vector<int>(nlatentpop, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> whenvecs_flat__;
        current_statement__ = 782;
        assign(whenvecs_flat__, nil_index_list(),
          context__.vals_i("whenvecs"), "assigning variable whenvecs_flat__");
        current_statement__ = 782;
        pos__ = 1;
        current_statement__ = 782;
        for (int sym1__ = 1; sym1__ <= nlatentpop; ++sym1__) {
          current_statement__ = 782;
          for (int sym2__ = 1; sym2__ <= 6; ++sym2__) {
            current_statement__ = 782;
            assign(whenvecs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              whenvecs_flat__[(pos__ - 1)], "assigning variable whenvecs");
            current_statement__ = 782;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 783;
      context__.validate_dims("data initialization","matrixdims","int",
          context__.to_vec(54, 2));
      matrixdims = std::vector<std::vector<int>>(54, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> matrixdims_flat__;
        current_statement__ = 783;
        assign(matrixdims_flat__, nil_index_list(),
          context__.vals_i("matrixdims"),
          "assigning variable matrixdims_flat__");
        current_statement__ = 783;
        pos__ = 1;
        current_statement__ = 783;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 783;
          for (int sym2__ = 1; sym2__ <= 54; ++sym2__) {
            current_statement__ = 783;
            assign(matrixdims,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              matrixdims_flat__[(pos__ - 1)], "assigning variable matrixdims");
            current_statement__ = 783;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 784;
      context__.validate_dims("data initialization","savescores","int",
          context__.to_vec());
      savescores = std::numeric_limits<int>::min();
      
      current_statement__ = 784;
      savescores = context__.vals_i("savescores")[(1 - 1)];
      current_statement__ = 785;
      context__.validate_dims("data initialization","savesubjectmatrices",
          "int",context__.to_vec());
      savesubjectmatrices = std::numeric_limits<int>::min();
      
      current_statement__ = 785;
      savesubjectmatrices = context__.vals_i("savesubjectmatrices")[(1 - 1)];
      current_statement__ = 786;
      context__.validate_dims("data initialization","dokalman","int",
          context__.to_vec());
      dokalman = std::numeric_limits<int>::min();
      
      current_statement__ = 786;
      dokalman = context__.vals_i("dokalman")[(1 - 1)];
      current_statement__ = 787;
      validate_non_negative_index("dokalmanrows", "ndatapoints", ndatapoints);
      current_statement__ = 788;
      context__.validate_dims("data initialization","dokalmanrows","int",
          context__.to_vec(ndatapoints));
      dokalmanrows = std::vector<int>(ndatapoints, std::numeric_limits<int>::min());
      
      current_statement__ = 788;
      assign(dokalmanrows, nil_index_list(),
        context__.vals_i("dokalmanrows"), "assigning variable dokalmanrows");
      current_statement__ = 789;
      context__.validate_dims("data initialization","nsubsets","int",
          context__.to_vec());
      nsubsets = std::numeric_limits<int>::min();
      
      current_statement__ = 789;
      nsubsets = context__.vals_i("nsubsets")[(1 - 1)];
      current_statement__ = 790;
      context__.validate_dims("data initialization","Jstep","double",
          context__.to_vec());
      Jstep = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 790;
      Jstep = context__.vals_r("Jstep")[(1 - 1)];
      current_statement__ = 791;
      context__.validate_dims("data initialization","priormod","double",
          context__.to_vec());
      priormod = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 791;
      priormod = context__.vals_r("priormod")[(1 - 1)];
      current_statement__ = 792;
      validate_non_negative_index("intoverpopindvaryingindex",
                                  "intoverpop ? nindvarying : 0",
                                  (intoverpop ? nindvarying : 0));
      current_statement__ = 793;
      context__.validate_dims("data initialization",
          "intoverpopindvaryingindex","int",
          context__.to_vec((intoverpop ? nindvarying : 0)));
      intoverpopindvaryingindex = std::vector<int>((intoverpop ? nindvarying
                                                      : 0), std::numeric_limits<int>::min());
      
      current_statement__ = 793;
      assign(intoverpopindvaryingindex, nil_index_list(),
        context__.vals_i("intoverpopindvaryingindex"),
        "assigning variable intoverpopindvaryingindex");
      current_statement__ = 794;
      context__.validate_dims("data initialization","nJAxfinite","int",
          context__.to_vec());
      nJAxfinite = std::numeric_limits<int>::min();
      
      current_statement__ = 794;
      nJAxfinite = context__.vals_i("nJAxfinite")[(1 - 1)];
      current_statement__ = 795;
      validate_non_negative_index("JAxfinite", "nJAxfinite", nJAxfinite);
      current_statement__ = 796;
      context__.validate_dims("data initialization","JAxfinite","int",
          context__.to_vec(nJAxfinite));
      JAxfinite = std::vector<int>(nJAxfinite, std::numeric_limits<int>::min());
      
      current_statement__ = 796;
      assign(JAxfinite, nil_index_list(), context__.vals_i("JAxfinite"),
        "assigning variable JAxfinite");
      current_statement__ = 797;
      context__.validate_dims("data initialization","nJyfinite","int",
          context__.to_vec());
      nJyfinite = std::numeric_limits<int>::min();
      
      current_statement__ = 797;
      nJyfinite = context__.vals_i("nJyfinite")[(1 - 1)];
      current_statement__ = 798;
      validate_non_negative_index("Jyfinite", "nJyfinite", nJyfinite);
      current_statement__ = 799;
      context__.validate_dims("data initialization","Jyfinite","int",
          context__.to_vec(nJyfinite));
      Jyfinite = std::vector<int>(nJyfinite, std::numeric_limits<int>::min());
      
      current_statement__ = 799;
      assign(Jyfinite, nil_index_list(), context__.vals_i("Jyfinite"),
        "assigning variable Jyfinite");
      current_statement__ = 800;
      context__.validate_dims("data initialization","taylorheun","int",
          context__.to_vec());
      taylorheun = std::numeric_limits<int>::min();
      
      current_statement__ = 800;
      taylorheun = context__.vals_i("taylorheun")[(1 - 1)];
      current_statement__ = 801;
      context__.validate_dims("data initialization","popcovn","int",
          context__.to_vec());
      popcovn = std::numeric_limits<int>::min();
      
      current_statement__ = 801;
      popcovn = context__.vals_i("popcovn")[(1 - 1)];
      current_statement__ = 802;
      context__.validate_dims("data initialization","llsinglerow","int",
          context__.to_vec());
      llsinglerow = std::numeric_limits<int>::min();
      
      current_statement__ = 802;
      llsinglerow = context__.vals_i("llsinglerow")[(1 - 1)];
      current_statement__ = 803;
      validate_non_negative_index("laplaceprior", "nparams", nparams);
      current_statement__ = 804;
      context__.validate_dims("data initialization","laplaceprior","int",
          context__.to_vec(nparams));
      laplaceprior = std::vector<int>(nparams, std::numeric_limits<int>::min());
      
      current_statement__ = 804;
      assign(laplaceprior, nil_index_list(),
        context__.vals_i("laplaceprior"), "assigning variable laplaceprior");
      current_statement__ = 805;
      context__.validate_dims("data initialization","laplaceprioronly","int",
          context__.to_vec());
      laplaceprioronly = std::numeric_limits<int>::min();
      
      current_statement__ = 805;
      laplaceprioronly = context__.vals_i("laplaceprioronly")[(1 - 1)];
      current_statement__ = 806;
      context__.validate_dims("data initialization","laplacetipreds","int",
          context__.to_vec());
      laplacetipreds = std::numeric_limits<int>::min();
      
      current_statement__ = 806;
      laplacetipreds = context__.vals_i("laplacetipreds")[(1 - 1)];
      current_statement__ = 807;
      context__.validate_dims("data initialization","CINTnonzerosize","int",
          context__.to_vec());
      CINTnonzerosize = std::numeric_limits<int>::min();
      
      current_statement__ = 807;
      CINTnonzerosize = context__.vals_i("CINTnonzerosize")[(1 - 1)];
      current_statement__ = 808;
      validate_non_negative_index("CINTnonzero", "CINTnonzerosize",
                                  CINTnonzerosize);
      current_statement__ = 809;
      context__.validate_dims("data initialization","CINTnonzero","int",
          context__.to_vec(CINTnonzerosize));
      CINTnonzero = std::vector<int>(CINTnonzerosize, std::numeric_limits<int>::min());
      
      current_statement__ = 809;
      assign(CINTnonzero, nil_index_list(), context__.vals_i("CINTnonzero"),
        "assigning variable CINTnonzero");
      current_statement__ = 810;
      context__.validate_dims("data initialization","JAxDRIFTequiv","int",
          context__.to_vec());
      JAxDRIFTequiv = std::numeric_limits<int>::min();
      
      current_statement__ = 810;
      JAxDRIFTequiv = context__.vals_i("JAxDRIFTequiv")[(1 - 1)];
      current_statement__ = 811;
      validate_non_negative_index("IIlatentpop", "nlatent + nindvarying",
                                  (nlatent + nindvarying));
      current_statement__ = 812;
      validate_non_negative_index("IIlatentpop", "nlatent + nindvarying",
                                  (nlatent + nindvarying));
      current_statement__ = 813;
      IIlatentpop = Eigen::Matrix<double, -1, -1>((nlatent + nindvarying), 
        (nlatent + nindvarying));
      stan::math::fill(IIlatentpop, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 813;
      assign(IIlatentpop, nil_index_list(),
        diag_matrix(rep_vector(1, (nlatent + nindvarying))),
        "assigning variable IIlatentpop");
      current_statement__ = 814;
      validate_non_negative_index("nlpzerovec", "nlatentpop - nlatent",
                                  (nlatentpop - nlatent));
      current_statement__ = 815;
      nlpzerovec = Eigen::Matrix<double, -1, 1>((nlatentpop - nlatent));
      stan::math::fill(nlpzerovec, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 815;
      assign(nlpzerovec, nil_index_list(),
        rep_vector(0, (nlatentpop - nlatent)),
        "assigning variable nlpzerovec");
      current_statement__ = 816;
      validate_non_negative_index("nlplusonezerovec", "nlatent + 1",
                                  (nlatent + 1));
      current_statement__ = 817;
      nlplusonezerovec = Eigen::Matrix<double, -1, 1>((nlatent + 1));
      stan::math::fill(nlplusonezerovec, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 817;
      assign(nlplusonezerovec, nil_index_list(),
        rep_vector(0, (nlatent + 1)), "assigning variable nlplusonezerovec");
      current_statement__ = 818;
      validate_non_negative_index("tieffectindices", "nparams", nparams);
      current_statement__ = 819;
      tieffectindices = std::vector<int>(nparams, std::numeric_limits<int>::min());
      
      current_statement__ = 819;
      assign(tieffectindices, nil_index_list(), rep_array(0, nparams),
        "assigning variable tieffectindices");
      current_statement__ = 820;
      ntieffects = std::numeric_limits<int>::min();
      
      current_statement__ = 820;
      ntieffects = 0;
      current_statement__ = 821;
      dosmoother = std::numeric_limits<int>::min();
      
      current_statement__ = 821;
      dosmoother = (primitive_value(savescores) || primitive_value(
          savesubjectmatrices));
      current_statement__ = 829;
      if (logical_gt(ntipred, 0)) {
        current_statement__ = 827;
        for (int pi = 1; pi <= nparams; ++pi) {
          current_statement__ = 825;
          if (logical_gt(
                sum(
                  rvalue(TIPREDEFFECTsetup,
                    cons_list(index_uni(pi),
                      cons_list(index_omni(), nil_index_list())),
                    "TIPREDEFFECTsetup")), .5)) {
            current_statement__ = 822;
            ntieffects = (ntieffects + 1);
            current_statement__ = 823;
            assign(tieffectindices,
              cons_list(index_uni(ntieffects), nil_index_list()), pi,
              "assigning variable tieffectindices");
          } }
      } 
      current_statement__ = 830;
      validate_non_negative_index("rawpopmeans", "nparams", nparams);
      current_statement__ = 831;
      validate_non_negative_index("rawpopsdbase", "nindvarying", nindvarying);
      current_statement__ = 832;
      validate_non_negative_index("sqrtpcov", "nindvaryingoffdiagonals",
                                  nindvaryingoffdiagonals);
      current_statement__ = 833;
      baseindparams_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 833;
      baseindparams_1dim__ = (intoverpop ? 0 : nsubjects);
      current_statement__ = 833;
      validate_non_negative_index("baseindparams",
                                  "intoverpop ? 0 : nsubjects",
                                  baseindparams_1dim__);
      current_statement__ = 834;
      baseindparams_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 834;
      baseindparams_2dim__ = (intoverpop ? 0 : nindvarying);
      current_statement__ = 834;
      validate_non_negative_index("baseindparams",
                                  "intoverpop ? 0 : nindvarying",
                                  baseindparams_2dim__);
      current_statement__ = 835;
      validate_non_negative_index("tipredeffectparams", "ntipredeffects",
                                  ntipredeffects);
      current_statement__ = 836;
      validate_non_negative_index("tipredsimputed", "nmissingtipreds",
                                  nmissingtipreds);
      current_statement__ = 837;
      etaupdbasestates_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 837;
      etaupdbasestates_1dim__ = (intoverstates ? 0 :
                                   (nlatentpop * ndatapoints));
      current_statement__ = 837;
      validate_non_negative_index("etaupdbasestates",
                                  "intoverstates ? 0 : nlatentpop * ndatapoints",
                                  etaupdbasestates_1dim__);
      current_statement__ = 838;
      subsetpar_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 838;
      subsetpar_1dim__ = (logical_gt(nsubsets, 1) ? 1 : 0);
      current_statement__ = 838;
      validate_non_negative_index("subsetpar", "(nsubsets > 1) ? 1 : 0",
                                  subsetpar_1dim__);
      current_statement__ = 839;
      validate_non_negative_index("rawpopsd", "nindvarying", nindvarying);
      current_statement__ = 840;
      validate_non_negative_index("rawpopcovbase", "nindvarying", nindvarying);
      current_statement__ = 841;
      validate_non_negative_index("rawpopcovbase", "nindvarying", nindvarying);
      current_statement__ = 842;
      validate_non_negative_index("rawpopcov", "nindvarying", nindvarying);
      current_statement__ = 843;
      validate_non_negative_index("rawpopcov", "nindvarying", nindvarying);
      current_statement__ = 844;
      validate_non_negative_index("rawpopcovchol", "nindvarying", nindvarying);
      current_statement__ = 845;
      validate_non_negative_index("rawpopcovchol", "nindvarying", nindvarying);
      current_statement__ = 846;
      validate_non_negative_index("rawpopcorr", "nindvarying", nindvarying);
      current_statement__ = 847;
      validate_non_negative_index("rawpopcorr", "nindvarying", nindvarying);
      current_statement__ = 848;
      llrow_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 848;
      llrow_1dim__ = (dokalman ? ndatapoints : 1);
      current_statement__ = 848;
      validate_non_negative_index("llrow", "dokalman ? ndatapoints : 1",
                                  llrow_1dim__);
      current_statement__ = 849;
      etacova_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 849;
      etacova_2dim__ = (savescores ? ndatapoints : 0);
      current_statement__ = 849;
      validate_non_negative_index("etacova", "savescores ? ndatapoints : 0",
                                  etacova_2dim__);
      current_statement__ = 850;
      validate_non_negative_index("etacova", "nlatentpop", nlatentpop);
      current_statement__ = 851;
      validate_non_negative_index("etacova", "nlatentpop", nlatentpop);
      current_statement__ = 852;
      ycova_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 852;
      ycova_2dim__ = (savescores ? ndatapoints : 0);
      current_statement__ = 852;
      validate_non_negative_index("ycova", "savescores ? ndatapoints : 0",
                                  ycova_2dim__);
      current_statement__ = 853;
      validate_non_negative_index("ycova", "nmanifest", nmanifest);
      current_statement__ = 854;
      validate_non_negative_index("ycova", "nmanifest", nmanifest);
      current_statement__ = 855;
      etaa_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 855;
      etaa_2dim__ = (savescores ? ndatapoints : 0);
      current_statement__ = 855;
      validate_non_negative_index("etaa", "savescores ? ndatapoints : 0",
                                  etaa_2dim__);
      current_statement__ = 856;
      validate_non_negative_index("etaa", "nlatentpop", nlatentpop);
      current_statement__ = 857;
      ya_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 857;
      ya_2dim__ = (savescores ? ndatapoints : 0);
      current_statement__ = 857;
      validate_non_negative_index("ya", "savescores ? ndatapoints : 0",
                                  ya_2dim__);
      current_statement__ = 858;
      validate_non_negative_index("ya", "nmanifest", nmanifest);
      current_statement__ = 859;
      validate_non_negative_index("calcs", "0", 0);
      current_statement__ = 860;
      validate_non_negative_index("calcs", "0", 0);
      current_statement__ = 861;
      pop_PARS_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 861;
      pop_PARS_1dim__ = matrixdims[(10 - 1)][(1 - 1)];
      current_statement__ = 861;
      validate_non_negative_index("pop_PARS", "matrixdims[10, 1]",
                                  pop_PARS_1dim__);
      current_statement__ = 862;
      pop_PARS_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 862;
      pop_PARS_2dim__ = matrixdims[(10 - 1)][(2 - 1)];
      current_statement__ = 862;
      validate_non_negative_index("pop_PARS", "matrixdims[10, 2]",
                                  pop_PARS_2dim__);
      current_statement__ = 863;
      pop_T0MEANS_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 863;
      pop_T0MEANS_1dim__ = matrixdims[(1 - 1)][(1 - 1)];
      current_statement__ = 863;
      validate_non_negative_index("pop_T0MEANS", "matrixdims[1, 1]",
                                  pop_T0MEANS_1dim__);
      current_statement__ = 864;
      pop_T0MEANS_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 864;
      pop_T0MEANS_2dim__ = matrixdims[(1 - 1)][(2 - 1)];
      current_statement__ = 864;
      validate_non_negative_index("pop_T0MEANS", "matrixdims[1, 2]",
                                  pop_T0MEANS_2dim__);
      current_statement__ = 865;
      pop_LAMBDA_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 865;
      pop_LAMBDA_1dim__ = matrixdims[(2 - 1)][(1 - 1)];
      current_statement__ = 865;
      validate_non_negative_index("pop_LAMBDA", "matrixdims[2, 1]",
                                  pop_LAMBDA_1dim__);
      current_statement__ = 866;
      pop_LAMBDA_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 866;
      pop_LAMBDA_2dim__ = matrixdims[(2 - 1)][(2 - 1)];
      current_statement__ = 866;
      validate_non_negative_index("pop_LAMBDA", "matrixdims[2, 2]",
                                  pop_LAMBDA_2dim__);
      current_statement__ = 867;
      pop_DRIFT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 867;
      pop_DRIFT_1dim__ = matrixdims[(3 - 1)][(1 - 1)];
      current_statement__ = 867;
      validate_non_negative_index("pop_DRIFT", "matrixdims[3, 1]",
                                  pop_DRIFT_1dim__);
      current_statement__ = 868;
      pop_DRIFT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 868;
      pop_DRIFT_2dim__ = matrixdims[(3 - 1)][(2 - 1)];
      current_statement__ = 868;
      validate_non_negative_index("pop_DRIFT", "matrixdims[3, 2]",
                                  pop_DRIFT_2dim__);
      current_statement__ = 869;
      pop_DIFFUSION_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 869;
      pop_DIFFUSION_1dim__ = matrixdims[(4 - 1)][(1 - 1)];
      current_statement__ = 869;
      validate_non_negative_index("pop_DIFFUSION", "matrixdims[4, 1]",
                                  pop_DIFFUSION_1dim__);
      current_statement__ = 870;
      pop_DIFFUSION_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 870;
      pop_DIFFUSION_2dim__ = matrixdims[(4 - 1)][(2 - 1)];
      current_statement__ = 870;
      validate_non_negative_index("pop_DIFFUSION", "matrixdims[4, 2]",
                                  pop_DIFFUSION_2dim__);
      current_statement__ = 871;
      pop_MANIFESTVAR_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 871;
      pop_MANIFESTVAR_1dim__ = matrixdims[(5 - 1)][(1 - 1)];
      current_statement__ = 871;
      validate_non_negative_index("pop_MANIFESTVAR", "matrixdims[5, 1]",
                                  pop_MANIFESTVAR_1dim__);
      current_statement__ = 872;
      pop_MANIFESTVAR_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 872;
      pop_MANIFESTVAR_2dim__ = matrixdims[(5 - 1)][(2 - 1)];
      current_statement__ = 872;
      validate_non_negative_index("pop_MANIFESTVAR", "matrixdims[5, 2]",
                                  pop_MANIFESTVAR_2dim__);
      current_statement__ = 873;
      pop_MANIFESTMEANS_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 873;
      pop_MANIFESTMEANS_1dim__ = matrixdims[(6 - 1)][(1 - 1)];
      current_statement__ = 873;
      validate_non_negative_index("pop_MANIFESTMEANS", "matrixdims[6, 1]",
                                  pop_MANIFESTMEANS_1dim__);
      current_statement__ = 874;
      pop_MANIFESTMEANS_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 874;
      pop_MANIFESTMEANS_2dim__ = matrixdims[(6 - 1)][(2 - 1)];
      current_statement__ = 874;
      validate_non_negative_index("pop_MANIFESTMEANS", "matrixdims[6, 2]",
                                  pop_MANIFESTMEANS_2dim__);
      current_statement__ = 875;
      pop_CINT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 875;
      pop_CINT_1dim__ = matrixdims[(7 - 1)][(1 - 1)];
      current_statement__ = 875;
      validate_non_negative_index("pop_CINT", "matrixdims[7, 1]",
                                  pop_CINT_1dim__);
      current_statement__ = 876;
      pop_CINT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 876;
      pop_CINT_2dim__ = matrixdims[(7 - 1)][(2 - 1)];
      current_statement__ = 876;
      validate_non_negative_index("pop_CINT", "matrixdims[7, 2]",
                                  pop_CINT_2dim__);
      current_statement__ = 877;
      pop_T0VAR_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 877;
      pop_T0VAR_1dim__ = matrixdims[(8 - 1)][(1 - 1)];
      current_statement__ = 877;
      validate_non_negative_index("pop_T0VAR", "matrixdims[8, 1]",
                                  pop_T0VAR_1dim__);
      current_statement__ = 878;
      pop_T0VAR_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 878;
      pop_T0VAR_2dim__ = matrixdims[(8 - 1)][(2 - 1)];
      current_statement__ = 878;
      validate_non_negative_index("pop_T0VAR", "matrixdims[8, 2]",
                                  pop_T0VAR_2dim__);
      current_statement__ = 879;
      pop_TDPREDEFFECT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 879;
      pop_TDPREDEFFECT_1dim__ = matrixdims[(9 - 1)][(1 - 1)];
      current_statement__ = 879;
      validate_non_negative_index("pop_TDPREDEFFECT", "matrixdims[9, 1]",
                                  pop_TDPREDEFFECT_1dim__);
      current_statement__ = 880;
      pop_TDPREDEFFECT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 880;
      pop_TDPREDEFFECT_2dim__ = matrixdims[(9 - 1)][(2 - 1)];
      current_statement__ = 880;
      validate_non_negative_index("pop_TDPREDEFFECT", "matrixdims[9, 2]",
                                  pop_TDPREDEFFECT_2dim__);
      current_statement__ = 881;
      pop_DIFFUSIONcov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 881;
      pop_DIFFUSIONcov_1dim__ = matrixdims[(31 - 1)][(1 - 1)];
      current_statement__ = 881;
      validate_non_negative_index("pop_DIFFUSIONcov", "matrixdims[31, 1]",
                                  pop_DIFFUSIONcov_1dim__);
      current_statement__ = 882;
      pop_DIFFUSIONcov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 882;
      pop_DIFFUSIONcov_2dim__ = matrixdims[(31 - 1)][(2 - 1)];
      current_statement__ = 882;
      validate_non_negative_index("pop_DIFFUSIONcov", "matrixdims[31, 2]",
                                  pop_DIFFUSIONcov_2dim__);
      current_statement__ = 883;
      pop_MANIFESTcov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 883;
      pop_MANIFESTcov_1dim__ = matrixdims[(32 - 1)][(1 - 1)];
      current_statement__ = 883;
      validate_non_negative_index("pop_MANIFESTcov", "matrixdims[32, 1]",
                                  pop_MANIFESTcov_1dim__);
      current_statement__ = 884;
      pop_MANIFESTcov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 884;
      pop_MANIFESTcov_2dim__ = matrixdims[(32 - 1)][(2 - 1)];
      current_statement__ = 884;
      validate_non_negative_index("pop_MANIFESTcov", "matrixdims[32, 2]",
                                  pop_MANIFESTcov_2dim__);
      current_statement__ = 885;
      pop_T0cov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 885;
      pop_T0cov_1dim__ = matrixdims[(33 - 1)][(1 - 1)];
      current_statement__ = 885;
      validate_non_negative_index("pop_T0cov", "matrixdims[33, 1]",
                                  pop_T0cov_1dim__);
      current_statement__ = 886;
      pop_T0cov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 886;
      pop_T0cov_2dim__ = matrixdims[(33 - 1)][(2 - 1)];
      current_statement__ = 886;
      validate_non_negative_index("pop_T0cov", "matrixdims[33, 2]",
                                  pop_T0cov_2dim__);
      current_statement__ = 887;
      pop_asymCINT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 887;
      pop_asymCINT_1dim__ = matrixdims[(21 - 1)][(1 - 1)];
      current_statement__ = 887;
      validate_non_negative_index("pop_asymCINT", "matrixdims[21, 1]",
                                  pop_asymCINT_1dim__);
      current_statement__ = 888;
      pop_asymCINT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 888;
      pop_asymCINT_2dim__ = matrixdims[(21 - 1)][(2 - 1)];
      current_statement__ = 888;
      validate_non_negative_index("pop_asymCINT", "matrixdims[21, 2]",
                                  pop_asymCINT_2dim__);
      current_statement__ = 889;
      pop_asymDIFFUSIONcov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 889;
      pop_asymDIFFUSIONcov_1dim__ = matrixdims[(22 - 1)][(1 - 1)];
      current_statement__ = 889;
      validate_non_negative_index("pop_asymDIFFUSIONcov",
                                  "matrixdims[22, 1]",
                                  pop_asymDIFFUSIONcov_1dim__);
      current_statement__ = 890;
      pop_asymDIFFUSIONcov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 890;
      pop_asymDIFFUSIONcov_2dim__ = matrixdims[(22 - 1)][(2 - 1)];
      current_statement__ = 890;
      validate_non_negative_index("pop_asymDIFFUSIONcov",
                                  "matrixdims[22, 2]",
                                  pop_asymDIFFUSIONcov_2dim__);
      current_statement__ = 891;
      subj_PARS_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 891;
      subj_PARS_1dim__ = ((primitive_value(savesubjectmatrices) &&
                            primitive_value((primitive_value(
                            sum(
                              rvalue(whenmat,
                                cons_list(index_uni(10),
                                  cons_list(index_min_max(1, 5),
                                    nil_index_list())), "whenmat"))) ||
                            primitive_value(statedep[(10 - 1)])))) ?
                            nsubjects : 0);
      current_statement__ = 891;
      validate_non_negative_index("subj_PARS",
                                  "(savesubjectmatrices && (sum(whenmat[10, 1 : 5]) || statedep[10]))\n? nsubjects : 0",
                                  subj_PARS_1dim__);
      current_statement__ = 892;
      subj_PARS_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 892;
      subj_PARS_2dim__ = matrixdims[(10 - 1)][(1 - 1)];
      current_statement__ = 892;
      validate_non_negative_index("subj_PARS", "matrixdims[10, 1]",
                                  subj_PARS_2dim__);
      current_statement__ = 893;
      subj_PARS_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 893;
      subj_PARS_3dim__ = matrixdims[(10 - 1)][(2 - 1)];
      current_statement__ = 893;
      validate_non_negative_index("subj_PARS", "matrixdims[10, 2]",
                                  subj_PARS_3dim__);
      current_statement__ = 894;
      subj_T0MEANS_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 894;
      subj_T0MEANS_1dim__ = ((primitive_value(savesubjectmatrices) &&
                               primitive_value((primitive_value(
                               sum(
                                 rvalue(whenmat,
                                   cons_list(index_uni(1),
                                     cons_list(index_min_max(1, 5),
                                       nil_index_list())), "whenmat"))) ||
                               primitive_value(statedep[(1 - 1)])))) ?
                               nsubjects : 0);
      current_statement__ = 894;
      validate_non_negative_index("subj_T0MEANS",
                                  "(savesubjectmatrices && (sum(whenmat[1, 1 : 5]) || statedep[1])) ? nsubjects\n: 0",
                                  subj_T0MEANS_1dim__);
      current_statement__ = 895;
      subj_T0MEANS_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 895;
      subj_T0MEANS_2dim__ = matrixdims[(1 - 1)][(1 - 1)];
      current_statement__ = 895;
      validate_non_negative_index("subj_T0MEANS", "matrixdims[1, 1]",
                                  subj_T0MEANS_2dim__);
      current_statement__ = 896;
      subj_T0MEANS_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 896;
      subj_T0MEANS_3dim__ = matrixdims[(1 - 1)][(2 - 1)];
      current_statement__ = 896;
      validate_non_negative_index("subj_T0MEANS", "matrixdims[1, 2]",
                                  subj_T0MEANS_3dim__);
      current_statement__ = 897;
      subj_LAMBDA_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 897;
      subj_LAMBDA_1dim__ = ((primitive_value(savesubjectmatrices) &&
                              primitive_value((primitive_value(
                              sum(
                                rvalue(whenmat,
                                  cons_list(index_uni(2),
                                    cons_list(index_min_max(1, 5),
                                      nil_index_list())), "whenmat"))) ||
                              primitive_value(statedep[(2 - 1)])))) ?
                              nsubjects : 0);
      current_statement__ = 897;
      validate_non_negative_index("subj_LAMBDA",
                                  "(savesubjectmatrices && (sum(whenmat[2, 1 : 5]) || statedep[2])) ? nsubjects\n: 0",
                                  subj_LAMBDA_1dim__);
      current_statement__ = 898;
      subj_LAMBDA_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 898;
      subj_LAMBDA_2dim__ = matrixdims[(2 - 1)][(1 - 1)];
      current_statement__ = 898;
      validate_non_negative_index("subj_LAMBDA", "matrixdims[2, 1]",
                                  subj_LAMBDA_2dim__);
      current_statement__ = 899;
      subj_LAMBDA_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 899;
      subj_LAMBDA_3dim__ = matrixdims[(2 - 1)][(2 - 1)];
      current_statement__ = 899;
      validate_non_negative_index("subj_LAMBDA", "matrixdims[2, 2]",
                                  subj_LAMBDA_3dim__);
      current_statement__ = 900;
      subj_DRIFT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 900;
      subj_DRIFT_1dim__ = ((primitive_value(savesubjectmatrices) &&
                             primitive_value((primitive_value(
                             sum(
                               rvalue(whenmat,
                                 cons_list(index_uni(3),
                                   cons_list(index_min_max(1, 5),
                                     nil_index_list())), "whenmat"))) ||
                             primitive_value(statedep[(3 - 1)])))) ?
                             nsubjects : 0);
      current_statement__ = 900;
      validate_non_negative_index("subj_DRIFT",
                                  "(savesubjectmatrices && (sum(whenmat[3, 1 : 5]) || statedep[3])) ? nsubjects\n: 0",
                                  subj_DRIFT_1dim__);
      current_statement__ = 901;
      subj_DRIFT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 901;
      subj_DRIFT_2dim__ = matrixdims[(3 - 1)][(1 - 1)];
      current_statement__ = 901;
      validate_non_negative_index("subj_DRIFT", "matrixdims[3, 1]",
                                  subj_DRIFT_2dim__);
      current_statement__ = 902;
      subj_DRIFT_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 902;
      subj_DRIFT_3dim__ = matrixdims[(3 - 1)][(2 - 1)];
      current_statement__ = 902;
      validate_non_negative_index("subj_DRIFT", "matrixdims[3, 2]",
                                  subj_DRIFT_3dim__);
      current_statement__ = 903;
      subj_DIFFUSION_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 903;
      subj_DIFFUSION_1dim__ = ((primitive_value(savesubjectmatrices) &&
                                 primitive_value((primitive_value(
                                 sum(
                                   rvalue(whenmat,
                                     cons_list(index_uni(4),
                                       cons_list(index_min_max(1, 5),
                                         nil_index_list())), "whenmat"))) ||
                                 primitive_value(statedep[(4 - 1)])))) ?
                                 nsubjects : 0);
      current_statement__ = 903;
      validate_non_negative_index("subj_DIFFUSION",
                                  "(savesubjectmatrices && (sum(whenmat[4, 1 : 5]) || statedep[4])) ? nsubjects\n: 0",
                                  subj_DIFFUSION_1dim__);
      current_statement__ = 904;
      subj_DIFFUSION_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 904;
      subj_DIFFUSION_2dim__ = matrixdims[(4 - 1)][(1 - 1)];
      current_statement__ = 904;
      validate_non_negative_index("subj_DIFFUSION", "matrixdims[4, 1]",
                                  subj_DIFFUSION_2dim__);
      current_statement__ = 905;
      subj_DIFFUSION_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 905;
      subj_DIFFUSION_3dim__ = matrixdims[(4 - 1)][(2 - 1)];
      current_statement__ = 905;
      validate_non_negative_index("subj_DIFFUSION", "matrixdims[4, 2]",
                                  subj_DIFFUSION_3dim__);
      current_statement__ = 906;
      subj_MANIFESTVAR_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 906;
      subj_MANIFESTVAR_1dim__ = ((primitive_value(savesubjectmatrices) &&
                                   primitive_value((primitive_value(
                                   sum(
                                     rvalue(whenmat,
                                       cons_list(index_uni(5),
                                         cons_list(index_min_max(1, 5),
                                           nil_index_list())), "whenmat")))
                                   || primitive_value(statedep[(5 - 1)])))) ?
                                   nsubjects : 0);
      current_statement__ = 906;
      validate_non_negative_index("subj_MANIFESTVAR",
                                  "(savesubjectmatrices && (sum(whenmat[5, 1 : 5]) || statedep[5])) ? nsubjects\n: 0",
                                  subj_MANIFESTVAR_1dim__);
      current_statement__ = 907;
      subj_MANIFESTVAR_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 907;
      subj_MANIFESTVAR_2dim__ = matrixdims[(5 - 1)][(1 - 1)];
      current_statement__ = 907;
      validate_non_negative_index("subj_MANIFESTVAR", "matrixdims[5, 1]",
                                  subj_MANIFESTVAR_2dim__);
      current_statement__ = 908;
      subj_MANIFESTVAR_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 908;
      subj_MANIFESTVAR_3dim__ = matrixdims[(5 - 1)][(2 - 1)];
      current_statement__ = 908;
      validate_non_negative_index("subj_MANIFESTVAR", "matrixdims[5, 2]",
                                  subj_MANIFESTVAR_3dim__);
      current_statement__ = 909;
      subj_MANIFESTMEANS_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 909;
      subj_MANIFESTMEANS_1dim__ = ((primitive_value(savesubjectmatrices) &&
                                     primitive_value((primitive_value(
                                     sum(
                                       rvalue(whenmat,
                                         cons_list(index_uni(6),
                                           cons_list(index_min_max(1, 5),
                                             nil_index_list())), "whenmat")))
                                     || primitive_value(statedep[(6 - 1)]))))
                                     ? nsubjects : 0);
      current_statement__ = 909;
      validate_non_negative_index("subj_MANIFESTMEANS",
                                  "(savesubjectmatrices && (sum(whenmat[6, 1 : 5]) || statedep[6])) ? nsubjects\n: 0",
                                  subj_MANIFESTMEANS_1dim__);
      current_statement__ = 910;
      subj_MANIFESTMEANS_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 910;
      subj_MANIFESTMEANS_2dim__ = matrixdims[(6 - 1)][(1 - 1)];
      current_statement__ = 910;
      validate_non_negative_index("subj_MANIFESTMEANS", "matrixdims[6, 1]",
                                  subj_MANIFESTMEANS_2dim__);
      current_statement__ = 911;
      subj_MANIFESTMEANS_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 911;
      subj_MANIFESTMEANS_3dim__ = matrixdims[(6 - 1)][(2 - 1)];
      current_statement__ = 911;
      validate_non_negative_index("subj_MANIFESTMEANS", "matrixdims[6, 2]",
                                  subj_MANIFESTMEANS_3dim__);
      current_statement__ = 912;
      subj_CINT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 912;
      subj_CINT_1dim__ = ((primitive_value(savesubjectmatrices) &&
                            primitive_value((primitive_value(
                            sum(
                              rvalue(whenmat,
                                cons_list(index_uni(7),
                                  cons_list(index_min_max(1, 5),
                                    nil_index_list())), "whenmat"))) ||
                            primitive_value(statedep[(7 - 1)])))) ? nsubjects
                            : 0);
      current_statement__ = 912;
      validate_non_negative_index("subj_CINT",
                                  "(savesubjectmatrices && (sum(whenmat[7, 1 : 5]) || statedep[7])) ? nsubjects\n: 0",
                                  subj_CINT_1dim__);
      current_statement__ = 913;
      subj_CINT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 913;
      subj_CINT_2dim__ = matrixdims[(7 - 1)][(1 - 1)];
      current_statement__ = 913;
      validate_non_negative_index("subj_CINT", "matrixdims[7, 1]",
                                  subj_CINT_2dim__);
      current_statement__ = 914;
      subj_CINT_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 914;
      subj_CINT_3dim__ = matrixdims[(7 - 1)][(2 - 1)];
      current_statement__ = 914;
      validate_non_negative_index("subj_CINT", "matrixdims[7, 2]",
                                  subj_CINT_3dim__);
      current_statement__ = 915;
      subj_T0VAR_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 915;
      subj_T0VAR_1dim__ = ((primitive_value(savesubjectmatrices) &&
                             primitive_value((primitive_value(
                             sum(
                               rvalue(whenmat,
                                 cons_list(index_uni(8),
                                   cons_list(index_min_max(1, 5),
                                     nil_index_list())), "whenmat"))) ||
                             primitive_value(statedep[(8 - 1)])))) ?
                             nsubjects : 0);
      current_statement__ = 915;
      validate_non_negative_index("subj_T0VAR",
                                  "(savesubjectmatrices && (sum(whenmat[8, 1 : 5]) || statedep[8])) ? nsubjects\n: 0",
                                  subj_T0VAR_1dim__);
      current_statement__ = 916;
      subj_T0VAR_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 916;
      subj_T0VAR_2dim__ = matrixdims[(8 - 1)][(1 - 1)];
      current_statement__ = 916;
      validate_non_negative_index("subj_T0VAR", "matrixdims[8, 1]",
                                  subj_T0VAR_2dim__);
      current_statement__ = 917;
      subj_T0VAR_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 917;
      subj_T0VAR_3dim__ = matrixdims[(8 - 1)][(2 - 1)];
      current_statement__ = 917;
      validate_non_negative_index("subj_T0VAR", "matrixdims[8, 2]",
                                  subj_T0VAR_3dim__);
      current_statement__ = 918;
      subj_TDPREDEFFECT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 918;
      subj_TDPREDEFFECT_1dim__ = ((primitive_value(savesubjectmatrices) &&
                                    primitive_value((primitive_value(
                                    sum(
                                      rvalue(whenmat,
                                        cons_list(index_uni(9),
                                          cons_list(index_min_max(1, 5),
                                            nil_index_list())), "whenmat")))
                                    || primitive_value(statedep[(9 - 1)]))))
                                    ? nsubjects : 0);
      current_statement__ = 918;
      validate_non_negative_index("subj_TDPREDEFFECT",
                                  "(savesubjectmatrices && (sum(whenmat[9, 1 : 5]) || statedep[9])) ? nsubjects\n: 0",
                                  subj_TDPREDEFFECT_1dim__);
      current_statement__ = 919;
      subj_TDPREDEFFECT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 919;
      subj_TDPREDEFFECT_2dim__ = matrixdims[(9 - 1)][(1 - 1)];
      current_statement__ = 919;
      validate_non_negative_index("subj_TDPREDEFFECT", "matrixdims[9, 1]",
                                  subj_TDPREDEFFECT_2dim__);
      current_statement__ = 920;
      subj_TDPREDEFFECT_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 920;
      subj_TDPREDEFFECT_3dim__ = matrixdims[(9 - 1)][(2 - 1)];
      current_statement__ = 920;
      validate_non_negative_index("subj_TDPREDEFFECT", "matrixdims[9, 2]",
                                  subj_TDPREDEFFECT_3dim__);
      current_statement__ = 921;
      subj_DIFFUSIONcov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 921;
      subj_DIFFUSIONcov_1dim__ = ((primitive_value(savesubjectmatrices) &&
                                    primitive_value((primitive_value(
                                    sum(
                                      rvalue(whenmat,
                                        cons_list(index_uni(31),
                                          cons_list(index_min_max(1, 5),
                                            nil_index_list())), "whenmat")))
                                    || primitive_value(statedep[(31 - 1)]))))
                                    ? nsubjects : 0);
      current_statement__ = 921;
      validate_non_negative_index("subj_DIFFUSIONcov",
                                  "(savesubjectmatrices && (sum(whenmat[31, 1 : 5]) || statedep[31]))\n? nsubjects : 0",
                                  subj_DIFFUSIONcov_1dim__);
      current_statement__ = 922;
      subj_DIFFUSIONcov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 922;
      subj_DIFFUSIONcov_2dim__ = matrixdims[(31 - 1)][(1 - 1)];
      current_statement__ = 922;
      validate_non_negative_index("subj_DIFFUSIONcov", "matrixdims[31, 1]",
                                  subj_DIFFUSIONcov_2dim__);
      current_statement__ = 923;
      subj_DIFFUSIONcov_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 923;
      subj_DIFFUSIONcov_3dim__ = matrixdims[(31 - 1)][(2 - 1)];
      current_statement__ = 923;
      validate_non_negative_index("subj_DIFFUSIONcov", "matrixdims[31, 2]",
                                  subj_DIFFUSIONcov_3dim__);
      current_statement__ = 924;
      subj_MANIFESTcov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 924;
      subj_MANIFESTcov_1dim__ = ((primitive_value(savesubjectmatrices) &&
                                   primitive_value((primitive_value(
                                   sum(
                                     rvalue(whenmat,
                                       cons_list(index_uni(32),
                                         cons_list(index_min_max(1, 5),
                                           nil_index_list())), "whenmat")))
                                   || primitive_value(statedep[(32 - 1)]))))
                                   ? nsubjects : 0);
      current_statement__ = 924;
      validate_non_negative_index("subj_MANIFESTcov",
                                  "(savesubjectmatrices && (sum(whenmat[32, 1 : 5]) || statedep[32]))\n? nsubjects : 0",
                                  subj_MANIFESTcov_1dim__);
      current_statement__ = 925;
      subj_MANIFESTcov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 925;
      subj_MANIFESTcov_2dim__ = matrixdims[(32 - 1)][(1 - 1)];
      current_statement__ = 925;
      validate_non_negative_index("subj_MANIFESTcov", "matrixdims[32, 1]",
                                  subj_MANIFESTcov_2dim__);
      current_statement__ = 926;
      subj_MANIFESTcov_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 926;
      subj_MANIFESTcov_3dim__ = matrixdims[(32 - 1)][(2 - 1)];
      current_statement__ = 926;
      validate_non_negative_index("subj_MANIFESTcov", "matrixdims[32, 2]",
                                  subj_MANIFESTcov_3dim__);
      current_statement__ = 927;
      subj_T0cov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 927;
      subj_T0cov_1dim__ = ((primitive_value(savesubjectmatrices) &&
                             primitive_value((primitive_value(
                             sum(
                               rvalue(whenmat,
                                 cons_list(index_uni(33),
                                   cons_list(index_min_max(1, 5),
                                     nil_index_list())), "whenmat"))) ||
                             primitive_value(statedep[(33 - 1)])))) ?
                             nsubjects : 0);
      current_statement__ = 927;
      validate_non_negative_index("subj_T0cov",
                                  "(savesubjectmatrices && (sum(whenmat[33, 1 : 5]) || statedep[33]))\n? nsubjects : 0",
                                  subj_T0cov_1dim__);
      current_statement__ = 928;
      subj_T0cov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 928;
      subj_T0cov_2dim__ = matrixdims[(33 - 1)][(1 - 1)];
      current_statement__ = 928;
      validate_non_negative_index("subj_T0cov", "matrixdims[33, 1]",
                                  subj_T0cov_2dim__);
      current_statement__ = 929;
      subj_T0cov_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 929;
      subj_T0cov_3dim__ = matrixdims[(33 - 1)][(2 - 1)];
      current_statement__ = 929;
      validate_non_negative_index("subj_T0cov", "matrixdims[33, 2]",
                                  subj_T0cov_3dim__);
      current_statement__ = 930;
      subj_asymCINT_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 930;
      subj_asymCINT_1dim__ = ((primitive_value(savesubjectmatrices) &&
                                primitive_value((primitive_value(
                                sum(
                                  rvalue(whenmat,
                                    cons_list(index_uni(21),
                                      cons_list(index_min_max(1, 5),
                                        nil_index_list())), "whenmat"))) ||
                                primitive_value(statedep[(21 - 1)])))) ?
                                nsubjects : 0);
      current_statement__ = 930;
      validate_non_negative_index("subj_asymCINT",
                                  "(savesubjectmatrices && (sum(whenmat[21, 1 : 5]) || statedep[21]))\n? nsubjects : 0",
                                  subj_asymCINT_1dim__);
      current_statement__ = 931;
      subj_asymCINT_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 931;
      subj_asymCINT_2dim__ = matrixdims[(21 - 1)][(1 - 1)];
      current_statement__ = 931;
      validate_non_negative_index("subj_asymCINT", "matrixdims[21, 1]",
                                  subj_asymCINT_2dim__);
      current_statement__ = 932;
      subj_asymCINT_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 932;
      subj_asymCINT_3dim__ = matrixdims[(21 - 1)][(2 - 1)];
      current_statement__ = 932;
      validate_non_negative_index("subj_asymCINT", "matrixdims[21, 2]",
                                  subj_asymCINT_3dim__);
      current_statement__ = 933;
      subj_asymDIFFUSIONcov_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 933;
      subj_asymDIFFUSIONcov_1dim__ = ((primitive_value(savesubjectmatrices)
                                        && primitive_value((primitive_value(
                                        sum(
                                          rvalue(whenmat,
                                            cons_list(index_uni(22),
                                              cons_list(index_min_max(1, 5),
                                                nil_index_list())),
                                            "whenmat"))) || primitive_value(
                                        statedep[(22 - 1)])))) ? nsubjects :
                                        0);
      current_statement__ = 933;
      validate_non_negative_index("subj_asymDIFFUSIONcov",
                                  "(savesubjectmatrices && (sum(whenmat[22, 1 : 5]) || statedep[22]))\n? nsubjects : 0",
                                  subj_asymDIFFUSIONcov_1dim__);
      current_statement__ = 934;
      subj_asymDIFFUSIONcov_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 934;
      subj_asymDIFFUSIONcov_2dim__ = matrixdims[(22 - 1)][(1 - 1)];
      current_statement__ = 934;
      validate_non_negative_index("subj_asymDIFFUSIONcov",
                                  "matrixdims[22, 1]",
                                  subj_asymDIFFUSIONcov_2dim__);
      current_statement__ = 935;
      subj_asymDIFFUSIONcov_3dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 935;
      subj_asymDIFFUSIONcov_3dim__ = matrixdims[(22 - 1)][(2 - 1)];
      current_statement__ = 935;
      validate_non_negative_index("subj_asymDIFFUSIONcov",
                                  "matrixdims[22, 2]",
                                  subj_asymDIFFUSIONcov_3dim__);
      current_statement__ = 936;
      tipreds_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 936;
      tipreds_1dim__ = (ntipred ? (nmissingtipreds ? nsubjects : 0) : 0);
      current_statement__ = 936;
      validate_non_negative_index("tipreds",
                                  "ntipred ? (nmissingtipreds ? nsubjects : 0) : 0",
                                  tipreds_1dim__);
      current_statement__ = 937;
      tipreds_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 937;
      tipreds_2dim__ = (ntipred ? (nmissingtipreds ? ntipred : 0) : 0);
      current_statement__ = 937;
      validate_non_negative_index("tipreds",
                                  "ntipred ? (nmissingtipreds ? ntipred : 0) : 0",
                                  tipreds_2dim__);
      current_statement__ = 938;
      validate_non_negative_index("TIPREDEFFECT", "nparams", nparams);
      current_statement__ = 939;
      validate_non_negative_index("TIPREDEFFECT", "ntipred", ntipred);
      current_statement__ = 940;
      validate_non_negative_index("popmeans", "nparams", nparams);
      current_statement__ = 941;
      validate_non_negative_index("popsd", "nindvarying", nindvarying);
      current_statement__ = 942;
      validate_non_negative_index("popcov", "nindvarying", nindvarying);
      current_statement__ = 943;
      validate_non_negative_index("popcov", "nindvarying", nindvarying);
      current_statement__ = 944;
      validate_non_negative_index("linearTIPREDEFFECT", "nparams", nparams);
      current_statement__ = 945;
      validate_non_negative_index("linearTIPREDEFFECT", "ntipred", ntipred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += nparams;
      num_params_r__ += nindvarying;
      num_params_r__ += nindvaryingoffdiagonals;
      num_params_r__ += baseindparams_1dim__ * baseindparams_2dim__;
      num_params_r__ += ntipredeffects;
      num_params_r__ += nmissingtipreds;
      num_params_r__ += etaupdbasestates_1dim__;
      num_params_r__ += subsetpar_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_ctsm_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> rawpopmeans;
      rawpopmeans = Eigen::Matrix<local_scalar_t__, -1, 1>(nparams);
      stan::math::fill(rawpopmeans, DUMMY_VAR__);
      
      current_statement__ = 1;
      rawpopmeans = in__.vector(nparams);
      Eigen::Matrix<local_scalar_t__, -1, 1> rawpopsdbase;
      rawpopsdbase = Eigen::Matrix<local_scalar_t__, -1, 1>(nindvarying);
      stan::math::fill(rawpopsdbase, DUMMY_VAR__);
      
      current_statement__ = 2;
      rawpopsdbase = in__.vector(nindvarying);
      Eigen::Matrix<local_scalar_t__, -1, 1> sqrtpcov;
      sqrtpcov = Eigen::Matrix<local_scalar_t__, -1, 1>(nindvaryingoffdiagonals);
      stan::math::fill(sqrtpcov, DUMMY_VAR__);
      
      current_statement__ = 3;
      sqrtpcov = in__.vector(nindvaryingoffdiagonals);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> baseindparams;
      baseindparams = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(baseindparams_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(baseindparams_2dim__));
      stan::math::fill(baseindparams, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= baseindparams_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(baseindparams, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(baseindparams_2dim__),
          "assigning variable baseindparams");}
      Eigen::Matrix<local_scalar_t__, -1, 1> tipredeffectparams;
      tipredeffectparams = Eigen::Matrix<local_scalar_t__, -1, 1>(ntipredeffects);
      stan::math::fill(tipredeffectparams, DUMMY_VAR__);
      
      current_statement__ = 5;
      tipredeffectparams = in__.vector(ntipredeffects);
      Eigen::Matrix<local_scalar_t__, -1, 1> tipredsimputed;
      tipredsimputed = Eigen::Matrix<local_scalar_t__, -1, 1>(nmissingtipreds);
      stan::math::fill(tipredsimputed, DUMMY_VAR__);
      
      current_statement__ = 6;
      tipredsimputed = in__.vector(nmissingtipreds);
      Eigen::Matrix<local_scalar_t__, -1, 1> etaupdbasestates;
      etaupdbasestates = Eigen::Matrix<local_scalar_t__, -1, 1>(etaupdbasestates_1dim__);
      stan::math::fill(etaupdbasestates, DUMMY_VAR__);
      
      current_statement__ = 7;
      etaupdbasestates = in__.vector(etaupdbasestates_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> subsetpar;
      subsetpar = Eigen::Matrix<local_scalar_t__, -1, 1>(subsetpar_1dim__);
      stan::math::fill(subsetpar, DUMMY_VAR__);
      
      current_statement__ = 8;
      subsetpar = in__.vector(subsetpar_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> rawpopsd;
      rawpopsd = Eigen::Matrix<local_scalar_t__, -1, 1>(nindvarying);
      stan::math::fill(rawpopsd, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> rawpopcovbase;
      rawpopcovbase = Eigen::Matrix<local_scalar_t__, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcovbase, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> rawpopcov;
      rawpopcov = Eigen::Matrix<local_scalar_t__, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> rawpopcovchol;
      rawpopcovchol = Eigen::Matrix<local_scalar_t__, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcovchol, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> rawpopcorr;
      rawpopcorr = Eigen::Matrix<local_scalar_t__, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcorr, DUMMY_VAR__);
      
      local_scalar_t__ subset;
      subset = DUMMY_VAR__;
      
      current_statement__ = 14;
      subset = (logical_gt(nsubsets, 1) ?
                  stan::math::promote_scalar<local_scalar_t__>(subsetpar[
                  (1 - 1)]) :
                  stan::math::promote_scalar<local_scalar_t__>(1.0));
      local_scalar_t__ firstsub;
      firstsub = DUMMY_VAR__;
      
      current_statement__ = 15;
      firstsub = stan::math::round(
                   ((((nsubjects * 1.0) / nsubsets) * (subset - 1)) + 1));
      local_scalar_t__ lastsub;
      lastsub = DUMMY_VAR__;
      
      current_statement__ = 16;
      lastsub = stan::math::round((((nsubjects * 1.0) / nsubsets) * subset));
      local_scalar_t__ ll;
      ll = DUMMY_VAR__;
      
      current_statement__ = 17;
      ll = 0;
      Eigen::Matrix<local_scalar_t__, -1, 1> llrow;
      llrow = Eigen::Matrix<local_scalar_t__, -1, 1>(llrow_1dim__);
      stan::math::fill(llrow, DUMMY_VAR__);
      
      current_statement__ = 18;
      assign(llrow, nil_index_list(),
        rep_vector(0, (dokalman ? ndatapoints : 1)),
        "assigning variable llrow");
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> etacova;
      etacova = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(etacova_2dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop)));
      stan::math::fill(etacova, DUMMY_VAR__);
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> ycova;
      ycova = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(ycova_2dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(nmanifest, nmanifest)));
      stan::math::fill(ycova, DUMMY_VAR__);
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> etaa;
      etaa = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(etaa_2dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(nlatentpop)));
      stan::math::fill(etaa, DUMMY_VAR__);
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> ya;
      ya = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(ya_2dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(nmanifest)));
      stan::math::fill(ya, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> calcs;
      calcs = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(0, Eigen::Matrix<local_scalar_t__, -1, 1>(0));
      stan::math::fill(calcs, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_PARS;
      pop_PARS = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_PARS_1dim__, pop_PARS_2dim__);
      stan::math::fill(pop_PARS, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_T0MEANS;
      pop_T0MEANS = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_T0MEANS_1dim__, pop_T0MEANS_2dim__);
      stan::math::fill(pop_T0MEANS, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_LAMBDA;
      pop_LAMBDA = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_LAMBDA_1dim__, pop_LAMBDA_2dim__);
      stan::math::fill(pop_LAMBDA, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_DRIFT;
      pop_DRIFT = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_DRIFT_1dim__, pop_DRIFT_2dim__);
      stan::math::fill(pop_DRIFT, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_DIFFUSION;
      pop_DIFFUSION = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_DIFFUSION_1dim__, pop_DIFFUSION_2dim__);
      stan::math::fill(pop_DIFFUSION, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_MANIFESTVAR;
      pop_MANIFESTVAR = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_MANIFESTVAR_1dim__, pop_MANIFESTVAR_2dim__);
      stan::math::fill(pop_MANIFESTVAR, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_MANIFESTMEANS;
      pop_MANIFESTMEANS = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_MANIFESTMEANS_1dim__, pop_MANIFESTMEANS_2dim__);
      stan::math::fill(pop_MANIFESTMEANS, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_CINT;
      pop_CINT = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_CINT_1dim__, pop_CINT_2dim__);
      stan::math::fill(pop_CINT, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_T0VAR;
      pop_T0VAR = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_T0VAR_1dim__, pop_T0VAR_2dim__);
      stan::math::fill(pop_T0VAR, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_TDPREDEFFECT;
      pop_TDPREDEFFECT = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_TDPREDEFFECT_1dim__, pop_TDPREDEFFECT_2dim__);
      stan::math::fill(pop_TDPREDEFFECT, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_DIFFUSIONcov;
      pop_DIFFUSIONcov = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_DIFFUSIONcov_1dim__, pop_DIFFUSIONcov_2dim__);
      stan::math::fill(pop_DIFFUSIONcov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_MANIFESTcov;
      pop_MANIFESTcov = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_MANIFESTcov_1dim__, pop_MANIFESTcov_2dim__);
      stan::math::fill(pop_MANIFESTcov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_T0cov;
      pop_T0cov = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_T0cov_1dim__, pop_T0cov_2dim__);
      stan::math::fill(pop_T0cov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_asymCINT;
      pop_asymCINT = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_asymCINT_1dim__, pop_asymCINT_2dim__);
      stan::math::fill(pop_asymCINT, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> pop_asymDIFFUSIONcov;
      pop_asymDIFFUSIONcov = Eigen::Matrix<local_scalar_t__, -1, -1>(pop_asymDIFFUSIONcov_1dim__, pop_asymDIFFUSIONcov_2dim__);
      stan::math::fill(pop_asymDIFFUSIONcov, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_PARS;
      subj_PARS = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_PARS_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_PARS_2dim__, subj_PARS_3dim__));
      stan::math::fill(subj_PARS, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_T0MEANS;
      subj_T0MEANS = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_T0MEANS_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_T0MEANS_2dim__, subj_T0MEANS_3dim__));
      stan::math::fill(subj_T0MEANS, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_LAMBDA;
      subj_LAMBDA = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_LAMBDA_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_LAMBDA_2dim__, subj_LAMBDA_3dim__));
      stan::math::fill(subj_LAMBDA, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_DRIFT;
      subj_DRIFT = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_DRIFT_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_DRIFT_2dim__, subj_DRIFT_3dim__));
      stan::math::fill(subj_DRIFT, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_DIFFUSION;
      subj_DIFFUSION = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_DIFFUSION_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_DIFFUSION_2dim__, subj_DIFFUSION_3dim__));
      stan::math::fill(subj_DIFFUSION, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_MANIFESTVAR;
      subj_MANIFESTVAR = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_MANIFESTVAR_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_MANIFESTVAR_2dim__, subj_MANIFESTVAR_3dim__));
      stan::math::fill(subj_MANIFESTVAR, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_MANIFESTMEANS;
      subj_MANIFESTMEANS = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_MANIFESTMEANS_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_MANIFESTMEANS_2dim__, subj_MANIFESTMEANS_3dim__));
      stan::math::fill(subj_MANIFESTMEANS, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_CINT;
      subj_CINT = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_CINT_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_CINT_2dim__, subj_CINT_3dim__));
      stan::math::fill(subj_CINT, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_T0VAR;
      subj_T0VAR = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_T0VAR_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_T0VAR_2dim__, subj_T0VAR_3dim__));
      stan::math::fill(subj_T0VAR, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_TDPREDEFFECT;
      subj_TDPREDEFFECT = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_TDPREDEFFECT_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_TDPREDEFFECT_2dim__, subj_TDPREDEFFECT_3dim__));
      stan::math::fill(subj_TDPREDEFFECT, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_DIFFUSIONcov;
      subj_DIFFUSIONcov = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_DIFFUSIONcov_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_DIFFUSIONcov_2dim__, subj_DIFFUSIONcov_3dim__));
      stan::math::fill(subj_DIFFUSIONcov, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_MANIFESTcov;
      subj_MANIFESTcov = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_MANIFESTcov_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_MANIFESTcov_2dim__, subj_MANIFESTcov_3dim__));
      stan::math::fill(subj_MANIFESTcov, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_T0cov;
      subj_T0cov = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_T0cov_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_T0cov_2dim__, subj_T0cov_3dim__));
      stan::math::fill(subj_T0cov, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_asymCINT;
      subj_asymCINT = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_asymCINT_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_asymCINT_2dim__, subj_asymCINT_3dim__));
      stan::math::fill(subj_asymCINT, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> subj_asymDIFFUSIONcov;
      subj_asymDIFFUSIONcov = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(subj_asymDIFFUSIONcov_1dim__, Eigen::Matrix<local_scalar_t__, -1, -1>(subj_asymDIFFUSIONcov_2dim__, subj_asymDIFFUSIONcov_3dim__));
      stan::math::fill(subj_asymDIFFUSIONcov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tipreds;
      tipreds = Eigen::Matrix<local_scalar_t__, -1, -1>(tipreds_1dim__, tipreds_2dim__);
      stan::math::fill(tipreds, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> TIPREDEFFECT;
      TIPREDEFFECT = Eigen::Matrix<local_scalar_t__, -1, -1>(nparams, ntipred);
      stan::math::fill(TIPREDEFFECT, DUMMY_VAR__);
      
      current_statement__ = 78;
      if (logical_gt(ntipred, 0)) {
        current_statement__ = 67;
        if (logical_gt(nmissingtipreds, 0)) {
          int counter;
          counter = std::numeric_limits<int>::min();
          
          current_statement__ = 56;
          counter = 0;
          current_statement__ = 65;
          for (int coli = 1; coli <= cols(tipreds); ++coli) {
            current_statement__ = 63;
            for (int rowi = 1; rowi <= rows(tipreds); ++rowi) {
              current_statement__ = 61;
              if (logical_eq(
                    rvalue(tipredsdata,
                      cons_list(index_uni(rowi),
                        cons_list(index_uni(coli), nil_index_list())),
                      "tipredsdata"), 99999)) {
                current_statement__ = 58;
                counter = (counter + 1);
                current_statement__ = 59;
                assign(tipreds,
                  cons_list(index_uni(rowi),
                    cons_list(index_uni(coli), nil_index_list())),
                  tipredsimputed[(counter - 1)], "assigning variable tipreds");
              } else {
                current_statement__ = 57;
                assign(tipreds,
                  cons_list(index_uni(rowi),
                    cons_list(index_uni(coli), nil_index_list())),
                  rvalue(tipredsdata,
                    cons_list(index_uni(rowi),
                      cons_list(index_uni(coli), nil_index_list())),
                    "tipredsdata"), "assigning variable tipreds");
              }}}
        } 
        current_statement__ = 76;
        for (int ci = 1; ci <= ntipred; ++ci) {
          current_statement__ = 74;
          for (int ri = 1; ri <= nparams; ++ri) {
            current_statement__ = 72;
            if (logical_gt(TIPREDEFFECTsetup[(ri - 1)][(ci - 1)], 0)) {
              current_statement__ = 70;
              assign(TIPREDEFFECT,
                cons_list(index_uni(ri),
                  cons_list(index_uni(ci), nil_index_list())),
                tipredeffectparams[(TIPREDEFFECTsetup[(ri - 1)][(ci - 1)] -
                                     1)], "assigning variable TIPREDEFFECT");
            } else {
              current_statement__ = 68;
              assign(TIPREDEFFECT,
                cons_list(index_uni(ri),
                  cons_list(index_uni(ci), nil_index_list())), 0,
                "assigning variable TIPREDEFFECT");
            }}}
      } 
      current_statement__ = 95;
      if (logical_gt(nindvarying, 0)) {
        int counter;
        counter = std::numeric_limits<int>::min();
        
        current_statement__ = 79;
        counter = 0;
        current_statement__ = 80;
        assign(rawpopsd, nil_index_list(),
          add(
            elt_multiply(log1p_exp(subtract(multiply(2, rawpopsdbase), 1)),
              sdscale), 1e-10), "assigning variable rawpopsd");
        current_statement__ = 90;
        for (int j = 1; j <= nindvarying; ++j) {
          current_statement__ = 81;
          assign(rawpopcovbase,
            cons_list(index_uni(j),
              cons_list(index_uni(j), nil_index_list())), rawpopsd[(j - 1)],
            "assigning variable rawpopcovbase");
          current_statement__ = 88;
          for (int i = 1; i <= nindvarying; ++i) {
            current_statement__ = 86;
            if (logical_gt(i, j)) {
              current_statement__ = 82;
              counter = (counter + 1);
              current_statement__ = 83;
              assign(rawpopcovbase,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())),
                ((inv_logit(sqrtpcov[(counter - 1)]) * 2) - 1),
                "assigning variable rawpopcovbase");
              current_statement__ = 84;
              assign(rawpopcovbase,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), 0,
                "assigning variable rawpopcovbase");
            } }}
        current_statement__ = 91;
        assign(rawpopcorr, nil_index_list(),
          tcrossprod(constraincorsqrt(rawpopcovbase, pstream__)),
          "assigning variable rawpopcorr");
        current_statement__ = 92;
        assign(rawpopcov, nil_index_list(),
          makesym(quad_form_diag(rawpopcorr, add(rawpopsd, 1e-8)), verbose,
            1, pstream__), "assigning variable rawpopcov");
        current_statement__ = 93;
        assign(rawpopcovchol, nil_index_list(),
          cholesky_decompose(rawpopcov), "assigning variable rawpopcovchol");
      } 
      {
        int prevrow;
        prevrow = std::numeric_limits<int>::min();
        
        current_statement__ = 96;
        prevrow = 0;
        local_scalar_t__ prevdt;
        prevdt = DUMMY_VAR__;
        
        current_statement__ = 97;
        prevdt = 0;
        local_scalar_t__ dt;
        dt = DUMMY_VAR__;
        
        current_statement__ = 98;
        dt = 1;
        local_scalar_t__ dtsmall;
        dtsmall = DUMMY_VAR__;
        
        int dtchange;
        dtchange = std::numeric_limits<int>::min();
        
        current_statement__ = 100;
        dtchange = 1;
        local_scalar_t__ prevtime;
        prevtime = DUMMY_VAR__;
        
        current_statement__ = 101;
        prevtime = 0;
        int T0check;
        T0check = std::numeric_limits<int>::min();
        
        current_statement__ = 102;
        T0check = 0;
        current_statement__ = 103;
        validate_non_negative_index("etacov", "nlatentpop", nlatentpop);
        current_statement__ = 104;
        validate_non_negative_index("etacov", "nlatentpop", nlatentpop);
        Eigen::Matrix<local_scalar_t__, -1, -1> etacov;
        etacov = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(etacov, DUMMY_VAR__);
        
        current_statement__ = 106;
        validate_non_negative_index("err", "nmanifest", nmanifest);
        Eigen::Matrix<local_scalar_t__, -1, 1> err;
        err = Eigen::Matrix<local_scalar_t__, -1, 1>(nmanifest);
        stan::math::fill(err, DUMMY_VAR__);
        
        current_statement__ = 108;
        validate_non_negative_index("syprior", "nmanifest", nmanifest);
        Eigen::Matrix<local_scalar_t__, -1, 1> syprior;
        syprior = Eigen::Matrix<local_scalar_t__, -1, 1>(nmanifest);
        stan::math::fill(syprior, DUMMY_VAR__);
        
        current_statement__ = 110;
        validate_non_negative_index("K", "nlatentpop", nlatentpop);
        current_statement__ = 111;
        validate_non_negative_index("K", "nmanifest", nmanifest);
        Eigen::Matrix<local_scalar_t__, -1, -1> K;
        K = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nmanifest);
        stan::math::fill(K, DUMMY_VAR__);
        
        current_statement__ = 113;
        validate_non_negative_index("ypriorcov_sqrt", "nmanifest", nmanifest);
        current_statement__ = 114;
        validate_non_negative_index("ypriorcov_sqrt", "nmanifest", nmanifest);
        Eigen::Matrix<local_scalar_t__, -1, -1> ypriorcov_sqrt;
        ypriorcov_sqrt = Eigen::Matrix<local_scalar_t__, -1, -1>(nmanifest, nmanifest);
        stan::math::fill(ypriorcov_sqrt, DUMMY_VAR__);
        
        current_statement__ = 115;
        assign(ypriorcov_sqrt, nil_index_list(),
          rep_matrix(0, nmanifest, nmanifest),
          "assigning variable ypriorcov_sqrt");
        current_statement__ = 116;
        validate_non_negative_index("ycov", "nmanifest", nmanifest);
        current_statement__ = 117;
        validate_non_negative_index("ycov", "nmanifest", nmanifest);
        Eigen::Matrix<local_scalar_t__, -1, -1> ycov;
        ycov = Eigen::Matrix<local_scalar_t__, -1, -1>(nmanifest, nmanifest);
        stan::math::fill(ycov, DUMMY_VAR__);
        
        current_statement__ = 119;
        validate_non_negative_index("eJAx", "nlatentpop", nlatentpop);
        current_statement__ = 120;
        validate_non_negative_index("eJAx", "nlatentpop", nlatentpop);
        Eigen::Matrix<local_scalar_t__, -1, -1> eJAx;
        eJAx = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(eJAx, DUMMY_VAR__);
        
        current_statement__ = 121;
        assign(eJAx, nil_index_list(),
          diag_matrix(rep_vector(1, nlatentpop)), "assigning variable eJAx");
        current_statement__ = 122;
        validate_non_negative_index("eJAxs", "dosmoother ? ndatapoints : 1",
                                    (dosmoother ? ndatapoints : 1));
        current_statement__ = 123;
        validate_non_negative_index("eJAxs", "nlatentpop", nlatentpop);
        current_statement__ = 124;
        validate_non_negative_index("eJAxs", "nlatentpop", nlatentpop);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> eJAxs;
        eJAxs = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>((
          dosmoother ? ndatapoints : 1), Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop));
        stan::math::fill(eJAxs, DUMMY_VAR__);
        
        current_statement__ = 126;
        validate_non_negative_index("state", "nlatentpop", nlatentpop);
        Eigen::Matrix<local_scalar_t__, 1, -1> state;
        state = Eigen::Matrix<local_scalar_t__, 1, -1>(nlatentpop);
        stan::math::fill(state, DUMMY_VAR__);
        
        current_statement__ = 127;
        assign(state, nil_index_list(), rep_row_vector(-999, nlatentpop),
          "assigning variable state");
        current_statement__ = 128;
        validate_non_negative_index("statetf", "nlatentpop", nlatentpop);
        Eigen::Matrix<local_scalar_t__, 1, -1> statetf;
        statetf = Eigen::Matrix<local_scalar_t__, 1, -1>(nlatentpop);
        stan::math::fill(statetf, DUMMY_VAR__);
        
        current_statement__ = 130;
        validate_non_negative_index("JAx", "nlatentpop", nlatentpop);
        current_statement__ = 131;
        validate_non_negative_index("JAx", "nlatentpop", nlatentpop);
        Eigen::Matrix<local_scalar_t__, -1, -1> JAx;
        JAx = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(JAx, DUMMY_VAR__);
        
        current_statement__ = 133;
        validate_non_negative_index("Jtd", "nlatentpop", nlatentpop);
        current_statement__ = 134;
        validate_non_negative_index("Jtd", "nlatentpop", nlatentpop);
        Eigen::Matrix<local_scalar_t__, -1, -1> Jtd;
        Jtd = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(Jtd, DUMMY_VAR__);
        
        current_statement__ = 136;
        validate_non_negative_index("Jy", "nmanifest", nmanifest);
        current_statement__ = 137;
        validate_non_negative_index("Jy", "nlatentpop", nlatentpop);
        Eigen::Matrix<local_scalar_t__, -1, -1> Jy;
        Jy = Eigen::Matrix<local_scalar_t__, -1, -1>(nmanifest, nlatentpop);
        stan::math::fill(Jy, DUMMY_VAR__);
        
        current_statement__ = 139;
        validate_non_negative_index("Jys", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 140;
        validate_non_negative_index("Jys", "nmanifest", nmanifest);
        current_statement__ = 141;
        validate_non_negative_index("Jys", "nlatentpop", nlatentpop);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> Jys;
        Jys = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>((
                                                                    dosmoother
                                                                    ?
                                                                    ndatapoints
                                                                    : 0), Eigen::Matrix<local_scalar_t__, -1, -1>(nmanifest, nlatentpop));
        stan::math::fill(Jys, DUMMY_VAR__);
        
        current_statement__ = 143;
        validate_non_negative_index("discreteDRIFT", "nlatent", nlatent);
        current_statement__ = 144;
        validate_non_negative_index("discreteDRIFT", "nlatent", nlatent);
        Eigen::Matrix<local_scalar_t__, -1, -1> discreteDRIFT;
        discreteDRIFT = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatent, nlatent);
        stan::math::fill(discreteDRIFT, DUMMY_VAR__);
        
        current_statement__ = 146;
        validate_non_negative_index("discreteCINT", "nlatent", nlatent);
        Eigen::Matrix<local_scalar_t__, -1, 1> discreteCINT;
        discreteCINT = Eigen::Matrix<local_scalar_t__, -1, 1>(nlatent);
        stan::math::fill(discreteCINT, DUMMY_VAR__);
        
        current_statement__ = 148;
        validate_non_negative_index("discreteDIFFUSION", "nlatent", nlatent);
        current_statement__ = 149;
        validate_non_negative_index("discreteDIFFUSION", "nlatent", nlatent);
        Eigen::Matrix<local_scalar_t__, -1, -1> discreteDIFFUSION;
        discreteDIFFUSION = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatent, nlatent);
        stan::math::fill(discreteDIFFUSION, DUMMY_VAR__);
        
        current_statement__ = 150;
        assign(discreteDIFFUSION, nil_index_list(),
          rep_matrix(0.0, nlatent, nlatent),
          "assigning variable discreteDIFFUSION");
        current_statement__ = 151;
        validate_non_negative_index("rawindparams", "nparams", nparams);
        Eigen::Matrix<local_scalar_t__, -1, 1> rawindparams;
        rawindparams = Eigen::Matrix<local_scalar_t__, -1, 1>(nparams);
        stan::math::fill(rawindparams, DUMMY_VAR__);
        
        current_statement__ = 152;
        assign(rawindparams, nil_index_list(), rawpopmeans,
          "assigning variable rawindparams");
        current_statement__ = 153;
        validate_non_negative_index("indparams", "nparams", nparams);
        Eigen::Matrix<local_scalar_t__, -1, 1> indparams;
        indparams = Eigen::Matrix<local_scalar_t__, -1, 1>(nparams);
        stan::math::fill(indparams, DUMMY_VAR__);
        
        current_statement__ = 155;
        validate_non_negative_index("etacovb",
                                    "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 156;
        validate_non_negative_index("etacovb", "nlatentpop", nlatentpop);
        current_statement__ = 157;
        validate_non_negative_index("etacovb", "nlatentpop", nlatentpop);
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> etacovb;
        etacovb = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop)));
        stan::math::fill(etacovb, DUMMY_VAR__);
        
        current_statement__ = 159;
        validate_non_negative_index("ycovb", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 160;
        validate_non_negative_index("ycovb", "nmanifest", nmanifest);
        current_statement__ = 161;
        validate_non_negative_index("ycovb", "nmanifest", nmanifest);
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> ycovb;
        ycovb = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<local_scalar_t__, -1, -1>(nmanifest, nmanifest)));
        stan::math::fill(ycovb, DUMMY_VAR__);
        
        current_statement__ = 163;
        validate_non_negative_index("etab", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 164;
        validate_non_negative_index("etab", "nlatentpop", nlatentpop);
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> etab;
        etab = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<local_scalar_t__, -1, 1>(nlatentpop)));
        stan::math::fill(etab, DUMMY_VAR__);
        
        current_statement__ = 166;
        validate_non_negative_index("yb", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 167;
        validate_non_negative_index("yb", "nmanifest", nmanifest);
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> yb;
        yb = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(3, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<local_scalar_t__, -1, 1>(nmanifest)));
        stan::math::fill(yb, DUMMY_VAR__);
        
        current_statement__ = 169;
        validate_non_negative_index("PARS", "matrixdims[10, 1]",
                                    matrixdims[(10 - 1)][(1 - 1)]);
        current_statement__ = 170;
        validate_non_negative_index("PARS", "matrixdims[10, 2]",
                                    matrixdims[(10 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> PARS;
        PARS = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[(10 - 1)][
          (1 - 1)], matrixdims[(10 - 1)][(2 - 1)]);
        stan::math::fill(PARS, DUMMY_VAR__);
        
        current_statement__ = 172;
        validate_non_negative_index("T0MEANS", "matrixdims[1, 1]",
                                    matrixdims[(1 - 1)][(1 - 1)]);
        current_statement__ = 173;
        validate_non_negative_index("T0MEANS", "matrixdims[1, 2]",
                                    matrixdims[(1 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> T0MEANS;
        T0MEANS = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (1 - 1)][(1 - 1)], matrixdims[(1 - 1)][(2 - 1)]);
        stan::math::fill(T0MEANS, DUMMY_VAR__);
        
        current_statement__ = 175;
        validate_non_negative_index("LAMBDA", "matrixdims[2, 1]",
                                    matrixdims[(2 - 1)][(1 - 1)]);
        current_statement__ = 176;
        validate_non_negative_index("LAMBDA", "matrixdims[2, 2]",
                                    matrixdims[(2 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> LAMBDA;
        LAMBDA = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[(2 - 1)][
          (1 - 1)], matrixdims[(2 - 1)][(2 - 1)]);
        stan::math::fill(LAMBDA, DUMMY_VAR__);
        
        current_statement__ = 178;
        validate_non_negative_index("DRIFT", "matrixdims[3, 1]",
                                    matrixdims[(3 - 1)][(1 - 1)]);
        current_statement__ = 179;
        validate_non_negative_index("DRIFT", "matrixdims[3, 2]",
                                    matrixdims[(3 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> DRIFT;
        DRIFT = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[(3 - 1)][
          (1 - 1)], matrixdims[(3 - 1)][(2 - 1)]);
        stan::math::fill(DRIFT, DUMMY_VAR__);
        
        current_statement__ = 181;
        validate_non_negative_index("DIFFUSION", "matrixdims[4, 1]",
                                    matrixdims[(4 - 1)][(1 - 1)]);
        current_statement__ = 182;
        validate_non_negative_index("DIFFUSION", "matrixdims[4, 2]",
                                    matrixdims[(4 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> DIFFUSION;
        DIFFUSION = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (4 - 1)][(1 - 1)], matrixdims[(4 - 1)][(2 - 1)]);
        stan::math::fill(DIFFUSION, DUMMY_VAR__);
        
        current_statement__ = 184;
        validate_non_negative_index("MANIFESTVAR", "matrixdims[5, 1]",
                                    matrixdims[(5 - 1)][(1 - 1)]);
        current_statement__ = 185;
        validate_non_negative_index("MANIFESTVAR", "matrixdims[5, 2]",
                                    matrixdims[(5 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> MANIFESTVAR;
        MANIFESTVAR = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (5 - 1)][(1 - 1)], matrixdims[(5 - 1)][(2 - 1)]);
        stan::math::fill(MANIFESTVAR, DUMMY_VAR__);
        
        current_statement__ = 187;
        validate_non_negative_index("MANIFESTMEANS", "matrixdims[6, 1]",
                                    matrixdims[(6 - 1)][(1 - 1)]);
        current_statement__ = 188;
        validate_non_negative_index("MANIFESTMEANS", "matrixdims[6, 2]",
                                    matrixdims[(6 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> MANIFESTMEANS;
        MANIFESTMEANS = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (6 - 1)][(1 - 1)], matrixdims[(6 - 1)][(2 - 1)]);
        stan::math::fill(MANIFESTMEANS, DUMMY_VAR__);
        
        current_statement__ = 190;
        validate_non_negative_index("CINT", "matrixdims[7, 1]",
                                    matrixdims[(7 - 1)][(1 - 1)]);
        current_statement__ = 191;
        validate_non_negative_index("CINT", "matrixdims[7, 2]",
                                    matrixdims[(7 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> CINT;
        CINT = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[(7 - 1)][
          (1 - 1)], matrixdims[(7 - 1)][(2 - 1)]);
        stan::math::fill(CINT, DUMMY_VAR__);
        
        current_statement__ = 193;
        validate_non_negative_index("T0VAR", "matrixdims[8, 1]",
                                    matrixdims[(8 - 1)][(1 - 1)]);
        current_statement__ = 194;
        validate_non_negative_index("T0VAR", "matrixdims[8, 2]",
                                    matrixdims[(8 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> T0VAR;
        T0VAR = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[(8 - 1)][
          (1 - 1)], matrixdims[(8 - 1)][(2 - 1)]);
        stan::math::fill(T0VAR, DUMMY_VAR__);
        
        current_statement__ = 196;
        validate_non_negative_index("TDPREDEFFECT", "matrixdims[9, 1]",
                                    matrixdims[(9 - 1)][(1 - 1)]);
        current_statement__ = 197;
        validate_non_negative_index("TDPREDEFFECT", "matrixdims[9, 2]",
                                    matrixdims[(9 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> TDPREDEFFECT;
        TDPREDEFFECT = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (9 - 1)][(1 - 1)], matrixdims[(9 - 1)][(2 - 1)]);
        stan::math::fill(TDPREDEFFECT, DUMMY_VAR__);
        
        current_statement__ = 199;
        validate_non_negative_index("DIFFUSIONcov", "matrixdims[31, 1]",
                                    matrixdims[(31 - 1)][(1 - 1)]);
        current_statement__ = 200;
        validate_non_negative_index("DIFFUSIONcov", "matrixdims[31, 2]",
                                    matrixdims[(31 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> DIFFUSIONcov;
        DIFFUSIONcov = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (31 - 1)][(1 - 1)], matrixdims[(31 - 1)][(2 - 1)]);
        stan::math::fill(DIFFUSIONcov, DUMMY_VAR__);
        
        current_statement__ = 202;
        validate_non_negative_index("MANIFESTcov", "matrixdims[32, 1]",
                                    matrixdims[(32 - 1)][(1 - 1)]);
        current_statement__ = 203;
        validate_non_negative_index("MANIFESTcov", "matrixdims[32, 2]",
                                    matrixdims[(32 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> MANIFESTcov;
        MANIFESTcov = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (32 - 1)][(1 - 1)], matrixdims[(32 - 1)][(2 - 1)]);
        stan::math::fill(MANIFESTcov, DUMMY_VAR__);
        
        current_statement__ = 205;
        validate_non_negative_index("T0cov", "matrixdims[33, 1]",
                                    matrixdims[(33 - 1)][(1 - 1)]);
        current_statement__ = 206;
        validate_non_negative_index("T0cov", "matrixdims[33, 2]",
                                    matrixdims[(33 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> T0cov;
        T0cov = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[(33 - 1)][
          (1 - 1)], matrixdims[(33 - 1)][(2 - 1)]);
        stan::math::fill(T0cov, DUMMY_VAR__);
        
        current_statement__ = 208;
        validate_non_negative_index("asymCINT", "matrixdims[21, 1]",
                                    matrixdims[(21 - 1)][(1 - 1)]);
        current_statement__ = 209;
        validate_non_negative_index("asymCINT", "matrixdims[21, 2]",
                                    matrixdims[(21 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> asymCINT;
        asymCINT = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (21 - 1)][(1 - 1)], matrixdims[(21 - 1)][(2 - 1)]);
        stan::math::fill(asymCINT, DUMMY_VAR__);
        
        current_statement__ = 211;
        validate_non_negative_index("asymDIFFUSIONcov", "matrixdims[22, 1]",
                                    matrixdims[(22 - 1)][(1 - 1)]);
        current_statement__ = 212;
        validate_non_negative_index("asymDIFFUSIONcov", "matrixdims[22, 2]",
                                    matrixdims[(22 - 1)][(2 - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, -1> asymDIFFUSIONcov;
        asymDIFFUSIONcov = Eigen::Matrix<local_scalar_t__, -1, -1>(matrixdims[
          (22 - 1)][(1 - 1)], matrixdims[(22 - 1)][(2 - 1)]);
        stan::math::fill(asymDIFFUSIONcov, DUMMY_VAR__);
        
        current_statement__ = 214;
        assign(asymDIFFUSIONcov, nil_index_list(),
          rep_matrix(0, nlatent, nlatent),
          "assigning variable asymDIFFUSIONcov");
        current_statement__ = 215;
        assign(DIFFUSIONcov, nil_index_list(),
          rep_matrix(0, nlatent, nlatent), "assigning variable DIFFUSIONcov");
        current_statement__ = 613;
        for (int rowx = 0; rowx <= (dokalman ? ndatapoints : 0); ++rowx) {
          int rowi;
          rowi = std::numeric_limits<int>::min();
          
          current_statement__ = 216;
          rowi = (rowx ? rowx : 1);
          current_statement__ = 610;
          if ((primitive_value(logical_eq(rowx, 0)) || primitive_value(
              (primitive_value((primitive_value(dokalmanrows[(rowi - 1)]) &&
              primitive_value(
              logical_gte(subject[(rowi - 1)], (firstsub - .1))))) &&
              primitive_value(
              logical_lte(subject[(rowi - 1)], (lastsub + .1))))))) {
            int si;
            si = std::numeric_limits<int>::min();
            
            current_statement__ = 217;
            si = (rowx ? subject[(rowi - 1)] : 0);
            int full;
            full = std::numeric_limits<int>::min();
            
            current_statement__ = 218;
            full = (primitive_value(logical_eq(dosmoother, 1)) ||
                primitive_value(logical_eq(si, 0)));
            current_statement__ = 219;
            validate_non_negative_index("o",
                                        "full ? nmanifest : nobs_y[rowi]",
                                        (full ? nmanifest :
                                           nobs_y[(rowi - 1)]));
            std::vector<int> o;
            o = std::vector<int>((full ? nmanifest : nobs_y[(rowi - 1)]), std::numeric_limits<int>::min());
            
            current_statement__ = 221;
            validate_non_negative_index("o1",
                                        "full ? size(whichequals(manifesttype, 1, 1)) : nbinary_y[rowi]",
                                        (full ?
                                           stan::math::size(
                                             whichequals(manifesttype, 1,
                                               1, pstream__)) :
                                           nbinary_y[(rowi - 1)]));
            std::vector<int> o1;
            o1 = std::vector<int>((full ?
                                     stan::math::size(
                                       whichequals(manifesttype, 1,
                                         1, pstream__)) :
                                     nbinary_y[(rowi - 1)]), std::numeric_limits<int>::min());
            
            current_statement__ = 223;
            validate_non_negative_index("o0",
                                        "full ? size(whichequals(manifesttype, 1, 0)) : ncont_y[rowi]",
                                        (full ?
                                           stan::math::size(
                                             whichequals(manifesttype, 1,
                                               0, pstream__)) :
                                           ncont_y[(rowi - 1)]));
            std::vector<int> o0;
            o0 = std::vector<int>((full ?
                                     stan::math::size(
                                       whichequals(manifesttype, 1,
                                         0, pstream__)) : ncont_y[(rowi - 1)]), std::numeric_limits<int>::min());
            
            current_statement__ = 225;
            validate_non_negative_index("od", "nobs_y[rowi]",
                                        nobs_y[(rowi - 1)]);
            std::vector<int> od;
            od = std::vector<int>(nobs_y[(rowi - 1)], std::numeric_limits<int>::min());
            
            current_statement__ = 226;
            assign(od, nil_index_list(),
              rvalue(whichobs_y,
                cons_list(index_uni(rowi),
                  cons_list(index_min_max(1, nobs_y[(rowi - 1)]),
                    nil_index_list())), "whichobs_y"),
              "assigning variable od");
            current_statement__ = 227;
            validate_non_negative_index("o1d", "nbinary_y[rowi]",
                                        nbinary_y[(rowi - 1)]);
            std::vector<int> o1d;
            o1d = std::vector<int>(nbinary_y[(rowi - 1)], std::numeric_limits<int>::min());
            
            current_statement__ = 228;
            assign(o1d, nil_index_list(),
              rvalue(whichbinary_y,
                cons_list(index_uni(rowi),
                  cons_list(index_min_max(1, nbinary_y[(rowi - 1)]),
                    nil_index_list())), "whichbinary_y"),
              "assigning variable o1d");
            current_statement__ = 229;
            validate_non_negative_index("o0d", "ncont_y[rowi]",
                                        ncont_y[(rowi - 1)]);
            std::vector<int> o0d;
            o0d = std::vector<int>(ncont_y[(rowi - 1)], std::numeric_limits<int>::min());
            
            current_statement__ = 230;
            assign(o0d, nil_index_list(),
              rvalue(whichcont_y,
                cons_list(index_uni(rowi),
                  cons_list(index_min_max(1, ncont_y[(rowi - 1)]),
                    nil_index_list())), "whichcont_y"),
              "assigning variable o0d");
            current_statement__ = 235;
            if (logical_negation(full)) {
              current_statement__ = 231;
              assign(o, nil_index_list(),
                rvalue(whichobs_y,
                  cons_list(index_uni(rowi),
                    cons_list(index_min_max(1, nobs_y[(rowi - 1)]),
                      nil_index_list())), "whichobs_y"),
                "assigning variable o");
              current_statement__ = 232;
              assign(o1, nil_index_list(),
                rvalue(whichbinary_y,
                  cons_list(index_uni(rowi),
                    cons_list(index_min_max(1, nbinary_y[(rowi - 1)]),
                      nil_index_list())), "whichbinary_y"),
                "assigning variable o1");
              current_statement__ = 233;
              assign(o0, nil_index_list(),
                rvalue(whichcont_y,
                  cons_list(index_uni(rowi),
                    cons_list(index_min_max(1, ncont_y[(rowi - 1)]),
                      nil_index_list())), "whichcont_y"),
                "assigning variable o0");
            } 
            current_statement__ = 241;
            if (full) {
              current_statement__ = 237;
              for (int mi = 1; mi <= nmanifest; ++mi) {
                current_statement__ = 236;
                assign(o, cons_list(index_uni(mi), nil_index_list()), mi,
                  "assigning variable o");}
              current_statement__ = 238;
              assign(o1, nil_index_list(),
                whichequals(manifesttype, 1, 1, pstream__),
                "assigning variable o1");
              current_statement__ = 239;
              assign(o0, nil_index_list(),
                whichequals(manifesttype, 1, 0, pstream__),
                "assigning variable o0");
            } 
            current_statement__ = 243;
            if ((primitive_value(logical_neq(prevrow, 0)) && primitive_value(
                logical_neq(rowi, 1)))) {
              current_statement__ = 242;
              T0check = (logical_eq(si, subject[(prevrow - 1)]) ?
                           (T0check + 1) : 0);
            } 
            current_statement__ = 248;
            if (logical_gt(T0check, 0)) {
              current_statement__ = 244;
              dt = (time[(rowi - 1)] - time[(prevrow - 1)]);
              current_statement__ = 245;
              dtchange = logical_neq(dt, prevdt);
              current_statement__ = 246;
              prevdt = dt;
            } 
            current_statement__ = 317;
            if (logical_eq(T0check, 0)) {
              current_statement__ = 249;
              assign(rawindparams, nil_index_list(), rawpopmeans,
                "assigning variable rawindparams");
              current_statement__ = 251;
              if ((primitive_value((primitive_value(logical_gt(si, 0)) &&
                  primitive_value(logical_gt(nindvarying, 0)))) &&
                  primitive_value(logical_eq(intoverpop, 0)))) {
                current_statement__ = 250;
                assign(rawindparams,
                  cons_list(index_multi(indvaryingindex), nil_index_list()),
                  add(
                    stan::model::deep_copy(
                      rvalue(rawindparams,
                        cons_list(index_multi(indvaryingindex),
                          nil_index_list()), "rawindparams")),
                    multiply(rawpopcovchol, baseindparams[(si - 1)])),
                  "assigning variable rawindparams");
              } 
              current_statement__ = 257;
              if ((primitive_value(logical_gt(si, 0)) && primitive_value(
                  logical_gt(ntieffects, 0)))) {
                current_statement__ = 253;
                if (logical_gt(nmissingtipreds, 0)) {
                  current_statement__ = 252;
                  assign(rawindparams,
                    cons_list(
                      index_multi(rvalue(tieffectindices,
                                    cons_list(index_min_max(1, ntieffects),
                                      nil_index_list()), "tieffectindices")),
                      nil_index_list()),
                    add(
                      stan::model::deep_copy(
                        rvalue(rawindparams,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "rawindparams")),
                      multiply(
                        rvalue(TIPREDEFFECT,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "TIPREDEFFECT"),
                        transpose(
                          rvalue(tipreds,
                            cons_list(index_uni(si), nil_index_list()),
                            "tipreds")))), "assigning variable rawindparams");
                } 
                current_statement__ = 255;
                if (logical_eq(nmissingtipreds, 0)) {
                  current_statement__ = 254;
                  assign(rawindparams,
                    cons_list(
                      index_multi(rvalue(tieffectindices,
                                    cons_list(index_min_max(1, ntieffects),
                                      nil_index_list()), "tieffectindices")),
                      nil_index_list()),
                    add(
                      stan::model::deep_copy(
                        rvalue(rawindparams,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "rawindparams")),
                      multiply(
                        rvalue(TIPREDEFFECT,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "TIPREDEFFECT"),
                        transpose(
                          rvalue(tipredsdata,
                            cons_list(index_uni(si), nil_index_list()),
                            "tipredsdata")))),
                    "assigning variable rawindparams");
                } 
              } 
              current_statement__ = 258;
              assign(indparams,
                cons_list(
                  index_multi(whichequals(whenvecp[((si ? 2 : 1) - 1)], 0,
                                0, pstream__)), nil_index_list()),
                transpose(
                  parvectform(
                    whichequals(whenvecp[((si ? 2 : 1) - 1)], 0,
                      0, pstream__), transpose(rawindparams), 0, matsetup,
                    matvalues, si, pstream__)),
                "assigning variable indparams");
              current_statement__ = 260;
              if (logical_gte(whenmat[(1 - 1)][(5 - 1)], (si ? 1 : 0))) {
                current_statement__ = 259;
                assign(T0MEANS, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0MEANS), indparams, statetf,
                    std::vector<int>{0}, 1, matsetup, matvalues,
                    si, pstream__), "assigning variable T0MEANS");
              } 
              current_statement__ = 261;
              assign(state, nil_index_list(),
                transpose(
                  rvalue(T0MEANS,
                    cons_list(index_omni(),
                      cons_list(index_uni(1), nil_index_list())), "T0MEANS")),
                "assigning variable state");
              current_statement__ = 262;
              assign(statetf,
                cons_list(
                  index_multi(whichequals(whenvecs[(1 - 1)], 0, 0, pstream__)),
                  nil_index_list()),
                parvectform(whichequals(whenvecs[(1 - 1)], 0, 0, pstream__),
                  state, 1, matsetup, matvalues, si, pstream__),
                "assigning variable statetf");
              current_statement__ = 264;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(10),
                          cons_list(index_multi(std::vector<int>{5, 1}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 263;
                assign(PARS, nil_index_list(),
                  mcalc(stan::model::deep_copy(PARS), indparams, statetf,
                    std::vector<int>{0, 1}, 10, matsetup, matvalues,
                    si, pstream__), "assigning variable PARS");
              } 
              current_statement__ = 266;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(1),
                          cons_list(index_multi(std::vector<int>{5, 1}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 265;
                assign(T0MEANS, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0MEANS), indparams, statetf,
                    std::vector<int>{0, 1}, 1, matsetup, matvalues,
                    si, pstream__), "assigning variable T0MEANS");
              } 
              current_statement__ = 268;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(8),
                          cons_list(index_multi(std::vector<int>{5, 1}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 267;
                assign(T0VAR, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0VAR), indparams, statetf,
                    std::vector<int>{0, 1}, 8, matsetup, matvalues,
                    si, pstream__), "assigning variable T0VAR");
              } 
              current_statement__ = 271;
              for (int li = 1; li <= nlatentpop; ++li) {
                current_statement__ = 270;
                if (is_nan(state[(li - 1)])) {
                  current_statement__ = 269;
                  assign(state, cons_list(index_uni(li), nil_index_list()),
                    rvalue(T0MEANS,
                      cons_list(index_uni(li),
                        cons_list(index_uni(1), nil_index_list())),
                      "T0MEANS"), "assigning variable state");
                } }
              current_statement__ = 273;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(2),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 272;
                assign(LAMBDA, nil_index_list(),
                  mcalc(stan::model::deep_copy(LAMBDA), indparams, statetf,
                    std::vector<int>{0}, 2, matsetup, matvalues,
                    si, pstream__), "assigning variable LAMBDA");
              } 
              current_statement__ = 275;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(3),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 274;
                assign(DRIFT, nil_index_list(),
                  mcalc(stan::model::deep_copy(DRIFT), indparams, statetf,
                    std::vector<int>{0}, 3, matsetup, matvalues,
                    si, pstream__), "assigning variable DRIFT");
              } 
              current_statement__ = 277;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(4),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 276;
                assign(DIFFUSION, nil_index_list(),
                  mcalc(stan::model::deep_copy(DIFFUSION), indparams,
                    statetf, std::vector<int>{0}, 4, matsetup, matvalues,
                    si, pstream__), "assigning variable DIFFUSION");
              } 
              current_statement__ = 279;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(5),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 278;
                assign(MANIFESTVAR, nil_index_list(),
                  mcalc(stan::model::deep_copy(MANIFESTVAR), indparams,
                    statetf, std::vector<int>{0}, 5, matsetup, matvalues,
                    si, pstream__), "assigning variable MANIFESTVAR");
              } 
              current_statement__ = 281;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(6),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 280;
                assign(MANIFESTMEANS, nil_index_list(),
                  mcalc(stan::model::deep_copy(MANIFESTMEANS), indparams,
                    statetf, std::vector<int>{0}, 6, matsetup, matvalues,
                    si, pstream__), "assigning variable MANIFESTMEANS");
              } 
              current_statement__ = 283;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(7),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 282;
                assign(CINT, nil_index_list(),
                  mcalc(stan::model::deep_copy(CINT), indparams, statetf,
                    std::vector<int>{0}, 7, matsetup, matvalues,
                    si, pstream__), "assigning variable CINT");
              } 
              current_statement__ = 285;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(8),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 284;
                assign(T0VAR, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0VAR), indparams, statetf,
                    std::vector<int>{0}, 8, matsetup, matvalues,
                    si, pstream__), "assigning variable T0VAR");
              } 
              current_statement__ = 287;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(9),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 286;
                assign(TDPREDEFFECT, nil_index_list(),
                  mcalc(stan::model::deep_copy(TDPREDEFFECT), indparams,
                    statetf, std::vector<int>{0}, 9, matsetup, matvalues,
                    si, pstream__), "assigning variable TDPREDEFFECT");
              } 
              current_statement__ = 289;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(52),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 288;
                assign(JAx, nil_index_list(),
                  mcalc(stan::model::deep_copy(JAx), indparams, statetf,
                    std::vector<int>{0}, 52, matsetup, matvalues,
                    si, pstream__), "assigning variable JAx");
              } 
              current_statement__ = 291;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(53),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 290;
                assign(Jtd, nil_index_list(),
                  mcalc(stan::model::deep_copy(Jtd), indparams, statetf,
                    std::vector<int>{0}, 53, matsetup, matvalues,
                    si, pstream__), "assigning variable Jtd");
              } 
              current_statement__ = 293;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(54),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 292;
                assign(Jy, nil_index_list(),
                  mcalc(stan::model::deep_copy(Jy), indparams, statetf,
                    std::vector<int>{0}, 54, matsetup, matvalues,
                    si, pstream__), "assigning variable Jy");
              } 
              current_statement__ = 295;
              if (logical_eq(verbose, 2)) {
                current_statement__ = 294;
                if (pstream__) {
                  stan_print(pstream__, "DRIFT = ");
                  stan_print(pstream__, DRIFT);
                  stan_print(pstream__, "\n");
                }
              } 
              current_statement__ = 297;
              if (logical_eq(verbose, 2)) {
                current_statement__ = 296;
                if (pstream__) {
                  stan_print(pstream__, "indparams = ");
                  stan_print(pstream__, indparams);
                  stan_print(pstream__, "\n");
                }
              } 
              current_statement__ = 314;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    (sum(
                       rvalue(whenmat,
                         cons_list(index_uni(8),
                           cons_list(index_omni(), nil_index_list())),
                         "whenmat")) + statedep[(8 - 1)]), 0)))) {
                current_statement__ = 299;
                if ((primitive_value(intoverpop) && primitive_value(
                    logical_gt(nindvarying, 0)))) {
                  current_statement__ = 298;
                  assign(T0VAR,
                    cons_list(index_multi(intoverpopindvaryingindex),
                      cons_list(index_multi(intoverpopindvaryingindex),
                        nil_index_list())), rawpopcovbase,
                    "assigning variable T0VAR");
                } 
                current_statement__ = 300;
                assign(T0cov, nil_index_list(),
                  sdcovsqrt2cov(T0VAR, choleskymats, pstream__),
                  "assigning variable T0cov");
                current_statement__ = 312;
                if ((primitive_value(intoverpop) && primitive_value(
                    logical_gt(nindvarying, 0)))) {
                  current_statement__ = 302;
                  if (logical_eq(si, 0)) {
                    current_statement__ = 301;
                    assign(rawpopcovchol, nil_index_list(),
                      cholesky_decompose(
                        makesym(
                          rvalue(T0cov,
                            cons_list(index_multi(intoverpopindvaryingindex),
                              cons_list(
                                index_multi(intoverpopindvaryingindex),
                                nil_index_list())), "T0cov"), verbose,
                          1, pstream__)), "assigning variable rawpopcovchol");
                  } 
                  current_statement__ = 310;
                  for (int ri = 1; ri <= stan::math::size(matsetup); ++ri) {
                    current_statement__ = 308;
                    if (logical_eq(matsetup[(ri - 1)][(7 - 1)], 1)) {
                      current_statement__ = 306;
                      if (matsetup[(ri - 1)][(5 - 1)]) {
                        current_statement__ = 303;
                        assign(T0cov,
                          cons_list(index_uni(matsetup[(ri - 1)][(1 - 1)]),
                            cons_list(index_omni(), nil_index_list())),
                          multiply(
                            stan::model::deep_copy(
                              rvalue(T0cov,
                                cons_list(
                                  index_uni(matsetup[(ri - 1)][(1 - 1)]),
                                  cons_list(index_omni(), nil_index_list())),
                                "T0cov")),
                            (matvalues[(ri - 1)][(2 - 1)] *
                              matvalues[(ri - 1)][(3 - 1)])),
                          "assigning variable T0cov");
                        current_statement__ = 304;
                        assign(T0cov,
                          cons_list(index_omni(),
                            cons_list(index_uni(matsetup[(ri - 1)][(1 - 1)]),
                              nil_index_list())),
                          multiply(
                            stan::model::deep_copy(
                              rvalue(T0cov,
                                cons_list(index_omni(),
                                  cons_list(
                                    index_uni(matsetup[(ri - 1)][(1 - 1)]),
                                    nil_index_list())), "T0cov")),
                            (matvalues[(ri - 1)][(2 - 1)] *
                              matvalues[(ri - 1)][(3 - 1)])),
                          "assigning variable T0cov");
                      } 
                    } }
                } 
              } 
              current_statement__ = 315;
              assign(etacov, nil_index_list(), T0cov,
                "assigning variable etacov");
            } 
            current_statement__ = 319;
            if (logical_gt(verbose, 1)) {
              current_statement__ = 318;
              if (pstream__) {
                stan_print(pstream__, "below t0 row ");
                stan_print(pstream__, rowi);
                stan_print(pstream__, "\n");
              }
            } 
            current_statement__ = 408;
            if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                logical_gt(T0check, 0)))) {
              current_statement__ = 320;
              validate_non_negative_index("base", "nlatent", nlatent);
              Eigen::Matrix<local_scalar_t__, -1, 1> base;
              base = Eigen::Matrix<local_scalar_t__, -1, 1>(nlatent);
              stan::math::fill(base, DUMMY_VAR__);
              
              local_scalar_t__ intstepi;
              intstepi = DUMMY_VAR__;
              
              current_statement__ = 322;
              intstepi = 0;
              current_statement__ = 323;
              dtsmall = (dt / ceil((dt / maxtimestep)));
              current_statement__ = 406;
              while (logical_lt(intstepi, (dt - 1e-10))) {
                current_statement__ = 324;
                intstepi = (intstepi + dtsmall);
                {
                  std::vector<int> zeroint;
                  zeroint = std::vector<int>(1, std::numeric_limits<int>::min());
                  
                  current_statement__ = 326;
                  validate_non_negative_index("basestate", "nlatentpop",
                                              nlatentpop);
                  Eigen::Matrix<local_scalar_t__, 1, -1> basestate;
                  basestate = Eigen::Matrix<local_scalar_t__, 1, -1>(nlatentpop);
                  stan::math::fill(basestate, DUMMY_VAR__);
                  
                  current_statement__ = 327;
                  assign(basestate, nil_index_list(), state,
                    "assigning variable basestate");
                  current_statement__ = 328;
                  assign(zeroint, cons_list(index_uni(1), nil_index_list()),
                    0, "assigning variable zeroint");
                  {
                    std::vector<int> sym1__;
                    current_statement__ = 329;
                    assign(sym1__, nil_index_list(),
                      append_array(JAxfinite, zeroint),
                      "assigning variable sym1__");
                    current_statement__ = 329;
                    for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__);
                         ++sym2__) {
                      {
                        int statei;
                        current_statement__ = 329;
                        statei = sym1__[(sym2__ - 1)];
                        current_statement__ = 330;
                        assign(state, nil_index_list(), basestate,
                          "assigning variable state");
                        current_statement__ = 332;
                        if (logical_gt(statei, 0)) {
                          current_statement__ = 331;
                          assign(state,
                            cons_list(index_uni(statei), nil_index_list()),
                            (state[(statei - 1)] + Jstep),
                            "assigning variable state");
                        } 
                        current_statement__ = 333;
                        assign(statetf,
                          cons_list(
                            index_multi(whichequals(whenvecs[(2 - 1)], 0,
                                          0, pstream__)), nil_index_list()),
                          parvectform(
                            whichequals(whenvecs[(2 - 1)], 0, 0, pstream__),
                            state, 2, matsetup, matvalues, si, pstream__),
                          "assigning variable statetf");
                        current_statement__ = 335;
                        if ((primitive_value(statedep[(10 - 1)]) ||
                            primitive_value(whenmat[(10 - 1)][(2 - 1)]))) {
                          current_statement__ = 334;
                          assign(PARS, nil_index_list(),
                            mcalc(stan::model::deep_copy(PARS), indparams,
                              statetf, std::vector<int>{2}, 10, matsetup,
                              matvalues, si, pstream__),
                            "assigning variable PARS");
                        } 
                        current_statement__ = 337;
                        if ((primitive_value(statedep[(3 - 1)]) ||
                            primitive_value(whenmat[(3 - 1)][(2 - 1)]))) {
                          current_statement__ = 336;
                          assign(DRIFT, nil_index_list(),
                            mcalc(stan::model::deep_copy(DRIFT), indparams,
                              statetf, std::vector<int>{2}, 3, matsetup,
                              matvalues, si, pstream__),
                            "assigning variable DRIFT");
                        } 
                        current_statement__ = 339;
                        if ((primitive_value(statedep[(7 - 1)]) ||
                            primitive_value(whenmat[(7 - 1)][(2 - 1)]))) {
                          current_statement__ = 338;
                          assign(CINT, nil_index_list(),
                            mcalc(stan::model::deep_copy(CINT), indparams,
                              statetf, std::vector<int>{2}, 7, matsetup,
                              matvalues, si, pstream__),
                            "assigning variable CINT");
                        } 
                        current_statement__ = 344;
                        if (logical_gt(statei, 0)) {
                          current_statement__ = 340;
                          assign(JAx,
                            cons_list(index_min_max(1, nlatent),
                              cons_list(index_uni(statei), nil_index_list())),
                            add(
                              multiply(DRIFT,
                                transpose(
                                  rvalue(state,
                                    cons_list(index_min_max(1, nlatent),
                                      nil_index_list()), "state"))),
                              rvalue(CINT,
                                cons_list(index_omni(),
                                  cons_list(index_uni(1), nil_index_list())),
                                "CINT")), "assigning variable JAx");
                          current_statement__ = 342;
                          if (logical_gt(verbose, 1)) {
                            current_statement__ = 341;
                            if (pstream__) {
                              stan_print(pstream__, "JAx ");
                              stan_print(pstream__, JAx);
                              stan_print(pstream__, "\n");
                            }
                          } 
                        } 
                        current_statement__ = 352;
                        if ((primitive_value(logical_eq(statei, 0)) &&
                            primitive_value(stan::math::size(JAxfinite)))) {
                          current_statement__ = 345;
                          assign(base, nil_index_list(),
                            add(
                              multiply(DRIFT,
                                transpose(
                                  rvalue(state,
                                    cons_list(index_min_max(1, nlatent),
                                      nil_index_list()), "state"))),
                              rvalue(CINT,
                                cons_list(index_omni(),
                                  cons_list(index_uni(1), nil_index_list())),
                                "CINT")), "assigning variable base");
                          current_statement__ = 347;
                          if (logical_gt(verbose, 1)) {
                            current_statement__ = 346;
                            if (pstream__) {
                              stan_print(pstream__, "base = ");
                              stan_print(pstream__, base);
                              stan_print(pstream__, "    sjaxinit= ");
                              stan_print(pstream__, JAx);
                              stan_print(pstream__, "\n");
                            }
                          } 
                          current_statement__ = 348;
                          for (int sym1__ = 1;
                               sym1__ <= stan::math::size(JAxfinite);
                               ++sym1__) {
                            {
                              int fi;
                              current_statement__ = 348;
                              fi = JAxfinite[(sym1__ - 1)];
                              current_statement__ = 349;
                              assign(JAx,
                                cons_list(index_min_max(1, nlatent),
                                  cons_list(index_uni(fi), nil_index_list())),
                                subtract(
                                  stan::model::deep_copy(
                                    rvalue(JAx,
                                      cons_list(index_min_max(1, nlatent),
                                        cons_list(index_uni(fi),
                                          nil_index_list())), "JAx")), base),
                                "assigning variable JAx");
                              current_statement__ = 350;
                              assign(JAx,
                                cons_list(index_min_max(1, nlatent),
                                  cons_list(index_uni(fi), nil_index_list())),
                                divide(
                                  stan::model::deep_copy(
                                    rvalue(JAx,
                                      cons_list(index_min_max(1, nlatent),
                                        cons_list(index_uni(fi),
                                          nil_index_list())), "JAx")), Jstep),
                                "assigning variable JAx");
                            }}
                        } 
                      }}
                  }
                  current_statement__ = 354;
                  if (logical_gt(verbose, 1)) {
                    current_statement__ = 353;
                    if (pstream__) {
                      stan_print(pstream__, "JAx ");
                      stan_print(pstream__, JAx);
                      stan_print(pstream__, "\n");
                    }
                  } 
                }
                current_statement__ = 357;
                if ((primitive_value(statedep[(4 - 1)]) || primitive_value(
                    whenmat[(4 - 1)][(2 - 1)]))) {
                  current_statement__ = 356;
                  assign(DIFFUSION, nil_index_list(),
                    mcalc(stan::model::deep_copy(DIFFUSION), indparams,
                      statetf, std::vector<int>{2}, 4, matsetup, matvalues,
                      si, pstream__), "assigning variable DIFFUSION");
                } 
                current_statement__ = 359;
                if ((primitive_value(statedep[(52 - 1)]) || primitive_value(
                    whenmat[(52 - 1)][(2 - 1)]))) {
                  current_statement__ = 358;
                  assign(JAx, nil_index_list(),
                    mcalc(stan::model::deep_copy(JAx), indparams, statetf,
                      std::vector<int>{2}, 52, matsetup, matvalues,
                      si, pstream__), "assigning variable JAx");
                } 
                current_statement__ = 364;
                if ((primitive_value((primitive_value((primitive_value(
                    logical_eq(si, 0)) || primitive_value(
                    statedep[(4 - 1)]))) || primitive_value(
                    whenmat[(4 - 1)][(2 - 1)]))) || primitive_value(
                    (primitive_value(logical_eq(T0check, 1)) &&
                    primitive_value(whenmat[(4 - 1)][(5 - 1)]))))) {
                  current_statement__ = 360;
                  assign(DIFFUSIONcov,
                    cons_list(index_multi(derrind),
                      cons_list(index_multi(derrind), nil_index_list())),
                    sdcovsqrt2cov(
                      rvalue(DIFFUSION,
                        cons_list(index_multi(derrind),
                          cons_list(index_multi(derrind), nil_index_list())),
                        "DIFFUSION"), choleskymats, pstream__),
                    "assigning variable DIFFUSIONcov");
                  current_statement__ = 362;
                  if (logical_negation(continuoustime)) {
                    current_statement__ = 361;
                    assign(discreteDIFFUSION, nil_index_list(), DIFFUSIONcov,
                      "assigning variable discreteDIFFUSION");
                  } 
                } 
                current_statement__ = 394;
                if (continuoustime) {
                  current_statement__ = 375;
                  if ((primitive_value((primitive_value((primitive_value(
                      (primitive_value((primitive_value(logical_eq(si, 0)) ||
                      primitive_value(logical_eq(dtchange, 1)))) ||
                      primitive_value(statedep[(3 - 1)]))) ||
                      primitive_value(statedep[(52 - 1)]))) ||
                      primitive_value(whenmat[(3 - 1)][(2 - 1)]))) ||
                      primitive_value((primitive_value(
                      logical_eq(T0check, 1)) && primitive_value(
                      whenmat[(3 - 1)][(5 - 1)]))))) {
                    current_statement__ = 365;
                    assign(discreteDRIFT, nil_index_list(),
                      expm2(multiply(DRIFT, dtsmall), pstream__),
                      "assigning variable discreteDRIFT");
                    current_statement__ = 369;
                    if (logical_negation(JAxDRIFTequiv)) {
                      current_statement__ = 367;
                      assign(eJAx, nil_index_list(),
                        expm2(multiply(JAx, dtsmall), pstream__),
                        "assigning variable eJAx");
                    } else {
                      current_statement__ = 366;
                      assign(eJAx,
                        cons_list(index_min_max(1, nlatent),
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list())), discreteDRIFT,
                        "assigning variable eJAx");
                    }
                    current_statement__ = 372;
                    if ((primitive_value((primitive_value((primitive_value(
                        (primitive_value((primitive_value((primitive_value(
                        logical_eq(si, 0)) || primitive_value(
                        statedep[(3 - 1)]))) || primitive_value(
                        statedep[(4 - 1)]))) || primitive_value(
                        statedep[(52 - 1)]))) || primitive_value(
                        whenmat[(4 - 1)][(2 - 1)]))) || primitive_value(
                        whenmat[(3 - 1)][(2 - 1)]))) || primitive_value(
                        (primitive_value(logical_eq(T0check, 1)) &&
                        primitive_value((primitive_value(
                        whenmat[(3 - 1)][(5 - 1)]) || primitive_value(
                        whenmat[(4 - 1)][(5 - 1)]))))))) {
                      current_statement__ = 370;
                      assign(asymDIFFUSIONcov,
                        cons_list(index_multi(derrind),
                          cons_list(index_multi(derrind), nil_index_list())),
                        ksolve(
                          rvalue(JAx,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "JAx"),
                          rvalue(DIFFUSIONcov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "DIFFUSIONcov"),
                          verbose, pstream__),
                        "assigning variable asymDIFFUSIONcov");
                    } 
                    current_statement__ = 373;
                    assign(discreteDIFFUSION,
                      cons_list(index_multi(derrind),
                        cons_list(index_multi(derrind), nil_index_list())),
                      subtract(
                        rvalue(asymDIFFUSIONcov,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "asymDIFFUSIONcov"),
                        quad_form_sym(
                          rvalue(asymDIFFUSIONcov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "asymDIFFUSIONcov"),
                          transpose(
                            rvalue(eJAx,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "eJAx")))),
                      "assigning variable discreteDIFFUSION");
                  } 
                  current_statement__ = 379;
                  for (int li = 1; li <= nlatent; ++li) {
                    current_statement__ = 378;
                    if ((primitive_value(is_nan(state[(li - 1)])) ||
                        primitive_value(
                        is_nan(
                          sum(
                            rvalue(discreteDRIFT,
                              cons_list(index_uni(li),
                                cons_list(index_omni(), nil_index_list())),
                              "discreteDRIFT")))))) {
                      current_statement__ = 376;
                      if (pstream__) {
                        stan_print(pstream__, "Possible time step problem? Intervals too large? Try reduce maxtimestep");
                        stan_print(pstream__, "\n");
                      }
                    } }
                  current_statement__ = 380;
                  assign(state,
                    cons_list(index_min_max(1, nlatent), nil_index_list()),
                    multiply(
                      stan::model::deep_copy(
                        rvalue(state,
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list()), "state")),
                      transpose(discreteDRIFT)), "assigning variable state");
                  current_statement__ = 386;
                  if (stan::math::size(CINTnonzero)) {
                    current_statement__ = 383;
                    if ((primitive_value((primitive_value((primitive_value(
                        (primitive_value((primitive_value((primitive_value(
                        logical_eq(si, 0)) || primitive_value(
                        logical_eq(dtchange, 1)))) || primitive_value(
                        statedep[(3 - 1)]))) || primitive_value(
                        statedep[(7 - 1)]))) || primitive_value(
                        whenmat[(3 - 1)][(2 - 1)]))) || primitive_value(
                        whenmat[(7 - 1)][(2 - 1)]))) || primitive_value(
                        (primitive_value(logical_eq(T0check, 1)) &&
                        primitive_value((primitive_value(
                        whenmat[(7 - 1)][(5 - 1)]) || primitive_value(
                        whenmat[(3 - 1)][(5 - 1)]))))))) {
                      current_statement__ = 381;
                      assign(discreteCINT, nil_index_list(),
                        multiply(
                          mdivide_left(DRIFT,
                            subtract(discreteDRIFT,
                              rvalue(IIlatentpop,
                                cons_list(index_min_max(1, nlatent),
                                  cons_list(index_min_max(1, nlatent),
                                    nil_index_list())), "IIlatentpop"))),
                          rvalue(CINT,
                            cons_list(index_omni(),
                              cons_list(index_uni(1), nil_index_list())),
                            "CINT")), "assigning variable discreteCINT");
                    } 
                    current_statement__ = 384;
                    assign(state,
                      cons_list(index_min_max(1, nlatent), nil_index_list()),
                      add(
                        stan::model::deep_copy(
                          rvalue(state,
                            cons_list(index_min_max(1, nlatent),
                              nil_index_list()), "state")),
                        transpose(discreteCINT)), "assigning variable state");
                  } 
                  current_statement__ = 390;
                  if ((primitive_value(logical_eq(intoverstates, 1)) ||
                      primitive_value(logical_eq(dosmoother, 1)))) {
                    current_statement__ = 387;
                    assign(etacov, nil_index_list(),
                      quad_form_sym(
                        makesym(stan::model::deep_copy(etacov), verbose,
                          1, pstream__), transpose(eJAx)),
                      "assigning variable etacov");
                    current_statement__ = 388;
                    assign(etacov,
                      cons_list(index_multi(derrind),
                        cons_list(index_multi(derrind), nil_index_list())),
                      add(
                        stan::model::deep_copy(
                          rvalue(etacov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "etacov")),
                        rvalue(discreteDIFFUSION,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "discreteDIFFUSION")), "assigning variable etacov");
                  } 
                  current_statement__ = 392;
                  if ((primitive_value(logical_gte(intstepi, (dt - 1e-10)))
                      && primitive_value(dosmoother))) {
                    current_statement__ = 391;
                    assign(eJAxs,
                      cons_list(index_uni(rowi),
                        cons_list(index_omni(),
                          cons_list(index_omni(), nil_index_list()))),
                      expm2(multiply(JAx, dt), pstream__),
                      "assigning variable eJAxs");
                  } 
                } 
                current_statement__ = 404;
                if (logical_eq(continuoustime, 0)) {
                  current_statement__ = 396;
                  if (dosmoother) {
                    current_statement__ = 395;
                    assign(eJAxs,
                      cons_list(index_uni(rowi),
                        cons_list(index_omni(),
                          cons_list(index_omni(), nil_index_list()))), JAx,
                      "assigning variable eJAxs");
                  } 
                  current_statement__ = 400;
                  if ((primitive_value(logical_eq(intoverstates, 1)) ||
                      primitive_value(logical_eq(dosmoother, 1)))) {
                    current_statement__ = 397;
                    assign(etacov, nil_index_list(),
                      quad_form_sym(
                        makesym(stan::model::deep_copy(etacov), verbose,
                          1, pstream__), transpose(JAx)),
                      "assigning variable etacov");
                    current_statement__ = 398;
                    assign(etacov,
                      cons_list(index_multi(derrind),
                        cons_list(index_multi(derrind), nil_index_list())),
                      add(
                        stan::model::deep_copy(
                          rvalue(etacov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "etacov")),
                        rvalue(DIFFUSIONcov,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "DIFFUSIONcov")), "assigning variable etacov");
                  } 
                  current_statement__ = 401;
                  assign(state,
                    cons_list(index_min_max(1, nlatent), nil_index_list()),
                    multiply(
                      stan::model::deep_copy(
                        rvalue(state,
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list()), "state")), transpose(DRIFT)),
                    "assigning variable state");
                  current_statement__ = 402;
                  assign(state,
                    cons_list(index_multi(CINTnonzero), nil_index_list()),
                    add(
                      stan::model::deep_copy(
                        rvalue(state,
                          cons_list(index_multi(CINTnonzero),
                            nil_index_list()), "state")),
                      transpose(
                        rvalue(CINT,
                          cons_list(index_multi(CINTnonzero),
                            cons_list(index_uni(1), nil_index_list())),
                          "CINT"))), "assigning variable state");
                } 
              }
            } 
            current_statement__ = 425;
            if (logical_gt(ntdpred, 0)) {
              int nonzerotdpred;
              nonzerotdpred = std::numeric_limits<int>::min();
              
              current_statement__ = 409;
              nonzerotdpred = 0;
              current_statement__ = 412;
              for (int tdi = 1; tdi <= ntdpred; ++tdi) {
                current_statement__ = 411;
                if (logical_neq(tdpreds[(rowi - 1)][(tdi - 1)], 0.0)) {
                  current_statement__ = 410;
                  nonzerotdpred = 1;
                } }
              current_statement__ = 423;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  nonzerotdpred))) {
                current_statement__ = 413;
                assign(statetf,
                  cons_list(
                    index_multi(whichequals(whenvecs[(3 - 1)], 0,
                                  0, pstream__)), nil_index_list()),
                  parvectform(
                    whichequals(whenvecs[(3 - 1)], 0, 0, pstream__), state,
                    3, matsetup, matvalues, si, pstream__),
                  "assigning variable statetf");
                current_statement__ = 415;
                if ((primitive_value(statedep[(10 - 1)]) || primitive_value(
                    whenmat[(10 - 1)][(3 - 1)]))) {
                  current_statement__ = 414;
                  assign(PARS, nil_index_list(),
                    mcalc(stan::model::deep_copy(PARS), indparams, statetf,
                      std::vector<int>{3}, 10, matsetup, matvalues,
                      si, pstream__), "assigning variable PARS");
                } 
                current_statement__ = 417;
                if ((primitive_value(statedep[(9 - 1)]) || primitive_value(
                    whenmat[(9 - 1)][(3 - 1)]))) {
                  current_statement__ = 416;
                  assign(TDPREDEFFECT, nil_index_list(),
                    mcalc(stan::model::deep_copy(TDPREDEFFECT), indparams,
                      statetf, std::vector<int>{3}, 9, matsetup, matvalues,
                      si, pstream__), "assigning variable TDPREDEFFECT");
                } 
                current_statement__ = 419;
                if ((primitive_value(statedep[(53 - 1)]) || primitive_value(
                    whenmat[(53 - 1)][(3 - 1)]))) {
                  current_statement__ = 418;
                  assign(Jtd, nil_index_list(),
                    mcalc(stan::model::deep_copy(Jtd), indparams, statetf,
                      std::vector<int>{3}, 53, matsetup, matvalues,
                      si, pstream__), "assigning variable Jtd");
                } 
                current_statement__ = 420;
                assign(state,
                  cons_list(index_min_max(1, nlatent), nil_index_list()),
                  add(
                    stan::model::deep_copy(
                      rvalue(state,
                        cons_list(index_min_max(1, nlatent),
                          nil_index_list()), "state")),
                    transpose(multiply(TDPREDEFFECT, tdpreds[(rowi - 1)]))),
                  "assigning variable state");
                current_statement__ = 421;
                assign(etacov, nil_index_list(),
                  quad_form_sym(
                    makesym(stan::model::deep_copy(etacov), verbose,
                      1, pstream__), transpose(Jtd)),
                  "assigning variable etacov");
              } 
            } 
            current_statement__ = 431;
            if ((primitive_value(logical_gt(si, 0)) && primitive_value(
                logical_eq(intoverstates, 0)))) {
              current_statement__ = 427;
              if (logical_eq(T0check, 0)) {
                current_statement__ = 426;
                assign(state, nil_index_list(),
                  add(stan::model::deep_copy(state),
                    transpose(
                      multiply(cholesky_decompose(etacov),
                        rvalue(etaupdbasestates,
                          cons_list(
                            index_min_max((1 + ((rowi - 1) * nlatentpop)), 
                            (rowi * nlatentpop)), nil_index_list()),
                          "etaupdbasestates")))), "assigning variable state");
              } 
              current_statement__ = 429;
              if (logical_gt(T0check, 0)) {
                current_statement__ = 428;
                assign(state,
                  cons_list(index_multi(derrind), nil_index_list()),
                  add(
                    stan::model::deep_copy(
                      rvalue(state,
                        cons_list(index_multi(derrind), nil_index_list()),
                        "state")),
                    transpose(
                      multiply(
                        cholesky_decompose(
                          makesym(
                            rvalue(discreteDIFFUSION,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "discreteDIFFUSION"),
                            verbose, 1, pstream__)),
                        rvalue(
                          rvalue(etaupdbasestates,
  cons_list(
    index_min_max((1 + ((rowi - 1) * nlatentpop)), (nlatent +
                                                     ((rowi - 1) *
                                                       nlatentpop))),
    nil_index_list()), "etaupdbasestates"),
                          cons_list(index_multi(derrind), nil_index_list()),
                          "etaupdbasestates[(1 + ((rowi - 1) * nlatentpop)):(nlatent + ((rowi - 1) * nlatentpop))]")))),
                  "assigning variable state");
              } 
            } 
            current_statement__ = 435;
            if (logical_gt(verbose, 1)) {
              current_statement__ = 432;
              if (pstream__) {
                stan_print(pstream__, "etaprior = ");
                stan_print(pstream__, state);
                stan_print(pstream__, "\n");
              }
              current_statement__ = 433;
              if (pstream__) {
                stan_print(pstream__, "etapriorcov = ");
                stan_print(pstream__, etacov);
                stan_print(pstream__, "\n");
              }
            } 
            current_statement__ = 439;
            if (dosmoother) {
              current_statement__ = 436;
              assign(etacovb,
                cons_list(index_uni(1),
                  cons_list(index_uni(rowi), nil_index_list())), etacov,
                "assigning variable etacovb");
              current_statement__ = 437;
              assign(etab,
                cons_list(index_uni(1),
                  cons_list(index_uni(rowi), nil_index_list())),
                transpose(state), "assigning variable etab");
            } 
            current_statement__ = 479;
            if ((primitive_value((primitive_value(logical_eq(si, 0)) ||
                primitive_value(logical_gt(nobs_y[(rowi - 1)], 0)))) ||
                primitive_value(dosmoother))) {
              std::vector<int> zeroint;
              zeroint = std::vector<int>(1, std::numeric_limits<int>::min());
              
              current_statement__ = 441;
              validate_non_negative_index("basestate", "nlatentpop",
                                          nlatentpop);
              Eigen::Matrix<local_scalar_t__, 1, -1> basestate;
              basestate = Eigen::Matrix<local_scalar_t__, 1, -1>(nlatentpop);
              stan::math::fill(basestate, DUMMY_VAR__);
              
              current_statement__ = 442;
              assign(basestate, nil_index_list(), state,
                "assigning variable basestate");
              current_statement__ = 443;
              assign(zeroint, cons_list(index_uni(1), nil_index_list()), 0,
                "assigning variable zeroint");
              {
                std::vector<int> sym1__;
                current_statement__ = 444;
                assign(sym1__, nil_index_list(),
                  append_array(Jyfinite, zeroint),
                  "assigning variable sym1__");
                current_statement__ = 444;
                for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__);
                     ++sym2__) {
                  {
                    int statei;
                    current_statement__ = 444;
                    statei = sym1__[(sym2__ - 1)];
                    current_statement__ = 445;
                    assign(state, nil_index_list(), basestate,
                      "assigning variable state");
                    current_statement__ = 447;
                    if ((primitive_value(logical_gt(statei, 0)) &&
                        primitive_value(
                        logical_gt((dosmoother + intoverstates), 0)))) {
                      current_statement__ = 446;
                      assign(state,
                        cons_list(index_uni(statei), nil_index_list()),
                        (state[(statei - 1)] + Jstep),
                        "assigning variable state");
                    } 
                    current_statement__ = 448;
                    assign(statetf,
                      cons_list(
                        index_multi(whichequals(whenvecs[(4 - 1)], 0,
                                      0, pstream__)), nil_index_list()),
                      parvectform(
                        whichequals(whenvecs[(4 - 1)], 0, 0, pstream__),
                        state, 4, matsetup, matvalues, si, pstream__),
                      "assigning variable statetf");
                    current_statement__ = 450;
                    if ((primitive_value(statedep[(10 - 1)]) ||
                        primitive_value(whenmat[(10 - 1)][(4 - 1)]))) {
                      current_statement__ = 449;
                      assign(PARS, nil_index_list(),
                        mcalc(stan::model::deep_copy(PARS), indparams,
                          statetf, std::vector<int>{4}, 10, matsetup,
                          matvalues, si, pstream__),
                        "assigning variable PARS");
                    } 
                    current_statement__ = 452;
                    if ((primitive_value(statedep[(2 - 1)]) ||
                        primitive_value(whenmat[(2 - 1)][(4 - 1)]))) {
                      current_statement__ = 451;
                      assign(LAMBDA, nil_index_list(),
                        mcalc(stan::model::deep_copy(LAMBDA), indparams,
                          statetf, std::vector<int>{4}, 2, matsetup,
                          matvalues, si, pstream__),
                        "assigning variable LAMBDA");
                    } 
                    current_statement__ = 454;
                    if ((primitive_value(statedep[(5 - 1)]) ||
                        primitive_value(whenmat[(5 - 1)][(4 - 1)]))) {
                      current_statement__ = 453;
                      assign(MANIFESTVAR, nil_index_list(),
                        mcalc(stan::model::deep_copy(MANIFESTVAR), indparams,
                          statetf, std::vector<int>{4}, 5, matsetup,
                          matvalues, si, pstream__),
                        "assigning variable MANIFESTVAR");
                    } 
                    current_statement__ = 456;
                    if ((primitive_value(statedep[(6 - 1)]) ||
                        primitive_value(whenmat[(6 - 1)][(4 - 1)]))) {
                      current_statement__ = 455;
                      assign(MANIFESTMEANS, nil_index_list(),
                        mcalc(stan::model::deep_copy(MANIFESTMEANS),
                          indparams, statetf, std::vector<int>{4}, 6,
                          matsetup, matvalues, si, pstream__),
                        "assigning variable MANIFESTMEANS");
                    } 
                    current_statement__ = 458;
                    if ((primitive_value(statedep[(54 - 1)]) ||
                        primitive_value(whenmat[(54 - 1)][(4 - 1)]))) {
                      current_statement__ = 457;
                      assign(Jy, nil_index_list(),
                        mcalc(stan::model::deep_copy(Jy), indparams, statetf,
                          std::vector<int>{4}, 54, matsetup, matvalues,
                          si, pstream__), "assigning variable Jy");
                    } 
                    current_statement__ = 464;
                    if ((primitive_value(logical_gt(statei, 0)) &&
                        primitive_value(logical_gt(intoverstates, 0)))) {
                      current_statement__ = 459;
                      assign(Jy,
                        cons_list(index_multi(o),
                          cons_list(index_uni(statei), nil_index_list())),
                        add(
                          multiply(
                            rvalue(LAMBDA,
                              cons_list(index_multi(o), nil_index_list()),
                              "LAMBDA"),
                            transpose(
                              rvalue(state,
                                cons_list(index_min_max(1, nlatent),
                                  nil_index_list()), "state"))),
                          rvalue(MANIFESTMEANS,
                            cons_list(index_multi(o),
                              cons_list(index_uni(1), nil_index_list())),
                            "MANIFESTMEANS")), "assigning variable Jy");
                      current_statement__ = 460;
                      assign(Jy,
                        cons_list(index_multi(o1),
                          cons_list(index_uni(statei), nil_index_list())),
                        to_vector(
                          inv_logit(
                            to_array_1d(
                              stan::model::deep_copy(
                                rvalue(Jy,
                                  cons_list(index_multi(o1),
                                    cons_list(index_uni(statei),
                                      nil_index_list())), "Jy"))))),
                        "assigning variable Jy");
                      current_statement__ = 462;
                      if (logical_gt(verbose, 1)) {
                        current_statement__ = 461;
                        if (pstream__) {
                          stan_print(pstream__, "Jy ");
                          stan_print(pstream__, Jy);
                          stan_print(pstream__, "\n");
                        }
                      } 
                    } 
                    current_statement__ = 475;
                    if (logical_eq(statei, 0)) {
                      current_statement__ = 465;
                      assign(syprior,
                        cons_list(index_multi(o), nil_index_list()),
                        add(
                          multiply(
                            rvalue(LAMBDA,
                              cons_list(index_multi(o), nil_index_list()),
                              "LAMBDA"),
                            transpose(
                              rvalue(state,
                                cons_list(index_min_max(1, nlatent),
                                  nil_index_list()), "state"))),
                          rvalue(MANIFESTMEANS,
                            cons_list(index_multi(o),
                              cons_list(index_uni(1), nil_index_list())),
                            "MANIFESTMEANS")), "assigning variable syprior");
                      current_statement__ = 466;
                      assign(syprior,
                        cons_list(index_multi(o1), nil_index_list()),
                        to_vector(
                          inv_logit(
                            to_array_1d(
                              stan::model::deep_copy(
                                rvalue(syprior,
                                  cons_list(index_multi(o1),
                                    nil_index_list()), "syprior"))))),
                        "assigning variable syprior");
                      current_statement__ = 473;
                      if (stan::math::size(Jyfinite)) {
                        current_statement__ = 468;
                        if (logical_gt(verbose, 1)) {
                          current_statement__ = 467;
                          if (pstream__) {
                            stan_print(pstream__, "syprior = ");
                            stan_print(pstream__, syprior);
                            stan_print(pstream__, "    Jyinit= ");
                            stan_print(pstream__, Jy);
                            stan_print(pstream__, "\n");
                          }
                        } 
                        current_statement__ = 469;
                        for (int sym1__ = 1;
                             sym1__ <= stan::math::size(Jyfinite); ++sym1__) {
                          {
                            int fi;
                            current_statement__ = 469;
                            fi = Jyfinite[(sym1__ - 1)];
                            current_statement__ = 470;
                            assign(Jy,
                              cons_list(index_multi(o),
                                cons_list(index_uni(fi), nil_index_list())),
                              subtract(
                                stan::model::deep_copy(
                                  rvalue(Jy,
                                    cons_list(index_multi(o),
                                      cons_list(index_uni(fi),
                                        nil_index_list())), "Jy")),
                                rvalue(syprior,
                                  cons_list(index_multi(o), nil_index_list()),
                                  "syprior")), "assigning variable Jy");
                            current_statement__ = 471;
                            assign(Jy,
                              cons_list(index_multi(o),
                                cons_list(index_uni(fi), nil_index_list())),
                              divide(
                                stan::model::deep_copy(
                                  rvalue(Jy,
                                    cons_list(index_multi(o),
                                      cons_list(index_uni(fi),
                                        nil_index_list())), "Jy")), Jstep),
                              "assigning variable Jy");
                          }}
                      } 
                    } 
                  }}
              }
              current_statement__ = 477;
              if (logical_gt(verbose, 1)) {
                current_statement__ = 476;
                if (pstream__) {
                  stan_print(pstream__, "Jy ");
                  stan_print(pstream__, Jy);
                  stan_print(pstream__, "\n");
                }
              } 
            } 
            current_statement__ = 481;
            if ((primitive_value((primitive_value((primitive_value(
                logical_eq(si, 0)) || primitive_value(
                whenmat[(5 - 1)][(5 - 1)]))) || primitive_value(
                whenmat[(5 - 1)][(4 - 1)]))) || primitive_value(
                statedep[(5 - 1)]))) {
              current_statement__ = 480;
              assign(MANIFESTcov, nil_index_list(),
                sdcovsqrt2cov(MANIFESTVAR, choleskymats, pstream__),
                "assigning variable MANIFESTcov");
            } 
            current_statement__ = 522;
            if ((primitive_value(logical_gt(si, 0)) && primitive_value(
                (primitive_value(logical_gt(nobs_y[(rowi - 1)], 0)) ||
                primitive_value(dosmoother))))) {
              current_statement__ = 490;
              if ((primitive_value(logical_eq(intoverstates, 1)) ||
                  primitive_value(logical_eq(dosmoother, 1)))) {
                current_statement__ = 482;
                assign(ycov,
                  cons_list(index_multi(o),
                    cons_list(index_multi(o), nil_index_list())),
                  add(
                    quad_form_sym(makesym(etacov, verbose, 1, pstream__),
                      transpose(
                        rvalue(Jy,
                          cons_list(index_multi(o),
                            cons_list(index_omni(), nil_index_list())), "Jy"))),
                    rvalue(MANIFESTcov,
                      cons_list(index_multi(o),
                        cons_list(index_multi(o), nil_index_list())),
                      "MANIFESTcov")), "assigning variable ycov");
                current_statement__ = 488;
                for (int wi = 1; wi <= nmanifest; ++wi) {
                  current_statement__ = 484;
                  if ((primitive_value(logical_eq(manifesttype[(wi - 1)], 1))
                      && primitive_value((primitive_value(
                      logical_neq(Y[(rowi - 1)][(wi - 1)], 99999)) ||
                      primitive_value(logical_eq(dosmoother, 1)))))) {
                    current_statement__ = 483;
                    assign(ycov,
                      cons_list(index_uni(wi),
                        cons_list(index_uni(wi), nil_index_list())),
                      (rvalue(ycov,
                         cons_list(index_uni(wi),
                           cons_list(index_uni(wi), nil_index_list())),
                         "ycov") +
                        stan::math::fabs(
                          ((syprior[(wi - 1)] - 1) * syprior[(wi - 1)]))),
                      "assigning variable ycov");
                  } 
                  current_statement__ = 486;
                  if ((primitive_value(logical_eq(manifesttype[(wi - 1)], 2))
                      && primitive_value((primitive_value(
                      logical_neq(Y[(rowi - 1)][(wi - 1)], 99999)) ||
                      primitive_value(logical_eq(dosmoother, 1)))))) {
                    current_statement__ = 485;
                    assign(ycov,
                      cons_list(index_uni(wi),
                        cons_list(index_uni(wi), nil_index_list())),
                      (rvalue(ycov,
                         cons_list(index_uni(wi),
                           cons_list(index_uni(wi), nil_index_list())),
                         "ycov") +
                        square(
                          stan::math::fabs(
                            (syprior[(wi - 1)] -
                              stan::math::round(syprior[(wi - 1)]))))),
                      "assigning variable ycov");
                  } }
              } 
              current_statement__ = 492;
              if ((primitive_value(logical_eq(intoverstates, 0)) &&
                  primitive_value(logical_gt(ncont_y[(rowi - 1)], 0)))) {
                current_statement__ = 491;
                assign(ypriorcov_sqrt,
                  cons_list(index_multi(o),
                    cons_list(index_multi(o), nil_index_list())),
                  cholesky_decompose(
                    makesym(
                      rvalue(MANIFESTcov,
                        cons_list(index_multi(o),
                          cons_list(index_multi(o), nil_index_list())),
                        "MANIFESTcov"), verbose, 1, pstream__)),
                  "assigning variable ypriorcov_sqrt");
              } 
              current_statement__ = 493;
              assign(err, cons_list(index_multi(od), nil_index_list()),
                subtract(
                  rvalue(Y,
                    cons_list(index_uni(rowi),
                      cons_list(index_multi(od), nil_index_list())), "Y"),
                  rvalue(syprior,
                    cons_list(index_multi(od), nil_index_list()), "syprior")),
                "assigning variable err");
              current_statement__ = 500;
              if ((primitive_value(logical_eq(intoverstates, 1)) &&
                  primitive_value(logical_gt(stan::math::size(od), 0)))) {
                current_statement__ = 495;
                if (logical_gt(verbose, 1)) {
                  current_statement__ = 494;
                  if (pstream__) {
                    stan_print(pstream__, "before K rowi =");
                    stan_print(pstream__, rowi);
                    stan_print(pstream__, "  si =");
                    stan_print(pstream__, si);
                    stan_print(pstream__, "  state =");
                    stan_print(pstream__, state);
                    stan_print(pstream__, "  statetf = ");
                    stan_print(pstream__, statetf);
                    stan_print(pstream__, "  etacov ");
                    stan_print(pstream__, etacov);
                    stan_print(pstream__, " indparams = ");
                    stan_print(pstream__, indparams);
                    stan_print(pstream__, "  syprior[o] =");
                    stan_print(pstream__, rvalue(syprior,
                                            cons_list(index_multi(o),
                                              nil_index_list()), "syprior"));
                    stan_print(pstream__, "  ycov[o,o] ");
                    stan_print(pstream__, rvalue(ycov,
                                            cons_list(index_multi(o),
                                              cons_list(index_multi(o),
                                                nil_index_list())), "ycov"));
                    stan_print(pstream__, "  PARS = ");
                    stan_print(pstream__, PARS);
                    stan_print(pstream__, "  DRIFT =");
                    stan_print(pstream__, DRIFT);
                    stan_print(pstream__, " DIFFUSION =");
                    stan_print(pstream__, DIFFUSION);
                    stan_print(pstream__, " CINT =");
                    stan_print(pstream__, CINT);
                    stan_print(pstream__, "  discreteCINT = ");
                    stan_print(pstream__, discreteCINT);
                    stan_print(pstream__, "  MANIFESTcov ");
                    stan_print(pstream__, MANIFESTcov);
                    stan_print(pstream__, "  MANIFESTMEANS ");
                    stan_print(pstream__, MANIFESTMEANS);
                    stan_print(pstream__, "  T0cov");
                    stan_print(pstream__, T0cov);
                    stan_print(pstream__, " T0MEANS ");
                    stan_print(pstream__, T0MEANS);
                    stan_print(pstream__, "LAMBDA = ");
                    stan_print(pstream__, LAMBDA);
                    stan_print(pstream__, "  Jy = ");
                    stan_print(pstream__, Jy);
                    stan_print(pstream__, " discreteDRIFT = ");
                    stan_print(pstream__, discreteDRIFT);
                    stan_print(pstream__, "  discreteDIFFUSION ");
                    stan_print(pstream__, discreteDIFFUSION);
                    stan_print(pstream__, "  asymDIFFUSIONcov ");
                    stan_print(pstream__, asymDIFFUSIONcov);
                    stan_print(pstream__, " DIFFUSIONcov = ");
                    stan_print(pstream__, DIFFUSIONcov);
                    stan_print(pstream__, " eJAx = ");
                    stan_print(pstream__, eJAx);
                    stan_print(pstream__, "  rawpopsd ");
                    stan_print(pstream__, rawpopsd);
                    stan_print(pstream__, "  rawpopsdbase ");
                    stan_print(pstream__, rawpopsdbase);
                    stan_print(pstream__, "  rawpopmeans ");
                    stan_print(pstream__, rawpopmeans);
                    stan_print(pstream__, "\n");
                  }
                } 
                current_statement__ = 496;
                assign(K,
                  cons_list(index_omni(),
                    cons_list(index_multi(od), nil_index_list())),
                  mdivide_right_spd(
                    multiply(etacov,
                      transpose(
                        rvalue(Jy,
                          cons_list(index_multi(od),
                            cons_list(index_omni(), nil_index_list())), "Jy"))),
                    makesym(
                      rvalue(ycov,
                        cons_list(index_multi(od),
                          cons_list(index_multi(od), nil_index_list())),
                        "ycov"), verbose, 1, pstream__)),
                  "assigning variable K");
                current_statement__ = 497;
                assign(etacov, nil_index_list(),
                  add(stan::model::deep_copy(etacov),
                    multiply(
                      multiply(
                        minus(
                          rvalue(K,
                            cons_list(index_omni(),
                              cons_list(index_multi(od), nil_index_list())),
                            "K")),
                        rvalue(Jy,
                          cons_list(index_multi(od),
                            cons_list(index_omni(), nil_index_list())), "Jy")),
                      stan::model::deep_copy(etacov))),
                  "assigning variable etacov");
                current_statement__ = 498;
                assign(state, nil_index_list(),
                  add(stan::model::deep_copy(state),
                    transpose(
                      multiply(
                        rvalue(K,
                          cons_list(index_omni(),
                            cons_list(index_multi(od), nil_index_list())),
                          "K"),
                        rvalue(err,
                          cons_list(index_multi(od), nil_index_list()),
                          "err")))), "assigning variable state");
              } 
              current_statement__ = 509;
              if (logical_eq(dosmoother, 1)) {
                current_statement__ = 501;
                assign(yb,
                  cons_list(index_uni(1),
                    cons_list(index_uni(rowi), nil_index_list())),
                  rvalue(syprior,
                    cons_list(index_multi(o), nil_index_list()), "syprior"),
                  "assigning variable yb");
                current_statement__ = 502;
                assign(etab,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())),
                  transpose(state), "assigning variable etab");
                current_statement__ = 503;
                assign(ycovb,
                  cons_list(index_uni(1),
                    cons_list(index_uni(rowi), nil_index_list())), ycov,
                  "assigning variable ycovb");
                current_statement__ = 504;
                assign(etacovb,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())), etacov,
                  "assigning variable etacovb");
                current_statement__ = 505;
                assign(ycovb,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())),
                  add(
                    quad_form_sym(makesym(etacov, verbose, 1, pstream__),
                      transpose(Jy)), MANIFESTcov),
                  "assigning variable ycovb");
                current_statement__ = 506;
                assign(yb,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())),
                  add(
                    rvalue(MANIFESTMEANS,
                      cons_list(index_multi(o),
                        cons_list(index_uni(1), nil_index_list())),
                      "MANIFESTMEANS"),
                    multiply(
                      rvalue(LAMBDA,
                        cons_list(index_multi(o),
                          cons_list(index_omni(), nil_index_list())),
                        "LAMBDA"),
                      transpose(
                        rvalue(state,
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list()), "state")))),
                  "assigning variable yb");
                current_statement__ = 507;
                assign(Jys,
                  cons_list(index_uni(rowi),
                    cons_list(index_omni(),
                      cons_list(index_omni(), nil_index_list()))), Jy,
                  "assigning variable Jys");
              } 
              current_statement__ = 511;
              if (logical_gt(verbose, 1)) {
                current_statement__ = 510;
                if (pstream__) {
                  stan_print(pstream__, " After K rowi =");
                  stan_print(pstream__, rowi);
                  stan_print(pstream__, "  si =");
                  stan_print(pstream__, si);
                  stan_print(pstream__, "  state =");
                  stan_print(pstream__, state);
                  stan_print(pstream__, "  etacov ");
                  stan_print(pstream__, etacov);
                  stan_print(pstream__, "  K[,o] ");
                  stan_print(pstream__, rvalue(K,
                                          cons_list(index_omni(),
                                            cons_list(index_multi(o),
                                              nil_index_list())), "K"));
                  stan_print(pstream__, "\n");
                }
              } 
              current_statement__ = 513;
              if (logical_gt(nbinary_y[(rowi - 1)], 0)) {
                current_statement__ = 512;
                assign(llrow, cons_list(index_uni(rowi), nil_index_list()),
                  (llrow[(rowi - 1)] +
                    sum(
                      stan::math::log(
                        add(
                          add(1e-10,
                            elt_multiply(
                              rvalue(Y,
                                cons_list(index_uni(rowi),
                                  cons_list(index_multi(o1d),
                                    nil_index_list())), "Y"),
                              rvalue(syprior,
                                cons_list(index_multi(o1d), nil_index_list()),
                                "syprior"))),
                          elt_multiply(
                            subtract(1,
                              rvalue(Y,
                                cons_list(index_uni(rowi),
                                  cons_list(index_multi(o1d),
                                    nil_index_list())), "Y")),
                            subtract(1,
                              rvalue(syprior,
                                cons_list(index_multi(o1d), nil_index_list()),
                                "syprior"))))))), "assigning variable llrow");
              } 
              current_statement__ = 518;
              if ((primitive_value(logical_gt(stan::math::size(o0d), 0)) &&
                  primitive_value((primitive_value(
                  logical_eq(llsinglerow, 0)) || primitive_value(
                  logical_eq(llsinglerow, rowi)))))) {
                current_statement__ = 515;
                if (logical_eq(intoverstates, 1)) {
                  current_statement__ = 514;
                  assign(ypriorcov_sqrt,
                    cons_list(index_multi(o0d),
                      cons_list(index_multi(o0d), nil_index_list())),
                    cholesky_decompose(
                      rvalue(ycov,
                        cons_list(index_multi(o0d),
                          cons_list(index_multi(o0d), nil_index_list())),
                        "ycov")), "assigning variable ypriorcov_sqrt");
                } 
                current_statement__ = 516;
                assign(llrow, cons_list(index_uni(rowi), nil_index_list()),
                  (llrow[(rowi - 1)] +
                    multi_normal_cholesky_lpdf<false>(
                      rvalue(Y,
                        cons_list(index_uni(rowi),
                          cons_list(index_multi(o0d), nil_index_list())),
                        "Y"),
                      rvalue(syprior,
                        cons_list(index_multi(o0d), nil_index_list()),
                        "syprior"),
                      rvalue(ypriorcov_sqrt,
                        cons_list(index_multi(o0d),
                          cons_list(index_multi(o0d), nil_index_list())),
                        "ypriorcov_sqrt"))), "assigning variable llrow");
              } 
              current_statement__ = 520;
              if (logical_gt(verbose, 1)) {
                current_statement__ = 519;
                if (pstream__) {
                  stan_print(pstream__, llrow[(rowi - 1)]);
                  stan_print(pstream__, "\n");
                }
              } 
            } 
            current_statement__ = 528;
            if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                (primitive_value(
                logical_gt(
                  (((sum(
                       rvalue(whenmat,
                         cons_list(index_uni(3),
                           cons_list(index_omni(), nil_index_list())),
                         "whenmat")) +
                      sum(
                        rvalue(whenmat,
                          cons_list(index_uni(7),
                            cons_list(index_omni(), nil_index_list())),
                          "whenmat"))) + statedep[(3 - 1)]) +
                    statedep[(7 - 1)]), 0)) && primitive_value(
                savesubjectmatrices))))) {
              current_statement__ = 524;
              if (logical_eq(continuoustime, 1)) {
                current_statement__ = 523;
                assign(asymCINT,
                  cons_list(index_omni(),
                    cons_list(index_uni(1), nil_index_list())),
                  mdivide_left(
                    minus(
                      rvalue(DRIFT,
                        cons_list(index_min_max(1, nlatent),
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list())), "DRIFT")),
                    rvalue(CINT,
                      cons_list(index_omni(),
                        cons_list(index_uni(1), nil_index_list())), "CINT")),
                  "assigning variable asymCINT");
              } 
              current_statement__ = 526;
              if (logical_eq(continuoustime, 0)) {
                current_statement__ = 525;
                assign(asymCINT,
                  cons_list(index_omni(),
                    cons_list(index_uni(1), nil_index_list())),
                  mdivide_left(
                    add_diag(
                      minus(
                        rvalue(DRIFT,
                          cons_list(index_min_max(1, nlatent),
                            cons_list(index_min_max(1, nlatent),
                              nil_index_list())), "DRIFT")), 1),
                    rvalue(CINT,
                      cons_list(index_omni(),
                        cons_list(index_uni(1), nil_index_list())), "CINT")),
                  "assigning variable asymCINT");
              } 
            } 
            current_statement__ = 533;
            if (logical_negation(continuoustime)) {
              current_statement__ = 531;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  (primitive_value(
                  logical_gt(
                    (((sum(
                         rvalue(whenmat,
                           cons_list(index_uni(3),
                             cons_list(index_omni(), nil_index_list())),
                           "whenmat")) +
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(4),
                              cons_list(index_omni(), nil_index_list())),
                            "whenmat"))) + statedep[(3 - 1)]) +
                      statedep[(4 - 1)]), 0)) && primitive_value(
                  savesubjectmatrices))))) {
                current_statement__ = 529;
                assign(asymDIFFUSIONcov,
                  cons_list(index_multi(derrind),
                    cons_list(index_multi(derrind), nil_index_list())),
                  to_matrix(
                    mdivide_left(
                      add_diag(
                        minus(
                          sqkron_prod(
                            rvalue(JAx,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "JAx"),
                            rvalue(JAx,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "JAx"), pstream__)), 1),
                      to_vector(
                        rvalue(DIFFUSIONcov,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "DIFFUSIONcov"))), ndiffusion, ndiffusion),
                  "assigning variable asymDIFFUSIONcov");
              } 
            } 
            current_statement__ = 550;
            if (logical_eq(si, 0)) {
              current_statement__ = 534;
              assign(pop_PARS, nil_index_list(), PARS,
                "assigning variable pop_PARS");
              current_statement__ = 535;
              assign(pop_T0MEANS, nil_index_list(), T0MEANS,
                "assigning variable pop_T0MEANS");
              current_statement__ = 536;
              assign(pop_LAMBDA, nil_index_list(), LAMBDA,
                "assigning variable pop_LAMBDA");
              current_statement__ = 537;
              assign(pop_DRIFT, nil_index_list(), DRIFT,
                "assigning variable pop_DRIFT");
              current_statement__ = 538;
              assign(pop_DIFFUSION, nil_index_list(), DIFFUSION,
                "assigning variable pop_DIFFUSION");
              current_statement__ = 539;
              assign(pop_MANIFESTVAR, nil_index_list(), MANIFESTVAR,
                "assigning variable pop_MANIFESTVAR");
              current_statement__ = 540;
              assign(pop_MANIFESTMEANS, nil_index_list(), MANIFESTMEANS,
                "assigning variable pop_MANIFESTMEANS");
              current_statement__ = 541;
              assign(pop_CINT, nil_index_list(), CINT,
                "assigning variable pop_CINT");
              current_statement__ = 542;
              assign(pop_T0VAR, nil_index_list(), T0VAR,
                "assigning variable pop_T0VAR");
              current_statement__ = 543;
              assign(pop_TDPREDEFFECT, nil_index_list(), TDPREDEFFECT,
                "assigning variable pop_TDPREDEFFECT");
              current_statement__ = 544;
              assign(pop_DIFFUSIONcov, nil_index_list(), DIFFUSIONcov,
                "assigning variable pop_DIFFUSIONcov");
              current_statement__ = 545;
              assign(pop_MANIFESTcov, nil_index_list(), MANIFESTcov,
                "assigning variable pop_MANIFESTcov");
              current_statement__ = 546;
              assign(pop_T0cov, nil_index_list(), T0cov,
                "assigning variable pop_T0cov");
              current_statement__ = 547;
              assign(pop_asymCINT, nil_index_list(), asymCINT,
                "assigning variable pop_asymCINT");
              current_statement__ = 548;
              assign(pop_asymDIFFUSIONcov, nil_index_list(),
                asymDIFFUSIONcov, "assigning variable pop_asymDIFFUSIONcov");
            } 
            current_statement__ = 608;
            if ((primitive_value((primitive_value(logical_gt(si, 0)) &&
                primitive_value(dosmoother))) && primitive_value(
                (primitive_value(logical_eq(rowi, ndatapoints)) ||
                primitive_value(
                logical_neq(subject[((rowi + 1) - 1)], subject[(rowi - 1)])))))) {
              int sri;
              sri = std::numeric_limits<int>::min();
              
              current_statement__ = 551;
              sri = rowi;
              current_statement__ = 606;
              while ((primitive_value(logical_gt(sri, 0)) && primitive_value(
                     logical_eq(subject[(sri - 1)], si)))) {
                current_statement__ = 566;
                if (logical_eq(sri, rowi)) {
                  current_statement__ = 561;
                  assign(etab,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(etab[(2 - 1)][(sri - 1)]),
                    "assigning variable etab");
                  current_statement__ = 562;
                  assign(yb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(yb[(2 - 1)][(sri - 1)]),
                    "assigning variable yb");
                  current_statement__ = 563;
                  assign(etacovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(etacovb[(2 - 1)][(sri - 1)]),
                    "assigning variable etacovb");
                  current_statement__ = 564;
                  assign(ycovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(ycovb[(2 - 1)][(sri - 1)]),
                    "assigning variable ycovb");
                } else {
                  current_statement__ = 552;
                  validate_non_negative_index("smoother", "nlatentpop",
                                              nlatentpop);
                  current_statement__ = 553;
                  validate_non_negative_index("smoother", "nlatentpop",
                                              nlatentpop);
                  Eigen::Matrix<local_scalar_t__, -1, -1> smoother;
                  smoother = Eigen::Matrix<local_scalar_t__, -1, -1>(nlatentpop, nlatentpop);
                  stan::math::fill(smoother, DUMMY_VAR__);
                  
                  current_statement__ = 555;
                  assign(smoother, nil_index_list(),
                    mdivide_right(
                      multiply(etacovb[(2 - 1)][(sri - 1)],
                        transpose(
                          rvalue(eJAxs,
                            cons_list(index_uni((sri + 1)),
                              cons_list(index_omni(),
                                cons_list(index_omni(), nil_index_list()))),
                            "eJAxs"))),
                      makesym(etacovb[(1 - 1)][((sri + 1) - 1)], verbose,
                        1, pstream__)), "assigning variable smoother");
                  current_statement__ = 556;
                  assign(etab,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri),
                        cons_list(index_omni(), nil_index_list()))),
                    add(
                      stan::model::deep_copy(
                        rvalue(etab,
                          cons_list(index_uni(2),
                            cons_list(index_uni(sri),
                              cons_list(index_omni(), nil_index_list()))),
                          "etab")),
                      multiply(smoother,
                        subtract(
                          stan::model::deep_copy(
                            rvalue(etab,
                              cons_list(index_uni(3),
                                cons_list(index_uni((sri + 1)),
                                  cons_list(index_omni(), nil_index_list()))),
                              "etab")),
                          stan::model::deep_copy(
                            rvalue(etab,
                              cons_list(index_uni(1),
                                cons_list(index_uni((sri + 1)),
                                  cons_list(index_omni(), nil_index_list()))),
                              "etab"))))), "assigning variable etab");
                  current_statement__ = 557;
                  assign(etacovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    add(stan::model::deep_copy(etacovb[(2 - 1)][(sri - 1)]),
                      multiply(
                        multiply(smoother,
                          subtract(
                            stan::model::deep_copy(
                              etacovb[(3 - 1)][((sri + 1) - 1)]),
                            stan::model::deep_copy(
                              etacovb[(1 - 1)][((sri + 1) - 1)]))),
                        transpose(smoother))), "assigning variable etacovb");
                  current_statement__ = 558;
                  assign(yb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri),
                        cons_list(index_omni(), nil_index_list()))),
                    add(
                      stan::model::deep_copy(
                        rvalue(yb,
                          cons_list(index_uni(2),
                            cons_list(index_uni(sri),
                              cons_list(index_omni(), nil_index_list()))),
                          "yb")),
                      multiply(
                        rvalue(Jys,
                          cons_list(index_uni(sri),
                            cons_list(index_omni(),
                              cons_list(index_omni(), nil_index_list()))),
                          "Jys"),
                        subtract(
                          rvalue(etab,
                            cons_list(index_uni(3),
                              cons_list(index_uni(sri),
                                cons_list(index_omni(), nil_index_list()))),
                            "etab"),
                          rvalue(etab,
                            cons_list(index_uni(2),
                              cons_list(index_uni(sri),
                                cons_list(index_omni(), nil_index_list()))),
                            "etab")))), "assigning variable yb");
                  current_statement__ = 559;
                  assign(ycovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    add(stan::model::deep_copy(ycovb[(2 - 1)][(sri - 1)]),
                      multiply(
                        multiply(
                          rvalue(Jys,
                            cons_list(index_uni(sri),
                              cons_list(index_omni(),
                                cons_list(index_omni(), nil_index_list()))),
                            "Jys"),
                          subtract(etacovb[(3 - 1)][(sri - 1)],
                            etacovb[(2 - 1)][(sri - 1)])),
                        transpose(
                          rvalue(Jys,
                            cons_list(index_uni(sri),
                              cons_list(index_omni(),
                                cons_list(index_omni(), nil_index_list()))),
                            "Jys")))), "assigning variable ycovb");
                }
                current_statement__ = 567;
                assign(state, nil_index_list(),
                  transpose(
                    rvalue(etab,
                      cons_list(index_uni(3),
                        cons_list(index_uni(sri),
                          cons_list(index_omni(), nil_index_list()))),
                      "etab")), "assigning variable state");
                current_statement__ = 568;
                sri = (sri + -1);
                current_statement__ = 570;
                while ((primitive_value(logical_gt(sri, 0)) &&
                       primitive_value(
                       logical_eq(dokalmanrows[(sri - 1)], 0)))) {
                  current_statement__ = 569;
                  sri = (sri + -1);
                }
                current_statement__ = 604;
                if ((primitive_value(savesubjectmatrices) && primitive_value(
                    (sri ?
                       logical_neq(subject[(sri - 1)],
                         subject[((sri + 1) - 1)]) : 1)))) {
                  current_statement__ = 572;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(10),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(10 - 1)]))) {
                    current_statement__ = 571;
                    assign(subj_PARS,
                      cons_list(index_uni(si), nil_index_list()), PARS,
                      "assigning variable subj_PARS");
                  } 
                  current_statement__ = 574;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(1),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(1 - 1)]))) {
                    current_statement__ = 573;
                    assign(subj_T0MEANS,
                      cons_list(index_uni(si), nil_index_list()), T0MEANS,
                      "assigning variable subj_T0MEANS");
                  } 
                  current_statement__ = 576;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(2),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(2 - 1)]))) {
                    current_statement__ = 575;
                    assign(subj_LAMBDA,
                      cons_list(index_uni(si), nil_index_list()), LAMBDA,
                      "assigning variable subj_LAMBDA");
                  } 
                  current_statement__ = 578;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(3),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(3 - 1)]))) {
                    current_statement__ = 577;
                    assign(subj_DRIFT,
                      cons_list(index_uni(si), nil_index_list()), DRIFT,
                      "assigning variable subj_DRIFT");
                  } 
                  current_statement__ = 580;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(4),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(4 - 1)]))) {
                    current_statement__ = 579;
                    assign(subj_DIFFUSION,
                      cons_list(index_uni(si), nil_index_list()), DIFFUSION,
                      "assigning variable subj_DIFFUSION");
                  } 
                  current_statement__ = 582;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(5),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(5 - 1)]))) {
                    current_statement__ = 581;
                    assign(subj_MANIFESTVAR,
                      cons_list(index_uni(si), nil_index_list()),
                      MANIFESTVAR, "assigning variable subj_MANIFESTVAR");
                  } 
                  current_statement__ = 584;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(6),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(6 - 1)]))) {
                    current_statement__ = 583;
                    assign(subj_MANIFESTMEANS,
                      cons_list(index_uni(si), nil_index_list()),
                      MANIFESTMEANS, "assigning variable subj_MANIFESTMEANS");
                  } 
                  current_statement__ = 586;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(7),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(7 - 1)]))) {
                    current_statement__ = 585;
                    assign(subj_CINT,
                      cons_list(index_uni(si), nil_index_list()), CINT,
                      "assigning variable subj_CINT");
                  } 
                  current_statement__ = 588;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(8),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(8 - 1)]))) {
                    current_statement__ = 587;
                    assign(subj_T0VAR,
                      cons_list(index_uni(si), nil_index_list()), T0VAR,
                      "assigning variable subj_T0VAR");
                  } 
                  current_statement__ = 590;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(9),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(9 - 1)]))) {
                    current_statement__ = 589;
                    assign(subj_TDPREDEFFECT,
                      cons_list(index_uni(si), nil_index_list()),
                      TDPREDEFFECT, "assigning variable subj_TDPREDEFFECT");
                  } 
                  current_statement__ = 592;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(31),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(31 - 1)]))) {
                    current_statement__ = 591;
                    assign(subj_DIFFUSIONcov,
                      cons_list(index_uni(si), nil_index_list()),
                      DIFFUSIONcov, "assigning variable subj_DIFFUSIONcov");
                  } 
                  current_statement__ = 594;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(32),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(32 - 1)]))) {
                    current_statement__ = 593;
                    assign(subj_MANIFESTcov,
                      cons_list(index_uni(si), nil_index_list()),
                      MANIFESTcov, "assigning variable subj_MANIFESTcov");
                  } 
                  current_statement__ = 596;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(33),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(33 - 1)]))) {
                    current_statement__ = 595;
                    assign(subj_T0cov,
                      cons_list(index_uni(si), nil_index_list()), T0cov,
                      "assigning variable subj_T0cov");
                  } 
                  current_statement__ = 598;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(21),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(21 - 1)]))) {
                    current_statement__ = 597;
                    assign(subj_asymCINT,
                      cons_list(index_uni(si), nil_index_list()), asymCINT,
                      "assigning variable subj_asymCINT");
                  } 
                  current_statement__ = 600;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(22),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(22 - 1)]))) {
                    current_statement__ = 599;
                    assign(subj_asymDIFFUSIONcov,
                      cons_list(index_uni(si), nil_index_list()),
                      asymDIFFUSIONcov,
                      "assigning variable subj_asymDIFFUSIONcov");
                  } 
                  current_statement__ = 602;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(1),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(1 - 1)]))) {
                    current_statement__ = 601;
                    assign(subj_T0MEANS,
                      cons_list(index_uni(si),
                        cons_list(index_omni(),
                          cons_list(index_uni(1), nil_index_list()))),
                      transpose(state), "assigning variable subj_T0MEANS");
                  } 
                } 
              }
            } 
          } 
          current_statement__ = 611;
          prevrow = rowi;}
        current_statement__ = 619;
        if (savescores) {
          current_statement__ = 614;
          assign(ya, nil_index_list(), yb, "assigning variable ya");
          current_statement__ = 615;
          assign(ycova, nil_index_list(), ycovb, "assigning variable ycova");
          current_statement__ = 616;
          assign(etaa, nil_index_list(), etab, "assigning variable etaa");
          current_statement__ = 617;
          assign(etacova, nil_index_list(), etacovb,
            "assigning variable etacova");
        } 
        current_statement__ = 620;
        ll = (ll + sum(llrow));
      }
      {
        local_scalar_t__ priormod2;
        priormod2 = DUMMY_VAR__;
        
        current_statement__ = 676;
        priormod2 = (priormod / nsubsets);
        current_statement__ = 678;
        if ((primitive_value(logical_eq(intoverpop, 0)) && primitive_value(
            logical_gt(nindvarying, 0)))) {
          current_statement__ = 677;
          lp_accum__.add(
            multi_normal_cholesky_lpdf<false>(baseindparams,
              rep_vector(0, nindvarying),
              rvalue(IIlatentpop,
                cons_list(index_min_max(1, nindvarying),
                  cons_list(index_min_max(1, nindvarying), nil_index_list())),
                "IIlatentpop")));
        } 
        current_statement__ = 686;
        if (logical_gt(ntipred, 0)) {
          current_statement__ = 680;
          if ((primitive_value(logical_eq(nopriors, 0)) && primitive_value(
              logical_eq(laplacetipreds, 0)))) {
            current_statement__ = 679;
            lp_accum__.add(
              (priormod2 *
                normal_lpdf<false>(
                  divide(tipredeffectparams, tipredeffectscale), 0, 1)));
          } 
          current_statement__ = 683;
          if ((primitive_value(logical_eq(nopriors, 0)) && primitive_value(
              logical_eq(laplacetipreds, 1)))) {
            current_statement__ = 682;
            for (int i = 1; i <= ntipredeffects; ++i) {
              current_statement__ = 681;
              lp_accum__.add(
                (priormod2 *
                  double_exponential_lpdf<false>(
                    (pow(stan::math::fabs(tipredeffectparams[(i - 1)]),
                       (1 +
                         (.1 /
                           (pow((tipredeffectparams[(i - 1)] * 100), 2) + .1))))
                      / tipredeffectscale), 0, 1)));}
          } 
          current_statement__ = 684;
          lp_accum__.add(
            normal_lpdf<false>(tipredsimputed, 0, tipredsimputedscale));
        } 
        current_statement__ = 692;
        if (logical_eq(nopriors, 0)) {
          current_statement__ = 690;
          for (int i = 1; i <= nparams; ++i) {
            current_statement__ = 688;
            if (logical_eq(laplaceprior[(i - 1)], 1)) {
              current_statement__ = 687;
              lp_accum__.add(
                (priormod2 *
                  double_exponential_lpdf<false>(
                    pow(stan::math::fabs(rawpopmeans[(i - 1)]),
                      (1 +
                        (.1 / (pow((rawpopmeans[(i - 1)] * 100), 2) + .1)))),
                    0, 1)));
            } }
        } 
        current_statement__ = 703;
        if ((primitive_value(logical_eq(nopriors, 0)) && primitive_value(
            logical_negation(laplaceprioronly)))) {
          current_statement__ = 696;
          for (int i = 1; i <= nparams; ++i) {
            current_statement__ = 694;
            if (logical_eq(laplaceprior[(i - 1)], 0)) {
              current_statement__ = 693;
              lp_accum__.add(
                (priormod2 * normal_lpdf<false>(rawpopmeans[(i - 1)], 0, 1)));
            } }
          current_statement__ = 701;
          if (logical_gt(nindvarying, 0)) {
            current_statement__ = 698;
            if (logical_gt(nindvarying, 1)) {
              current_statement__ = 697;
              lp_accum__.add((priormod2 * normal_lpdf<false>(sqrtpcov, 0, 1)));
            } 
            current_statement__ = 699;
            lp_accum__.add(
              (priormod2 * normal_lpdf<false>(rawpopsdbase, 0, 1)));
          } 
        } 
        current_statement__ = 705;
        if (logical_eq(intoverstates, 0)) {
          current_statement__ = 704;
          lp_accum__.add(normal_lpdf<false>(etaupdbasestates, 0, 1));
        } 
        current_statement__ = 706;
        lp_accum__.add(ll);
        current_statement__ = 708;
        if (logical_gt(verbose, 0)) {
          current_statement__ = 707;
          if (pstream__) {
            stan_print(pstream__, "lp = ");
            stan_print(pstream__, get_lp(lp__, lp_accum__));
            stan_print(pstream__, "\n");
          }
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_ctsm_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> rawpopmeans;
      rawpopmeans = Eigen::Matrix<double, -1, 1>(nparams);
      stan::math::fill(rawpopmeans, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      rawpopmeans = in__.vector(nparams);
      Eigen::Matrix<double, -1, 1> rawpopsdbase;
      rawpopsdbase = Eigen::Matrix<double, -1, 1>(nindvarying);
      stan::math::fill(rawpopsdbase, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      rawpopsdbase = in__.vector(nindvarying);
      Eigen::Matrix<double, -1, 1> sqrtpcov;
      sqrtpcov = Eigen::Matrix<double, -1, 1>(nindvaryingoffdiagonals);
      stan::math::fill(sqrtpcov, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      sqrtpcov = in__.vector(nindvaryingoffdiagonals);
      std::vector<Eigen::Matrix<double, -1, 1>> baseindparams;
      baseindparams = std::vector<Eigen::Matrix<double, -1, 1>>(baseindparams_1dim__, Eigen::Matrix<double, -1, 1>(baseindparams_2dim__));
      stan::math::fill(baseindparams, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= baseindparams_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(baseindparams, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(baseindparams_2dim__),
          "assigning variable baseindparams");}
      Eigen::Matrix<double, -1, 1> tipredeffectparams;
      tipredeffectparams = Eigen::Matrix<double, -1, 1>(ntipredeffects);
      stan::math::fill(tipredeffectparams, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      tipredeffectparams = in__.vector(ntipredeffects);
      Eigen::Matrix<double, -1, 1> tipredsimputed;
      tipredsimputed = Eigen::Matrix<double, -1, 1>(nmissingtipreds);
      stan::math::fill(tipredsimputed, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      tipredsimputed = in__.vector(nmissingtipreds);
      Eigen::Matrix<double, -1, 1> etaupdbasestates;
      etaupdbasestates = Eigen::Matrix<double, -1, 1>(etaupdbasestates_1dim__);
      stan::math::fill(etaupdbasestates, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      etaupdbasestates = in__.vector(etaupdbasestates_1dim__);
      Eigen::Matrix<double, -1, 1> subsetpar;
      subsetpar = Eigen::Matrix<double, -1, 1>(subsetpar_1dim__);
      stan::math::fill(subsetpar, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      subsetpar = in__.vector(subsetpar_1dim__);
      Eigen::Matrix<double, -1, 1> rawpopsd;
      rawpopsd = Eigen::Matrix<double, -1, 1>(nindvarying);
      stan::math::fill(rawpopsd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> rawpopcovbase;
      rawpopcovbase = Eigen::Matrix<double, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcovbase, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> rawpopcov;
      rawpopcov = Eigen::Matrix<double, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> rawpopcovchol;
      rawpopcovchol = Eigen::Matrix<double, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcovchol, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> rawpopcorr;
      rawpopcorr = Eigen::Matrix<double, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(rawpopcorr, std::numeric_limits<double>::quiet_NaN());
      
      double subset;
      subset = std::numeric_limits<double>::quiet_NaN();
      
      double firstsub;
      firstsub = std::numeric_limits<double>::quiet_NaN();
      
      double lastsub;
      lastsub = std::numeric_limits<double>::quiet_NaN();
      
      double ll;
      ll = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> llrow;
      llrow = Eigen::Matrix<double, -1, 1>(llrow_1dim__);
      stan::math::fill(llrow, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> etacova;
      etacova = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(3, std::vector<Eigen::Matrix<double, -1, -1>>(etacova_2dim__, Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop)));
      stan::math::fill(etacova, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> ycova;
      ycova = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(3, std::vector<Eigen::Matrix<double, -1, -1>>(ycova_2dim__, Eigen::Matrix<double, -1, -1>(nmanifest, nmanifest)));
      stan::math::fill(ycova, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> etaa;
      etaa = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(3, std::vector<Eigen::Matrix<double, -1, 1>>(etaa_2dim__, Eigen::Matrix<double, -1, 1>(nlatentpop)));
      stan::math::fill(etaa, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> ya;
      ya = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(3, std::vector<Eigen::Matrix<double, -1, 1>>(ya_2dim__, Eigen::Matrix<double, -1, 1>(nmanifest)));
      stan::math::fill(ya, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> calcs;
      calcs = std::vector<Eigen::Matrix<double, -1, 1>>(0, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(calcs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_PARS;
      pop_PARS = Eigen::Matrix<double, -1, -1>(pop_PARS_1dim__, pop_PARS_2dim__);
      stan::math::fill(pop_PARS, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_T0MEANS;
      pop_T0MEANS = Eigen::Matrix<double, -1, -1>(pop_T0MEANS_1dim__, pop_T0MEANS_2dim__);
      stan::math::fill(pop_T0MEANS, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_LAMBDA;
      pop_LAMBDA = Eigen::Matrix<double, -1, -1>(pop_LAMBDA_1dim__, pop_LAMBDA_2dim__);
      stan::math::fill(pop_LAMBDA, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_DRIFT;
      pop_DRIFT = Eigen::Matrix<double, -1, -1>(pop_DRIFT_1dim__, pop_DRIFT_2dim__);
      stan::math::fill(pop_DRIFT, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_DIFFUSION;
      pop_DIFFUSION = Eigen::Matrix<double, -1, -1>(pop_DIFFUSION_1dim__, pop_DIFFUSION_2dim__);
      stan::math::fill(pop_DIFFUSION, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_MANIFESTVAR;
      pop_MANIFESTVAR = Eigen::Matrix<double, -1, -1>(pop_MANIFESTVAR_1dim__, pop_MANIFESTVAR_2dim__);
      stan::math::fill(pop_MANIFESTVAR, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_MANIFESTMEANS;
      pop_MANIFESTMEANS = Eigen::Matrix<double, -1, -1>(pop_MANIFESTMEANS_1dim__, pop_MANIFESTMEANS_2dim__);
      stan::math::fill(pop_MANIFESTMEANS, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_CINT;
      pop_CINT = Eigen::Matrix<double, -1, -1>(pop_CINT_1dim__, pop_CINT_2dim__);
      stan::math::fill(pop_CINT, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_T0VAR;
      pop_T0VAR = Eigen::Matrix<double, -1, -1>(pop_T0VAR_1dim__, pop_T0VAR_2dim__);
      stan::math::fill(pop_T0VAR, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_TDPREDEFFECT;
      pop_TDPREDEFFECT = Eigen::Matrix<double, -1, -1>(pop_TDPREDEFFECT_1dim__, pop_TDPREDEFFECT_2dim__);
      stan::math::fill(pop_TDPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_DIFFUSIONcov;
      pop_DIFFUSIONcov = Eigen::Matrix<double, -1, -1>(pop_DIFFUSIONcov_1dim__, pop_DIFFUSIONcov_2dim__);
      stan::math::fill(pop_DIFFUSIONcov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_MANIFESTcov;
      pop_MANIFESTcov = Eigen::Matrix<double, -1, -1>(pop_MANIFESTcov_1dim__, pop_MANIFESTcov_2dim__);
      stan::math::fill(pop_MANIFESTcov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_T0cov;
      pop_T0cov = Eigen::Matrix<double, -1, -1>(pop_T0cov_1dim__, pop_T0cov_2dim__);
      stan::math::fill(pop_T0cov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_asymCINT;
      pop_asymCINT = Eigen::Matrix<double, -1, -1>(pop_asymCINT_1dim__, pop_asymCINT_2dim__);
      stan::math::fill(pop_asymCINT, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pop_asymDIFFUSIONcov;
      pop_asymDIFFUSIONcov = Eigen::Matrix<double, -1, -1>(pop_asymDIFFUSIONcov_1dim__, pop_asymDIFFUSIONcov_2dim__);
      stan::math::fill(pop_asymDIFFUSIONcov, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_PARS;
      subj_PARS = std::vector<Eigen::Matrix<double, -1, -1>>(subj_PARS_1dim__, Eigen::Matrix<double, -1, -1>(subj_PARS_2dim__, subj_PARS_3dim__));
      stan::math::fill(subj_PARS, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_T0MEANS;
      subj_T0MEANS = std::vector<Eigen::Matrix<double, -1, -1>>(subj_T0MEANS_1dim__, Eigen::Matrix<double, -1, -1>(subj_T0MEANS_2dim__, subj_T0MEANS_3dim__));
      stan::math::fill(subj_T0MEANS, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_LAMBDA;
      subj_LAMBDA = std::vector<Eigen::Matrix<double, -1, -1>>(subj_LAMBDA_1dim__, Eigen::Matrix<double, -1, -1>(subj_LAMBDA_2dim__, subj_LAMBDA_3dim__));
      stan::math::fill(subj_LAMBDA, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_DRIFT;
      subj_DRIFT = std::vector<Eigen::Matrix<double, -1, -1>>(subj_DRIFT_1dim__, Eigen::Matrix<double, -1, -1>(subj_DRIFT_2dim__, subj_DRIFT_3dim__));
      stan::math::fill(subj_DRIFT, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_DIFFUSION;
      subj_DIFFUSION = std::vector<Eigen::Matrix<double, -1, -1>>(subj_DIFFUSION_1dim__, Eigen::Matrix<double, -1, -1>(subj_DIFFUSION_2dim__, subj_DIFFUSION_3dim__));
      stan::math::fill(subj_DIFFUSION, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_MANIFESTVAR;
      subj_MANIFESTVAR = std::vector<Eigen::Matrix<double, -1, -1>>(subj_MANIFESTVAR_1dim__, Eigen::Matrix<double, -1, -1>(subj_MANIFESTVAR_2dim__, subj_MANIFESTVAR_3dim__));
      stan::math::fill(subj_MANIFESTVAR, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_MANIFESTMEANS;
      subj_MANIFESTMEANS = std::vector<Eigen::Matrix<double, -1, -1>>(subj_MANIFESTMEANS_1dim__, Eigen::Matrix<double, -1, -1>(subj_MANIFESTMEANS_2dim__, subj_MANIFESTMEANS_3dim__));
      stan::math::fill(subj_MANIFESTMEANS, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_CINT;
      subj_CINT = std::vector<Eigen::Matrix<double, -1, -1>>(subj_CINT_1dim__, Eigen::Matrix<double, -1, -1>(subj_CINT_2dim__, subj_CINT_3dim__));
      stan::math::fill(subj_CINT, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_T0VAR;
      subj_T0VAR = std::vector<Eigen::Matrix<double, -1, -1>>(subj_T0VAR_1dim__, Eigen::Matrix<double, -1, -1>(subj_T0VAR_2dim__, subj_T0VAR_3dim__));
      stan::math::fill(subj_T0VAR, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_TDPREDEFFECT;
      subj_TDPREDEFFECT = std::vector<Eigen::Matrix<double, -1, -1>>(subj_TDPREDEFFECT_1dim__, Eigen::Matrix<double, -1, -1>(subj_TDPREDEFFECT_2dim__, subj_TDPREDEFFECT_3dim__));
      stan::math::fill(subj_TDPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_DIFFUSIONcov;
      subj_DIFFUSIONcov = std::vector<Eigen::Matrix<double, -1, -1>>(subj_DIFFUSIONcov_1dim__, Eigen::Matrix<double, -1, -1>(subj_DIFFUSIONcov_2dim__, subj_DIFFUSIONcov_3dim__));
      stan::math::fill(subj_DIFFUSIONcov, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_MANIFESTcov;
      subj_MANIFESTcov = std::vector<Eigen::Matrix<double, -1, -1>>(subj_MANIFESTcov_1dim__, Eigen::Matrix<double, -1, -1>(subj_MANIFESTcov_2dim__, subj_MANIFESTcov_3dim__));
      stan::math::fill(subj_MANIFESTcov, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_T0cov;
      subj_T0cov = std::vector<Eigen::Matrix<double, -1, -1>>(subj_T0cov_1dim__, Eigen::Matrix<double, -1, -1>(subj_T0cov_2dim__, subj_T0cov_3dim__));
      stan::math::fill(subj_T0cov, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_asymCINT;
      subj_asymCINT = std::vector<Eigen::Matrix<double, -1, -1>>(subj_asymCINT_1dim__, Eigen::Matrix<double, -1, -1>(subj_asymCINT_2dim__, subj_asymCINT_3dim__));
      stan::math::fill(subj_asymCINT, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> subj_asymDIFFUSIONcov;
      subj_asymDIFFUSIONcov = std::vector<Eigen::Matrix<double, -1, -1>>(subj_asymDIFFUSIONcov_1dim__, Eigen::Matrix<double, -1, -1>(subj_asymDIFFUSIONcov_2dim__, subj_asymDIFFUSIONcov_3dim__));
      stan::math::fill(subj_asymDIFFUSIONcov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> tipreds;
      tipreds = Eigen::Matrix<double, -1, -1>(tipreds_1dim__, tipreds_2dim__);
      stan::math::fill(tipreds, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> TIPREDEFFECT;
      TIPREDEFFECT = Eigen::Matrix<double, -1, -1>(nparams, ntipred);
      stan::math::fill(TIPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        vars__.emplace_back(rawpopmeans[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        vars__.emplace_back(rawpopsdbase[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nindvaryingoffdiagonals; ++sym1__) {
        vars__.emplace_back(sqrtpcov[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= baseindparams_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= baseindparams_1dim__; ++sym2__) {
          vars__.emplace_back(baseindparams[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= ntipredeffects; ++sym1__) {
        vars__.emplace_back(tipredeffectparams[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nmissingtipreds; ++sym1__) {
        vars__.emplace_back(tipredsimputed[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= etaupdbasestates_1dim__; ++sym1__) {
        vars__.emplace_back(etaupdbasestates[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= subsetpar_1dim__; ++sym1__) {
        vars__.emplace_back(subsetpar[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      subset = (logical_gt(nsubsets, 1) ?
                  stan::math::promote_scalar<local_scalar_t__>(subsetpar[
                  (1 - 1)]) :
                  stan::math::promote_scalar<local_scalar_t__>(1.0));
      current_statement__ = 15;
      firstsub = stan::math::round(
                   ((((nsubjects * 1.0) / nsubsets) * (subset - 1)) + 1));
      current_statement__ = 16;
      lastsub = stan::math::round((((nsubjects * 1.0) / nsubsets) * subset));
      current_statement__ = 17;
      ll = 0;
      current_statement__ = 18;
      assign(llrow, nil_index_list(),
        rep_vector(0, (dokalman ? ndatapoints : 1)),
        "assigning variable llrow");
      current_statement__ = 78;
      if (logical_gt(ntipred, 0)) {
        current_statement__ = 67;
        if (logical_gt(nmissingtipreds, 0)) {
          int counter;
          counter = std::numeric_limits<int>::min();
          
          current_statement__ = 56;
          counter = 0;
          current_statement__ = 65;
          for (int coli = 1; coli <= cols(tipreds); ++coli) {
            current_statement__ = 63;
            for (int rowi = 1; rowi <= rows(tipreds); ++rowi) {
              current_statement__ = 61;
              if (logical_eq(
                    rvalue(tipredsdata,
                      cons_list(index_uni(rowi),
                        cons_list(index_uni(coli), nil_index_list())),
                      "tipredsdata"), 99999)) {
                current_statement__ = 58;
                counter = (counter + 1);
                current_statement__ = 59;
                assign(tipreds,
                  cons_list(index_uni(rowi),
                    cons_list(index_uni(coli), nil_index_list())),
                  tipredsimputed[(counter - 1)], "assigning variable tipreds");
              } else {
                current_statement__ = 57;
                assign(tipreds,
                  cons_list(index_uni(rowi),
                    cons_list(index_uni(coli), nil_index_list())),
                  rvalue(tipredsdata,
                    cons_list(index_uni(rowi),
                      cons_list(index_uni(coli), nil_index_list())),
                    "tipredsdata"), "assigning variable tipreds");
              }}}
        } 
        current_statement__ = 76;
        for (int ci = 1; ci <= ntipred; ++ci) {
          current_statement__ = 74;
          for (int ri = 1; ri <= nparams; ++ri) {
            current_statement__ = 72;
            if (logical_gt(TIPREDEFFECTsetup[(ri - 1)][(ci - 1)], 0)) {
              current_statement__ = 70;
              assign(TIPREDEFFECT,
                cons_list(index_uni(ri),
                  cons_list(index_uni(ci), nil_index_list())),
                tipredeffectparams[(TIPREDEFFECTsetup[(ri - 1)][(ci - 1)] -
                                     1)], "assigning variable TIPREDEFFECT");
            } else {
              current_statement__ = 68;
              assign(TIPREDEFFECT,
                cons_list(index_uni(ri),
                  cons_list(index_uni(ci), nil_index_list())), 0,
                "assigning variable TIPREDEFFECT");
            }}}
      } 
      current_statement__ = 95;
      if (logical_gt(nindvarying, 0)) {
        int counter;
        counter = std::numeric_limits<int>::min();
        
        current_statement__ = 79;
        counter = 0;
        current_statement__ = 80;
        assign(rawpopsd, nil_index_list(),
          add(
            elt_multiply(log1p_exp(subtract(multiply(2, rawpopsdbase), 1)),
              sdscale), 1e-10), "assigning variable rawpopsd");
        current_statement__ = 90;
        for (int j = 1; j <= nindvarying; ++j) {
          current_statement__ = 81;
          assign(rawpopcovbase,
            cons_list(index_uni(j),
              cons_list(index_uni(j), nil_index_list())), rawpopsd[(j - 1)],
            "assigning variable rawpopcovbase");
          current_statement__ = 88;
          for (int i = 1; i <= nindvarying; ++i) {
            current_statement__ = 86;
            if (logical_gt(i, j)) {
              current_statement__ = 82;
              counter = (counter + 1);
              current_statement__ = 83;
              assign(rawpopcovbase,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())),
                ((inv_logit(sqrtpcov[(counter - 1)]) * 2) - 1),
                "assigning variable rawpopcovbase");
              current_statement__ = 84;
              assign(rawpopcovbase,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())), 0,
                "assigning variable rawpopcovbase");
            } }}
        current_statement__ = 91;
        assign(rawpopcorr, nil_index_list(),
          tcrossprod(constraincorsqrt(rawpopcovbase, pstream__)),
          "assigning variable rawpopcorr");
        current_statement__ = 92;
        assign(rawpopcov, nil_index_list(),
          makesym(quad_form_diag(rawpopcorr, add(rawpopsd, 1e-8)), verbose,
            1, pstream__), "assigning variable rawpopcov");
        current_statement__ = 93;
        assign(rawpopcovchol, nil_index_list(),
          cholesky_decompose(rawpopcov), "assigning variable rawpopcovchol");
      } 
      {
        int prevrow;
        prevrow = std::numeric_limits<int>::min();
        
        current_statement__ = 96;
        prevrow = 0;
        double prevdt;
        prevdt = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 97;
        prevdt = 0;
        double dt;
        dt = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 98;
        dt = 1;
        double dtsmall;
        dtsmall = std::numeric_limits<double>::quiet_NaN();
        
        int dtchange;
        dtchange = std::numeric_limits<int>::min();
        
        current_statement__ = 100;
        dtchange = 1;
        double prevtime;
        prevtime = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 101;
        prevtime = 0;
        int T0check;
        T0check = std::numeric_limits<int>::min();
        
        current_statement__ = 102;
        T0check = 0;
        current_statement__ = 103;
        validate_non_negative_index("etacov", "nlatentpop", nlatentpop);
        current_statement__ = 104;
        validate_non_negative_index("etacov", "nlatentpop", nlatentpop);
        Eigen::Matrix<double, -1, -1> etacov;
        etacov = Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(etacov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 106;
        validate_non_negative_index("err", "nmanifest", nmanifest);
        Eigen::Matrix<double, -1, 1> err;
        err = Eigen::Matrix<double, -1, 1>(nmanifest);
        stan::math::fill(err, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 108;
        validate_non_negative_index("syprior", "nmanifest", nmanifest);
        Eigen::Matrix<double, -1, 1> syprior;
        syprior = Eigen::Matrix<double, -1, 1>(nmanifest);
        stan::math::fill(syprior, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 110;
        validate_non_negative_index("K", "nlatentpop", nlatentpop);
        current_statement__ = 111;
        validate_non_negative_index("K", "nmanifest", nmanifest);
        Eigen::Matrix<double, -1, -1> K;
        K = Eigen::Matrix<double, -1, -1>(nlatentpop, nmanifest);
        stan::math::fill(K, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 113;
        validate_non_negative_index("ypriorcov_sqrt", "nmanifest", nmanifest);
        current_statement__ = 114;
        validate_non_negative_index("ypriorcov_sqrt", "nmanifest", nmanifest);
        Eigen::Matrix<double, -1, -1> ypriorcov_sqrt;
        ypriorcov_sqrt = Eigen::Matrix<double, -1, -1>(nmanifest, nmanifest);
        stan::math::fill(ypriorcov_sqrt, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 115;
        assign(ypriorcov_sqrt, nil_index_list(),
          rep_matrix(0, nmanifest, nmanifest),
          "assigning variable ypriorcov_sqrt");
        current_statement__ = 116;
        validate_non_negative_index("ycov", "nmanifest", nmanifest);
        current_statement__ = 117;
        validate_non_negative_index("ycov", "nmanifest", nmanifest);
        Eigen::Matrix<double, -1, -1> ycov;
        ycov = Eigen::Matrix<double, -1, -1>(nmanifest, nmanifest);
        stan::math::fill(ycov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 119;
        validate_non_negative_index("eJAx", "nlatentpop", nlatentpop);
        current_statement__ = 120;
        validate_non_negative_index("eJAx", "nlatentpop", nlatentpop);
        Eigen::Matrix<double, -1, -1> eJAx;
        eJAx = Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(eJAx, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 121;
        assign(eJAx, nil_index_list(),
          diag_matrix(rep_vector(1, nlatentpop)), "assigning variable eJAx");
        current_statement__ = 122;
        validate_non_negative_index("eJAxs", "dosmoother ? ndatapoints : 1",
                                    (dosmoother ? ndatapoints : 1));
        current_statement__ = 123;
        validate_non_negative_index("eJAxs", "nlatentpop", nlatentpop);
        current_statement__ = 124;
        validate_non_negative_index("eJAxs", "nlatentpop", nlatentpop);
        std::vector<Eigen::Matrix<double, -1, -1>> eJAxs;
        eJAxs = std::vector<Eigen::Matrix<double, -1, -1>>((dosmoother ?
                                                              ndatapoints : 1), Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop));
        stan::math::fill(eJAxs, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 126;
        validate_non_negative_index("state", "nlatentpop", nlatentpop);
        Eigen::Matrix<double, 1, -1> state;
        state = Eigen::Matrix<double, 1, -1>(nlatentpop);
        stan::math::fill(state, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 127;
        assign(state, nil_index_list(), rep_row_vector(-999, nlatentpop),
          "assigning variable state");
        current_statement__ = 128;
        validate_non_negative_index("statetf", "nlatentpop", nlatentpop);
        Eigen::Matrix<double, 1, -1> statetf;
        statetf = Eigen::Matrix<double, 1, -1>(nlatentpop);
        stan::math::fill(statetf, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 130;
        validate_non_negative_index("JAx", "nlatentpop", nlatentpop);
        current_statement__ = 131;
        validate_non_negative_index("JAx", "nlatentpop", nlatentpop);
        Eigen::Matrix<double, -1, -1> JAx;
        JAx = Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(JAx, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 133;
        validate_non_negative_index("Jtd", "nlatentpop", nlatentpop);
        current_statement__ = 134;
        validate_non_negative_index("Jtd", "nlatentpop", nlatentpop);
        Eigen::Matrix<double, -1, -1> Jtd;
        Jtd = Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop);
        stan::math::fill(Jtd, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 136;
        validate_non_negative_index("Jy", "nmanifest", nmanifest);
        current_statement__ = 137;
        validate_non_negative_index("Jy", "nlatentpop", nlatentpop);
        Eigen::Matrix<double, -1, -1> Jy;
        Jy = Eigen::Matrix<double, -1, -1>(nmanifest, nlatentpop);
        stan::math::fill(Jy, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 139;
        validate_non_negative_index("Jys", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 140;
        validate_non_negative_index("Jys", "nmanifest", nmanifest);
        current_statement__ = 141;
        validate_non_negative_index("Jys", "nlatentpop", nlatentpop);
        std::vector<Eigen::Matrix<double, -1, -1>> Jys;
        Jys = std::vector<Eigen::Matrix<double, -1, -1>>((dosmoother ?
                                                            ndatapoints : 0), Eigen::Matrix<double, -1, -1>(nmanifest, nlatentpop));
        stan::math::fill(Jys, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 143;
        validate_non_negative_index("discreteDRIFT", "nlatent", nlatent);
        current_statement__ = 144;
        validate_non_negative_index("discreteDRIFT", "nlatent", nlatent);
        Eigen::Matrix<double, -1, -1> discreteDRIFT;
        discreteDRIFT = Eigen::Matrix<double, -1, -1>(nlatent, nlatent);
        stan::math::fill(discreteDRIFT, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 146;
        validate_non_negative_index("discreteCINT", "nlatent", nlatent);
        Eigen::Matrix<double, -1, 1> discreteCINT;
        discreteCINT = Eigen::Matrix<double, -1, 1>(nlatent);
        stan::math::fill(discreteCINT, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 148;
        validate_non_negative_index("discreteDIFFUSION", "nlatent", nlatent);
        current_statement__ = 149;
        validate_non_negative_index("discreteDIFFUSION", "nlatent", nlatent);
        Eigen::Matrix<double, -1, -1> discreteDIFFUSION;
        discreteDIFFUSION = Eigen::Matrix<double, -1, -1>(nlatent, nlatent);
        stan::math::fill(discreteDIFFUSION, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 150;
        assign(discreteDIFFUSION, nil_index_list(),
          rep_matrix(0.0, nlatent, nlatent),
          "assigning variable discreteDIFFUSION");
        current_statement__ = 151;
        validate_non_negative_index("rawindparams", "nparams", nparams);
        Eigen::Matrix<double, -1, 1> rawindparams;
        rawindparams = Eigen::Matrix<double, -1, 1>(nparams);
        stan::math::fill(rawindparams, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 152;
        assign(rawindparams, nil_index_list(), rawpopmeans,
          "assigning variable rawindparams");
        current_statement__ = 153;
        validate_non_negative_index("indparams", "nparams", nparams);
        Eigen::Matrix<double, -1, 1> indparams;
        indparams = Eigen::Matrix<double, -1, 1>(nparams);
        stan::math::fill(indparams, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 155;
        validate_non_negative_index("etacovb",
                                    "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 156;
        validate_non_negative_index("etacovb", "nlatentpop", nlatentpop);
        current_statement__ = 157;
        validate_non_negative_index("etacovb", "nlatentpop", nlatentpop);
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> etacovb;
        etacovb = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(3, std::vector<Eigen::Matrix<double, -1, -1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop)));
        stan::math::fill(etacovb, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 159;
        validate_non_negative_index("ycovb", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 160;
        validate_non_negative_index("ycovb", "nmanifest", nmanifest);
        current_statement__ = 161;
        validate_non_negative_index("ycovb", "nmanifest", nmanifest);
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> ycovb;
        ycovb = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(3, std::vector<Eigen::Matrix<double, -1, -1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<double, -1, -1>(nmanifest, nmanifest)));
        stan::math::fill(ycovb, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 163;
        validate_non_negative_index("etab", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 164;
        validate_non_negative_index("etab", "nlatentpop", nlatentpop);
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> etab;
        etab = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(3, std::vector<Eigen::Matrix<double, -1, 1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<double, -1, 1>(nlatentpop)));
        stan::math::fill(etab, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 166;
        validate_non_negative_index("yb", "dosmoother ? ndatapoints : 0",
                                    (dosmoother ? ndatapoints : 0));
        current_statement__ = 167;
        validate_non_negative_index("yb", "nmanifest", nmanifest);
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> yb;
        yb = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(3, std::vector<Eigen::Matrix<double, -1, 1>>((
          dosmoother ? ndatapoints : 0), Eigen::Matrix<double, -1, 1>(nmanifest)));
        stan::math::fill(yb, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 169;
        validate_non_negative_index("PARS", "matrixdims[10, 1]",
                                    matrixdims[(10 - 1)][(1 - 1)]);
        current_statement__ = 170;
        validate_non_negative_index("PARS", "matrixdims[10, 2]",
                                    matrixdims[(10 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> PARS;
        PARS = Eigen::Matrix<double, -1, -1>(matrixdims[(10 - 1)][(1 - 1)], matrixdims[
          (10 - 1)][(2 - 1)]);
        stan::math::fill(PARS, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 172;
        validate_non_negative_index("T0MEANS", "matrixdims[1, 1]",
                                    matrixdims[(1 - 1)][(1 - 1)]);
        current_statement__ = 173;
        validate_non_negative_index("T0MEANS", "matrixdims[1, 2]",
                                    matrixdims[(1 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> T0MEANS;
        T0MEANS = Eigen::Matrix<double, -1, -1>(matrixdims[(1 - 1)][(1 - 1)], matrixdims[
          (1 - 1)][(2 - 1)]);
        stan::math::fill(T0MEANS, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 175;
        validate_non_negative_index("LAMBDA", "matrixdims[2, 1]",
                                    matrixdims[(2 - 1)][(1 - 1)]);
        current_statement__ = 176;
        validate_non_negative_index("LAMBDA", "matrixdims[2, 2]",
                                    matrixdims[(2 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> LAMBDA;
        LAMBDA = Eigen::Matrix<double, -1, -1>(matrixdims[(2 - 1)][(1 - 1)], matrixdims[
          (2 - 1)][(2 - 1)]);
        stan::math::fill(LAMBDA, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 178;
        validate_non_negative_index("DRIFT", "matrixdims[3, 1]",
                                    matrixdims[(3 - 1)][(1 - 1)]);
        current_statement__ = 179;
        validate_non_negative_index("DRIFT", "matrixdims[3, 2]",
                                    matrixdims[(3 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> DRIFT;
        DRIFT = Eigen::Matrix<double, -1, -1>(matrixdims[(3 - 1)][(1 - 1)], matrixdims[
          (3 - 1)][(2 - 1)]);
        stan::math::fill(DRIFT, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 181;
        validate_non_negative_index("DIFFUSION", "matrixdims[4, 1]",
                                    matrixdims[(4 - 1)][(1 - 1)]);
        current_statement__ = 182;
        validate_non_negative_index("DIFFUSION", "matrixdims[4, 2]",
                                    matrixdims[(4 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> DIFFUSION;
        DIFFUSION = Eigen::Matrix<double, -1, -1>(matrixdims[(4 - 1)][
          (1 - 1)], matrixdims[(4 - 1)][(2 - 1)]);
        stan::math::fill(DIFFUSION, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 184;
        validate_non_negative_index("MANIFESTVAR", "matrixdims[5, 1]",
                                    matrixdims[(5 - 1)][(1 - 1)]);
        current_statement__ = 185;
        validate_non_negative_index("MANIFESTVAR", "matrixdims[5, 2]",
                                    matrixdims[(5 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> MANIFESTVAR;
        MANIFESTVAR = Eigen::Matrix<double, -1, -1>(matrixdims[(5 - 1)][
          (1 - 1)], matrixdims[(5 - 1)][(2 - 1)]);
        stan::math::fill(MANIFESTVAR, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 187;
        validate_non_negative_index("MANIFESTMEANS", "matrixdims[6, 1]",
                                    matrixdims[(6 - 1)][(1 - 1)]);
        current_statement__ = 188;
        validate_non_negative_index("MANIFESTMEANS", "matrixdims[6, 2]",
                                    matrixdims[(6 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> MANIFESTMEANS;
        MANIFESTMEANS = Eigen::Matrix<double, -1, -1>(matrixdims[(6 - 1)][
          (1 - 1)], matrixdims[(6 - 1)][(2 - 1)]);
        stan::math::fill(MANIFESTMEANS, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 190;
        validate_non_negative_index("CINT", "matrixdims[7, 1]",
                                    matrixdims[(7 - 1)][(1 - 1)]);
        current_statement__ = 191;
        validate_non_negative_index("CINT", "matrixdims[7, 2]",
                                    matrixdims[(7 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> CINT;
        CINT = Eigen::Matrix<double, -1, -1>(matrixdims[(7 - 1)][(1 - 1)], matrixdims[
          (7 - 1)][(2 - 1)]);
        stan::math::fill(CINT, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 193;
        validate_non_negative_index("T0VAR", "matrixdims[8, 1]",
                                    matrixdims[(8 - 1)][(1 - 1)]);
        current_statement__ = 194;
        validate_non_negative_index("T0VAR", "matrixdims[8, 2]",
                                    matrixdims[(8 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> T0VAR;
        T0VAR = Eigen::Matrix<double, -1, -1>(matrixdims[(8 - 1)][(1 - 1)], matrixdims[
          (8 - 1)][(2 - 1)]);
        stan::math::fill(T0VAR, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 196;
        validate_non_negative_index("TDPREDEFFECT", "matrixdims[9, 1]",
                                    matrixdims[(9 - 1)][(1 - 1)]);
        current_statement__ = 197;
        validate_non_negative_index("TDPREDEFFECT", "matrixdims[9, 2]",
                                    matrixdims[(9 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> TDPREDEFFECT;
        TDPREDEFFECT = Eigen::Matrix<double, -1, -1>(matrixdims[(9 - 1)][
          (1 - 1)], matrixdims[(9 - 1)][(2 - 1)]);
        stan::math::fill(TDPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 199;
        validate_non_negative_index("DIFFUSIONcov", "matrixdims[31, 1]",
                                    matrixdims[(31 - 1)][(1 - 1)]);
        current_statement__ = 200;
        validate_non_negative_index("DIFFUSIONcov", "matrixdims[31, 2]",
                                    matrixdims[(31 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> DIFFUSIONcov;
        DIFFUSIONcov = Eigen::Matrix<double, -1, -1>(matrixdims[(31 - 1)][
          (1 - 1)], matrixdims[(31 - 1)][(2 - 1)]);
        stan::math::fill(DIFFUSIONcov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 202;
        validate_non_negative_index("MANIFESTcov", "matrixdims[32, 1]",
                                    matrixdims[(32 - 1)][(1 - 1)]);
        current_statement__ = 203;
        validate_non_negative_index("MANIFESTcov", "matrixdims[32, 2]",
                                    matrixdims[(32 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> MANIFESTcov;
        MANIFESTcov = Eigen::Matrix<double, -1, -1>(matrixdims[(32 - 1)][
          (1 - 1)], matrixdims[(32 - 1)][(2 - 1)]);
        stan::math::fill(MANIFESTcov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 205;
        validate_non_negative_index("T0cov", "matrixdims[33, 1]",
                                    matrixdims[(33 - 1)][(1 - 1)]);
        current_statement__ = 206;
        validate_non_negative_index("T0cov", "matrixdims[33, 2]",
                                    matrixdims[(33 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> T0cov;
        T0cov = Eigen::Matrix<double, -1, -1>(matrixdims[(33 - 1)][(1 - 1)], matrixdims[
          (33 - 1)][(2 - 1)]);
        stan::math::fill(T0cov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 208;
        validate_non_negative_index("asymCINT", "matrixdims[21, 1]",
                                    matrixdims[(21 - 1)][(1 - 1)]);
        current_statement__ = 209;
        validate_non_negative_index("asymCINT", "matrixdims[21, 2]",
                                    matrixdims[(21 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> asymCINT;
        asymCINT = Eigen::Matrix<double, -1, -1>(matrixdims[(21 - 1)][
          (1 - 1)], matrixdims[(21 - 1)][(2 - 1)]);
        stan::math::fill(asymCINT, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 211;
        validate_non_negative_index("asymDIFFUSIONcov", "matrixdims[22, 1]",
                                    matrixdims[(22 - 1)][(1 - 1)]);
        current_statement__ = 212;
        validate_non_negative_index("asymDIFFUSIONcov", "matrixdims[22, 2]",
                                    matrixdims[(22 - 1)][(2 - 1)]);
        Eigen::Matrix<double, -1, -1> asymDIFFUSIONcov;
        asymDIFFUSIONcov = Eigen::Matrix<double, -1, -1>(matrixdims[(22 - 1)][
          (1 - 1)], matrixdims[(22 - 1)][(2 - 1)]);
        stan::math::fill(asymDIFFUSIONcov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 214;
        assign(asymDIFFUSIONcov, nil_index_list(),
          rep_matrix(0, nlatent, nlatent),
          "assigning variable asymDIFFUSIONcov");
        current_statement__ = 215;
        assign(DIFFUSIONcov, nil_index_list(),
          rep_matrix(0, nlatent, nlatent), "assigning variable DIFFUSIONcov");
        current_statement__ = 613;
        for (int rowx = 0; rowx <= (dokalman ? ndatapoints : 0); ++rowx) {
          int rowi;
          rowi = std::numeric_limits<int>::min();
          
          current_statement__ = 216;
          rowi = (rowx ? rowx : 1);
          current_statement__ = 610;
          if ((primitive_value(logical_eq(rowx, 0)) || primitive_value(
              (primitive_value((primitive_value(dokalmanrows[(rowi - 1)]) &&
              primitive_value(
              logical_gte(subject[(rowi - 1)], (firstsub - .1))))) &&
              primitive_value(
              logical_lte(subject[(rowi - 1)], (lastsub + .1))))))) {
            int si;
            si = std::numeric_limits<int>::min();
            
            current_statement__ = 217;
            si = (rowx ? subject[(rowi - 1)] : 0);
            int full;
            full = std::numeric_limits<int>::min();
            
            current_statement__ = 218;
            full = (primitive_value(logical_eq(dosmoother, 1)) ||
                primitive_value(logical_eq(si, 0)));
            current_statement__ = 219;
            validate_non_negative_index("o",
                                        "full ? nmanifest : nobs_y[rowi]",
                                        (full ? nmanifest :
                                           nobs_y[(rowi - 1)]));
            std::vector<int> o;
            o = std::vector<int>((full ? nmanifest : nobs_y[(rowi - 1)]), std::numeric_limits<int>::min());
            
            current_statement__ = 221;
            validate_non_negative_index("o1",
                                        "full ? size(whichequals(manifesttype, 1, 1)) : nbinary_y[rowi]",
                                        (full ?
                                           stan::math::size(
                                             whichequals(manifesttype, 1,
                                               1, pstream__)) :
                                           nbinary_y[(rowi - 1)]));
            std::vector<int> o1;
            o1 = std::vector<int>((full ?
                                     stan::math::size(
                                       whichequals(manifesttype, 1,
                                         1, pstream__)) :
                                     nbinary_y[(rowi - 1)]), std::numeric_limits<int>::min());
            
            current_statement__ = 223;
            validate_non_negative_index("o0",
                                        "full ? size(whichequals(manifesttype, 1, 0)) : ncont_y[rowi]",
                                        (full ?
                                           stan::math::size(
                                             whichequals(manifesttype, 1,
                                               0, pstream__)) :
                                           ncont_y[(rowi - 1)]));
            std::vector<int> o0;
            o0 = std::vector<int>((full ?
                                     stan::math::size(
                                       whichequals(manifesttype, 1,
                                         0, pstream__)) : ncont_y[(rowi - 1)]), std::numeric_limits<int>::min());
            
            current_statement__ = 225;
            validate_non_negative_index("od", "nobs_y[rowi]",
                                        nobs_y[(rowi - 1)]);
            std::vector<int> od;
            od = std::vector<int>(nobs_y[(rowi - 1)], std::numeric_limits<int>::min());
            
            current_statement__ = 226;
            assign(od, nil_index_list(),
              rvalue(whichobs_y,
                cons_list(index_uni(rowi),
                  cons_list(index_min_max(1, nobs_y[(rowi - 1)]),
                    nil_index_list())), "whichobs_y"),
              "assigning variable od");
            current_statement__ = 227;
            validate_non_negative_index("o1d", "nbinary_y[rowi]",
                                        nbinary_y[(rowi - 1)]);
            std::vector<int> o1d;
            o1d = std::vector<int>(nbinary_y[(rowi - 1)], std::numeric_limits<int>::min());
            
            current_statement__ = 228;
            assign(o1d, nil_index_list(),
              rvalue(whichbinary_y,
                cons_list(index_uni(rowi),
                  cons_list(index_min_max(1, nbinary_y[(rowi - 1)]),
                    nil_index_list())), "whichbinary_y"),
              "assigning variable o1d");
            current_statement__ = 229;
            validate_non_negative_index("o0d", "ncont_y[rowi]",
                                        ncont_y[(rowi - 1)]);
            std::vector<int> o0d;
            o0d = std::vector<int>(ncont_y[(rowi - 1)], std::numeric_limits<int>::min());
            
            current_statement__ = 230;
            assign(o0d, nil_index_list(),
              rvalue(whichcont_y,
                cons_list(index_uni(rowi),
                  cons_list(index_min_max(1, ncont_y[(rowi - 1)]),
                    nil_index_list())), "whichcont_y"),
              "assigning variable o0d");
            current_statement__ = 235;
            if (logical_negation(full)) {
              current_statement__ = 231;
              assign(o, nil_index_list(),
                rvalue(whichobs_y,
                  cons_list(index_uni(rowi),
                    cons_list(index_min_max(1, nobs_y[(rowi - 1)]),
                      nil_index_list())), "whichobs_y"),
                "assigning variable o");
              current_statement__ = 232;
              assign(o1, nil_index_list(),
                rvalue(whichbinary_y,
                  cons_list(index_uni(rowi),
                    cons_list(index_min_max(1, nbinary_y[(rowi - 1)]),
                      nil_index_list())), "whichbinary_y"),
                "assigning variable o1");
              current_statement__ = 233;
              assign(o0, nil_index_list(),
                rvalue(whichcont_y,
                  cons_list(index_uni(rowi),
                    cons_list(index_min_max(1, ncont_y[(rowi - 1)]),
                      nil_index_list())), "whichcont_y"),
                "assigning variable o0");
            } 
            current_statement__ = 241;
            if (full) {
              current_statement__ = 237;
              for (int mi = 1; mi <= nmanifest; ++mi) {
                current_statement__ = 236;
                assign(o, cons_list(index_uni(mi), nil_index_list()), mi,
                  "assigning variable o");}
              current_statement__ = 238;
              assign(o1, nil_index_list(),
                whichequals(manifesttype, 1, 1, pstream__),
                "assigning variable o1");
              current_statement__ = 239;
              assign(o0, nil_index_list(),
                whichequals(manifesttype, 1, 0, pstream__),
                "assigning variable o0");
            } 
            current_statement__ = 243;
            if ((primitive_value(logical_neq(prevrow, 0)) && primitive_value(
                logical_neq(rowi, 1)))) {
              current_statement__ = 242;
              T0check = (logical_eq(si, subject[(prevrow - 1)]) ?
                           (T0check + 1) : 0);
            } 
            current_statement__ = 248;
            if (logical_gt(T0check, 0)) {
              current_statement__ = 244;
              dt = (time[(rowi - 1)] - time[(prevrow - 1)]);
              current_statement__ = 245;
              dtchange = logical_neq(dt, prevdt);
              current_statement__ = 246;
              prevdt = dt;
            } 
            current_statement__ = 317;
            if (logical_eq(T0check, 0)) {
              current_statement__ = 249;
              assign(rawindparams, nil_index_list(), rawpopmeans,
                "assigning variable rawindparams");
              current_statement__ = 251;
              if ((primitive_value((primitive_value(logical_gt(si, 0)) &&
                  primitive_value(logical_gt(nindvarying, 0)))) &&
                  primitive_value(logical_eq(intoverpop, 0)))) {
                current_statement__ = 250;
                assign(rawindparams,
                  cons_list(index_multi(indvaryingindex), nil_index_list()),
                  add(
                    stan::model::deep_copy(
                      rvalue(rawindparams,
                        cons_list(index_multi(indvaryingindex),
                          nil_index_list()), "rawindparams")),
                    multiply(rawpopcovchol, baseindparams[(si - 1)])),
                  "assigning variable rawindparams");
              } 
              current_statement__ = 257;
              if ((primitive_value(logical_gt(si, 0)) && primitive_value(
                  logical_gt(ntieffects, 0)))) {
                current_statement__ = 253;
                if (logical_gt(nmissingtipreds, 0)) {
                  current_statement__ = 252;
                  assign(rawindparams,
                    cons_list(
                      index_multi(rvalue(tieffectindices,
                                    cons_list(index_min_max(1, ntieffects),
                                      nil_index_list()), "tieffectindices")),
                      nil_index_list()),
                    add(
                      stan::model::deep_copy(
                        rvalue(rawindparams,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "rawindparams")),
                      multiply(
                        rvalue(TIPREDEFFECT,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "TIPREDEFFECT"),
                        transpose(
                          rvalue(tipreds,
                            cons_list(index_uni(si), nil_index_list()),
                            "tipreds")))), "assigning variable rawindparams");
                } 
                current_statement__ = 255;
                if (logical_eq(nmissingtipreds, 0)) {
                  current_statement__ = 254;
                  assign(rawindparams,
                    cons_list(
                      index_multi(rvalue(tieffectindices,
                                    cons_list(index_min_max(1, ntieffects),
                                      nil_index_list()), "tieffectindices")),
                      nil_index_list()),
                    add(
                      stan::model::deep_copy(
                        rvalue(rawindparams,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "rawindparams")),
                      multiply(
                        rvalue(TIPREDEFFECT,
                          cons_list(
                            index_multi(rvalue(tieffectindices,
                                          cons_list(
                                            index_min_max(1, ntieffects),
                                            nil_index_list()),
                                          "tieffectindices")),
                            nil_index_list()), "TIPREDEFFECT"),
                        transpose(
                          rvalue(tipredsdata,
                            cons_list(index_uni(si), nil_index_list()),
                            "tipredsdata")))),
                    "assigning variable rawindparams");
                } 
              } 
              current_statement__ = 258;
              assign(indparams,
                cons_list(
                  index_multi(whichequals(whenvecp[((si ? 2 : 1) - 1)], 0,
                                0, pstream__)), nil_index_list()),
                transpose(
                  parvectform(
                    whichequals(whenvecp[((si ? 2 : 1) - 1)], 0,
                      0, pstream__), transpose(rawindparams), 0, matsetup,
                    matvalues, si, pstream__)),
                "assigning variable indparams");
              current_statement__ = 260;
              if (logical_gte(whenmat[(1 - 1)][(5 - 1)], (si ? 1 : 0))) {
                current_statement__ = 259;
                assign(T0MEANS, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0MEANS), indparams, statetf,
                    std::vector<int>{0}, 1, matsetup, matvalues,
                    si, pstream__), "assigning variable T0MEANS");
              } 
              current_statement__ = 261;
              assign(state, nil_index_list(),
                transpose(
                  rvalue(T0MEANS,
                    cons_list(index_omni(),
                      cons_list(index_uni(1), nil_index_list())), "T0MEANS")),
                "assigning variable state");
              current_statement__ = 262;
              assign(statetf,
                cons_list(
                  index_multi(whichequals(whenvecs[(1 - 1)], 0, 0, pstream__)),
                  nil_index_list()),
                parvectform(whichequals(whenvecs[(1 - 1)], 0, 0, pstream__),
                  state, 1, matsetup, matvalues, si, pstream__),
                "assigning variable statetf");
              current_statement__ = 264;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(10),
                          cons_list(index_multi(std::vector<int>{5, 1}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 263;
                assign(PARS, nil_index_list(),
                  mcalc(stan::model::deep_copy(PARS), indparams, statetf,
                    std::vector<int>{0, 1}, 10, matsetup, matvalues,
                    si, pstream__), "assigning variable PARS");
              } 
              current_statement__ = 266;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(1),
                          cons_list(index_multi(std::vector<int>{5, 1}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 265;
                assign(T0MEANS, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0MEANS), indparams, statetf,
                    std::vector<int>{0, 1}, 1, matsetup, matvalues,
                    si, pstream__), "assigning variable T0MEANS");
              } 
              current_statement__ = 268;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(8),
                          cons_list(index_multi(std::vector<int>{5, 1}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 267;
                assign(T0VAR, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0VAR), indparams, statetf,
                    std::vector<int>{0, 1}, 8, matsetup, matvalues,
                    si, pstream__), "assigning variable T0VAR");
              } 
              current_statement__ = 271;
              for (int li = 1; li <= nlatentpop; ++li) {
                current_statement__ = 270;
                if (is_nan(state[(li - 1)])) {
                  current_statement__ = 269;
                  assign(state, cons_list(index_uni(li), nil_index_list()),
                    rvalue(T0MEANS,
                      cons_list(index_uni(li),
                        cons_list(index_uni(1), nil_index_list())),
                      "T0MEANS"), "assigning variable state");
                } }
              current_statement__ = 273;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(2),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 272;
                assign(LAMBDA, nil_index_list(),
                  mcalc(stan::model::deep_copy(LAMBDA), indparams, statetf,
                    std::vector<int>{0}, 2, matsetup, matvalues,
                    si, pstream__), "assigning variable LAMBDA");
              } 
              current_statement__ = 275;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(3),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 274;
                assign(DRIFT, nil_index_list(),
                  mcalc(stan::model::deep_copy(DRIFT), indparams, statetf,
                    std::vector<int>{0}, 3, matsetup, matvalues,
                    si, pstream__), "assigning variable DRIFT");
              } 
              current_statement__ = 277;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(4),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 276;
                assign(DIFFUSION, nil_index_list(),
                  mcalc(stan::model::deep_copy(DIFFUSION), indparams,
                    statetf, std::vector<int>{0}, 4, matsetup, matvalues,
                    si, pstream__), "assigning variable DIFFUSION");
              } 
              current_statement__ = 279;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(5),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 278;
                assign(MANIFESTVAR, nil_index_list(),
                  mcalc(stan::model::deep_copy(MANIFESTVAR), indparams,
                    statetf, std::vector<int>{0}, 5, matsetup, matvalues,
                    si, pstream__), "assigning variable MANIFESTVAR");
              } 
              current_statement__ = 281;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(6),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 280;
                assign(MANIFESTMEANS, nil_index_list(),
                  mcalc(stan::model::deep_copy(MANIFESTMEANS), indparams,
                    statetf, std::vector<int>{0}, 6, matsetup, matvalues,
                    si, pstream__), "assigning variable MANIFESTMEANS");
              } 
              current_statement__ = 283;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(7),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 282;
                assign(CINT, nil_index_list(),
                  mcalc(stan::model::deep_copy(CINT), indparams, statetf,
                    std::vector<int>{0}, 7, matsetup, matvalues,
                    si, pstream__), "assigning variable CINT");
              } 
              current_statement__ = 285;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(8),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 284;
                assign(T0VAR, nil_index_list(),
                  mcalc(stan::model::deep_copy(T0VAR), indparams, statetf,
                    std::vector<int>{0}, 8, matsetup, matvalues,
                    si, pstream__), "assigning variable T0VAR");
              } 
              current_statement__ = 287;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(9),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 286;
                assign(TDPREDEFFECT, nil_index_list(),
                  mcalc(stan::model::deep_copy(TDPREDEFFECT), indparams,
                    statetf, std::vector<int>{0}, 9, matsetup, matvalues,
                    si, pstream__), "assigning variable TDPREDEFFECT");
              } 
              current_statement__ = 289;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(52),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 288;
                assign(JAx, nil_index_list(),
                  mcalc(stan::model::deep_copy(JAx), indparams, statetf,
                    std::vector<int>{0}, 52, matsetup, matvalues,
                    si, pstream__), "assigning variable JAx");
              } 
              current_statement__ = 291;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(53),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 290;
                assign(Jtd, nil_index_list(),
                  mcalc(stan::model::deep_copy(Jtd), indparams, statetf,
                    std::vector<int>{0}, 53, matsetup, matvalues,
                    si, pstream__), "assigning variable Jtd");
              } 
              current_statement__ = 293;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    sum(
                      rvalue(whenmat,
                        cons_list(index_uni(54),
                          cons_list(index_multi(std::vector<int>{5}),
                            nil_index_list())), "whenmat")), 0)))) {
                current_statement__ = 292;
                assign(Jy, nil_index_list(),
                  mcalc(stan::model::deep_copy(Jy), indparams, statetf,
                    std::vector<int>{0}, 54, matsetup, matvalues,
                    si, pstream__), "assigning variable Jy");
              } 
              current_statement__ = 295;
              if (logical_eq(verbose, 2)) {
                current_statement__ = 294;
                if (pstream__) {
                  stan_print(pstream__, "DRIFT = ");
                  stan_print(pstream__, DRIFT);
                  stan_print(pstream__, "\n");
                }
              } 
              current_statement__ = 297;
              if (logical_eq(verbose, 2)) {
                current_statement__ = 296;
                if (pstream__) {
                  stan_print(pstream__, "indparams = ");
                  stan_print(pstream__, indparams);
                  stan_print(pstream__, "\n");
                }
              } 
              current_statement__ = 314;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  logical_gt(
                    (sum(
                       rvalue(whenmat,
                         cons_list(index_uni(8),
                           cons_list(index_omni(), nil_index_list())),
                         "whenmat")) + statedep[(8 - 1)]), 0)))) {
                current_statement__ = 299;
                if ((primitive_value(intoverpop) && primitive_value(
                    logical_gt(nindvarying, 0)))) {
                  current_statement__ = 298;
                  assign(T0VAR,
                    cons_list(index_multi(intoverpopindvaryingindex),
                      cons_list(index_multi(intoverpopindvaryingindex),
                        nil_index_list())), rawpopcovbase,
                    "assigning variable T0VAR");
                } 
                current_statement__ = 300;
                assign(T0cov, nil_index_list(),
                  sdcovsqrt2cov(T0VAR, choleskymats, pstream__),
                  "assigning variable T0cov");
                current_statement__ = 312;
                if ((primitive_value(intoverpop) && primitive_value(
                    logical_gt(nindvarying, 0)))) {
                  current_statement__ = 302;
                  if (logical_eq(si, 0)) {
                    current_statement__ = 301;
                    assign(rawpopcovchol, nil_index_list(),
                      cholesky_decompose(
                        makesym(
                          rvalue(T0cov,
                            cons_list(index_multi(intoverpopindvaryingindex),
                              cons_list(
                                index_multi(intoverpopindvaryingindex),
                                nil_index_list())), "T0cov"), verbose,
                          1, pstream__)), "assigning variable rawpopcovchol");
                  } 
                  current_statement__ = 310;
                  for (int ri = 1; ri <= stan::math::size(matsetup); ++ri) {
                    current_statement__ = 308;
                    if (logical_eq(matsetup[(ri - 1)][(7 - 1)], 1)) {
                      current_statement__ = 306;
                      if (matsetup[(ri - 1)][(5 - 1)]) {
                        current_statement__ = 303;
                        assign(T0cov,
                          cons_list(index_uni(matsetup[(ri - 1)][(1 - 1)]),
                            cons_list(index_omni(), nil_index_list())),
                          multiply(
                            stan::model::deep_copy(
                              rvalue(T0cov,
                                cons_list(
                                  index_uni(matsetup[(ri - 1)][(1 - 1)]),
                                  cons_list(index_omni(), nil_index_list())),
                                "T0cov")),
                            (matvalues[(ri - 1)][(2 - 1)] *
                              matvalues[(ri - 1)][(3 - 1)])),
                          "assigning variable T0cov");
                        current_statement__ = 304;
                        assign(T0cov,
                          cons_list(index_omni(),
                            cons_list(index_uni(matsetup[(ri - 1)][(1 - 1)]),
                              nil_index_list())),
                          multiply(
                            stan::model::deep_copy(
                              rvalue(T0cov,
                                cons_list(index_omni(),
                                  cons_list(
                                    index_uni(matsetup[(ri - 1)][(1 - 1)]),
                                    nil_index_list())), "T0cov")),
                            (matvalues[(ri - 1)][(2 - 1)] *
                              matvalues[(ri - 1)][(3 - 1)])),
                          "assigning variable T0cov");
                      } 
                    } }
                } 
              } 
              current_statement__ = 315;
              assign(etacov, nil_index_list(), T0cov,
                "assigning variable etacov");
            } 
            current_statement__ = 319;
            if (logical_gt(verbose, 1)) {
              current_statement__ = 318;
              if (pstream__) {
                stan_print(pstream__, "below t0 row ");
                stan_print(pstream__, rowi);
                stan_print(pstream__, "\n");
              }
            } 
            current_statement__ = 408;
            if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                logical_gt(T0check, 0)))) {
              current_statement__ = 320;
              validate_non_negative_index("base", "nlatent", nlatent);
              Eigen::Matrix<double, -1, 1> base;
              base = Eigen::Matrix<double, -1, 1>(nlatent);
              stan::math::fill(base, std::numeric_limits<double>::quiet_NaN());
              
              double intstepi;
              intstepi = std::numeric_limits<double>::quiet_NaN();
              
              current_statement__ = 322;
              intstepi = 0;
              current_statement__ = 323;
              dtsmall = (dt / ceil((dt / maxtimestep)));
              current_statement__ = 406;
              while (logical_lt(intstepi, (dt - 1e-10))) {
                current_statement__ = 324;
                intstepi = (intstepi + dtsmall);
                {
                  std::vector<int> zeroint;
                  zeroint = std::vector<int>(1, std::numeric_limits<int>::min());
                  
                  current_statement__ = 326;
                  validate_non_negative_index("basestate", "nlatentpop",
                                              nlatentpop);
                  Eigen::Matrix<double, 1, -1> basestate;
                  basestate = Eigen::Matrix<double, 1, -1>(nlatentpop);
                  stan::math::fill(basestate, std::numeric_limits<double>::quiet_NaN());
                  
                  current_statement__ = 327;
                  assign(basestate, nil_index_list(), state,
                    "assigning variable basestate");
                  current_statement__ = 328;
                  assign(zeroint, cons_list(index_uni(1), nil_index_list()),
                    0, "assigning variable zeroint");
                  {
                    std::vector<int> sym1__;
                    current_statement__ = 329;
                    assign(sym1__, nil_index_list(),
                      append_array(JAxfinite, zeroint),
                      "assigning variable sym1__");
                    current_statement__ = 329;
                    for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__);
                         ++sym2__) {
                      {
                        int statei;
                        current_statement__ = 329;
                        statei = sym1__[(sym2__ - 1)];
                        current_statement__ = 330;
                        assign(state, nil_index_list(), basestate,
                          "assigning variable state");
                        current_statement__ = 332;
                        if (logical_gt(statei, 0)) {
                          current_statement__ = 331;
                          assign(state,
                            cons_list(index_uni(statei), nil_index_list()),
                            (state[(statei - 1)] + Jstep),
                            "assigning variable state");
                        } 
                        current_statement__ = 333;
                        assign(statetf,
                          cons_list(
                            index_multi(whichequals(whenvecs[(2 - 1)], 0,
                                          0, pstream__)), nil_index_list()),
                          parvectform(
                            whichequals(whenvecs[(2 - 1)], 0, 0, pstream__),
                            state, 2, matsetup, matvalues, si, pstream__),
                          "assigning variable statetf");
                        current_statement__ = 335;
                        if ((primitive_value(statedep[(10 - 1)]) ||
                            primitive_value(whenmat[(10 - 1)][(2 - 1)]))) {
                          current_statement__ = 334;
                          assign(PARS, nil_index_list(),
                            mcalc(stan::model::deep_copy(PARS), indparams,
                              statetf, std::vector<int>{2}, 10, matsetup,
                              matvalues, si, pstream__),
                            "assigning variable PARS");
                        } 
                        current_statement__ = 337;
                        if ((primitive_value(statedep[(3 - 1)]) ||
                            primitive_value(whenmat[(3 - 1)][(2 - 1)]))) {
                          current_statement__ = 336;
                          assign(DRIFT, nil_index_list(),
                            mcalc(stan::model::deep_copy(DRIFT), indparams,
                              statetf, std::vector<int>{2}, 3, matsetup,
                              matvalues, si, pstream__),
                            "assigning variable DRIFT");
                        } 
                        current_statement__ = 339;
                        if ((primitive_value(statedep[(7 - 1)]) ||
                            primitive_value(whenmat[(7 - 1)][(2 - 1)]))) {
                          current_statement__ = 338;
                          assign(CINT, nil_index_list(),
                            mcalc(stan::model::deep_copy(CINT), indparams,
                              statetf, std::vector<int>{2}, 7, matsetup,
                              matvalues, si, pstream__),
                            "assigning variable CINT");
                        } 
                        current_statement__ = 344;
                        if (logical_gt(statei, 0)) {
                          current_statement__ = 340;
                          assign(JAx,
                            cons_list(index_min_max(1, nlatent),
                              cons_list(index_uni(statei), nil_index_list())),
                            add(
                              multiply(DRIFT,
                                transpose(
                                  rvalue(state,
                                    cons_list(index_min_max(1, nlatent),
                                      nil_index_list()), "state"))),
                              rvalue(CINT,
                                cons_list(index_omni(),
                                  cons_list(index_uni(1), nil_index_list())),
                                "CINT")), "assigning variable JAx");
                          current_statement__ = 342;
                          if (logical_gt(verbose, 1)) {
                            current_statement__ = 341;
                            if (pstream__) {
                              stan_print(pstream__, "JAx ");
                              stan_print(pstream__, JAx);
                              stan_print(pstream__, "\n");
                            }
                          } 
                        } 
                        current_statement__ = 352;
                        if ((primitive_value(logical_eq(statei, 0)) &&
                            primitive_value(stan::math::size(JAxfinite)))) {
                          current_statement__ = 345;
                          assign(base, nil_index_list(),
                            add(
                              multiply(DRIFT,
                                transpose(
                                  rvalue(state,
                                    cons_list(index_min_max(1, nlatent),
                                      nil_index_list()), "state"))),
                              rvalue(CINT,
                                cons_list(index_omni(),
                                  cons_list(index_uni(1), nil_index_list())),
                                "CINT")), "assigning variable base");
                          current_statement__ = 347;
                          if (logical_gt(verbose, 1)) {
                            current_statement__ = 346;
                            if (pstream__) {
                              stan_print(pstream__, "base = ");
                              stan_print(pstream__, base);
                              stan_print(pstream__, "    sjaxinit= ");
                              stan_print(pstream__, JAx);
                              stan_print(pstream__, "\n");
                            }
                          } 
                          current_statement__ = 348;
                          for (int sym1__ = 1;
                               sym1__ <= stan::math::size(JAxfinite);
                               ++sym1__) {
                            {
                              int fi;
                              current_statement__ = 348;
                              fi = JAxfinite[(sym1__ - 1)];
                              current_statement__ = 349;
                              assign(JAx,
                                cons_list(index_min_max(1, nlatent),
                                  cons_list(index_uni(fi), nil_index_list())),
                                subtract(
                                  stan::model::deep_copy(
                                    rvalue(JAx,
                                      cons_list(index_min_max(1, nlatent),
                                        cons_list(index_uni(fi),
                                          nil_index_list())), "JAx")), base),
                                "assigning variable JAx");
                              current_statement__ = 350;
                              assign(JAx,
                                cons_list(index_min_max(1, nlatent),
                                  cons_list(index_uni(fi), nil_index_list())),
                                divide(
                                  stan::model::deep_copy(
                                    rvalue(JAx,
                                      cons_list(index_min_max(1, nlatent),
                                        cons_list(index_uni(fi),
                                          nil_index_list())), "JAx")), Jstep),
                                "assigning variable JAx");
                            }}
                        } 
                      }}
                  }
                  current_statement__ = 354;
                  if (logical_gt(verbose, 1)) {
                    current_statement__ = 353;
                    if (pstream__) {
                      stan_print(pstream__, "JAx ");
                      stan_print(pstream__, JAx);
                      stan_print(pstream__, "\n");
                    }
                  } 
                }
                current_statement__ = 357;
                if ((primitive_value(statedep[(4 - 1)]) || primitive_value(
                    whenmat[(4 - 1)][(2 - 1)]))) {
                  current_statement__ = 356;
                  assign(DIFFUSION, nil_index_list(),
                    mcalc(stan::model::deep_copy(DIFFUSION), indparams,
                      statetf, std::vector<int>{2}, 4, matsetup, matvalues,
                      si, pstream__), "assigning variable DIFFUSION");
                } 
                current_statement__ = 359;
                if ((primitive_value(statedep[(52 - 1)]) || primitive_value(
                    whenmat[(52 - 1)][(2 - 1)]))) {
                  current_statement__ = 358;
                  assign(JAx, nil_index_list(),
                    mcalc(stan::model::deep_copy(JAx), indparams, statetf,
                      std::vector<int>{2}, 52, matsetup, matvalues,
                      si, pstream__), "assigning variable JAx");
                } 
                current_statement__ = 364;
                if ((primitive_value((primitive_value((primitive_value(
                    logical_eq(si, 0)) || primitive_value(
                    statedep[(4 - 1)]))) || primitive_value(
                    whenmat[(4 - 1)][(2 - 1)]))) || primitive_value(
                    (primitive_value(logical_eq(T0check, 1)) &&
                    primitive_value(whenmat[(4 - 1)][(5 - 1)]))))) {
                  current_statement__ = 360;
                  assign(DIFFUSIONcov,
                    cons_list(index_multi(derrind),
                      cons_list(index_multi(derrind), nil_index_list())),
                    sdcovsqrt2cov(
                      rvalue(DIFFUSION,
                        cons_list(index_multi(derrind),
                          cons_list(index_multi(derrind), nil_index_list())),
                        "DIFFUSION"), choleskymats, pstream__),
                    "assigning variable DIFFUSIONcov");
                  current_statement__ = 362;
                  if (logical_negation(continuoustime)) {
                    current_statement__ = 361;
                    assign(discreteDIFFUSION, nil_index_list(), DIFFUSIONcov,
                      "assigning variable discreteDIFFUSION");
                  } 
                } 
                current_statement__ = 394;
                if (continuoustime) {
                  current_statement__ = 375;
                  if ((primitive_value((primitive_value((primitive_value(
                      (primitive_value((primitive_value(logical_eq(si, 0)) ||
                      primitive_value(logical_eq(dtchange, 1)))) ||
                      primitive_value(statedep[(3 - 1)]))) ||
                      primitive_value(statedep[(52 - 1)]))) ||
                      primitive_value(whenmat[(3 - 1)][(2 - 1)]))) ||
                      primitive_value((primitive_value(
                      logical_eq(T0check, 1)) && primitive_value(
                      whenmat[(3 - 1)][(5 - 1)]))))) {
                    current_statement__ = 365;
                    assign(discreteDRIFT, nil_index_list(),
                      expm2(multiply(DRIFT, dtsmall), pstream__),
                      "assigning variable discreteDRIFT");
                    current_statement__ = 369;
                    if (logical_negation(JAxDRIFTequiv)) {
                      current_statement__ = 367;
                      assign(eJAx, nil_index_list(),
                        expm2(multiply(JAx, dtsmall), pstream__),
                        "assigning variable eJAx");
                    } else {
                      current_statement__ = 366;
                      assign(eJAx,
                        cons_list(index_min_max(1, nlatent),
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list())), discreteDRIFT,
                        "assigning variable eJAx");
                    }
                    current_statement__ = 372;
                    if ((primitive_value((primitive_value((primitive_value(
                        (primitive_value((primitive_value((primitive_value(
                        logical_eq(si, 0)) || primitive_value(
                        statedep[(3 - 1)]))) || primitive_value(
                        statedep[(4 - 1)]))) || primitive_value(
                        statedep[(52 - 1)]))) || primitive_value(
                        whenmat[(4 - 1)][(2 - 1)]))) || primitive_value(
                        whenmat[(3 - 1)][(2 - 1)]))) || primitive_value(
                        (primitive_value(logical_eq(T0check, 1)) &&
                        primitive_value((primitive_value(
                        whenmat[(3 - 1)][(5 - 1)]) || primitive_value(
                        whenmat[(4 - 1)][(5 - 1)]))))))) {
                      current_statement__ = 370;
                      assign(asymDIFFUSIONcov,
                        cons_list(index_multi(derrind),
                          cons_list(index_multi(derrind), nil_index_list())),
                        ksolve(
                          rvalue(JAx,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "JAx"),
                          rvalue(DIFFUSIONcov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "DIFFUSIONcov"),
                          verbose, pstream__),
                        "assigning variable asymDIFFUSIONcov");
                    } 
                    current_statement__ = 373;
                    assign(discreteDIFFUSION,
                      cons_list(index_multi(derrind),
                        cons_list(index_multi(derrind), nil_index_list())),
                      subtract(
                        rvalue(asymDIFFUSIONcov,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "asymDIFFUSIONcov"),
                        quad_form_sym(
                          rvalue(asymDIFFUSIONcov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "asymDIFFUSIONcov"),
                          transpose(
                            rvalue(eJAx,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "eJAx")))),
                      "assigning variable discreteDIFFUSION");
                  } 
                  current_statement__ = 379;
                  for (int li = 1; li <= nlatent; ++li) {
                    current_statement__ = 378;
                    if ((primitive_value(is_nan(state[(li - 1)])) ||
                        primitive_value(
                        is_nan(
                          sum(
                            rvalue(discreteDRIFT,
                              cons_list(index_uni(li),
                                cons_list(index_omni(), nil_index_list())),
                              "discreteDRIFT")))))) {
                      current_statement__ = 376;
                      if (pstream__) {
                        stan_print(pstream__, "Possible time step problem? Intervals too large? Try reduce maxtimestep");
                        stan_print(pstream__, "\n");
                      }
                    } }
                  current_statement__ = 380;
                  assign(state,
                    cons_list(index_min_max(1, nlatent), nil_index_list()),
                    multiply(
                      stan::model::deep_copy(
                        rvalue(state,
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list()), "state")),
                      transpose(discreteDRIFT)), "assigning variable state");
                  current_statement__ = 386;
                  if (stan::math::size(CINTnonzero)) {
                    current_statement__ = 383;
                    if ((primitive_value((primitive_value((primitive_value(
                        (primitive_value((primitive_value((primitive_value(
                        logical_eq(si, 0)) || primitive_value(
                        logical_eq(dtchange, 1)))) || primitive_value(
                        statedep[(3 - 1)]))) || primitive_value(
                        statedep[(7 - 1)]))) || primitive_value(
                        whenmat[(3 - 1)][(2 - 1)]))) || primitive_value(
                        whenmat[(7 - 1)][(2 - 1)]))) || primitive_value(
                        (primitive_value(logical_eq(T0check, 1)) &&
                        primitive_value((primitive_value(
                        whenmat[(7 - 1)][(5 - 1)]) || primitive_value(
                        whenmat[(3 - 1)][(5 - 1)]))))))) {
                      current_statement__ = 381;
                      assign(discreteCINT, nil_index_list(),
                        multiply(
                          mdivide_left(DRIFT,
                            subtract(discreteDRIFT,
                              rvalue(IIlatentpop,
                                cons_list(index_min_max(1, nlatent),
                                  cons_list(index_min_max(1, nlatent),
                                    nil_index_list())), "IIlatentpop"))),
                          rvalue(CINT,
                            cons_list(index_omni(),
                              cons_list(index_uni(1), nil_index_list())),
                            "CINT")), "assigning variable discreteCINT");
                    } 
                    current_statement__ = 384;
                    assign(state,
                      cons_list(index_min_max(1, nlatent), nil_index_list()),
                      add(
                        stan::model::deep_copy(
                          rvalue(state,
                            cons_list(index_min_max(1, nlatent),
                              nil_index_list()), "state")),
                        transpose(discreteCINT)), "assigning variable state");
                  } 
                  current_statement__ = 390;
                  if ((primitive_value(logical_eq(intoverstates, 1)) ||
                      primitive_value(logical_eq(dosmoother, 1)))) {
                    current_statement__ = 387;
                    assign(etacov, nil_index_list(),
                      quad_form_sym(
                        makesym(stan::model::deep_copy(etacov), verbose,
                          1, pstream__), transpose(eJAx)),
                      "assigning variable etacov");
                    current_statement__ = 388;
                    assign(etacov,
                      cons_list(index_multi(derrind),
                        cons_list(index_multi(derrind), nil_index_list())),
                      add(
                        stan::model::deep_copy(
                          rvalue(etacov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "etacov")),
                        rvalue(discreteDIFFUSION,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "discreteDIFFUSION")), "assigning variable etacov");
                  } 
                  current_statement__ = 392;
                  if ((primitive_value(logical_gte(intstepi, (dt - 1e-10)))
                      && primitive_value(dosmoother))) {
                    current_statement__ = 391;
                    assign(eJAxs,
                      cons_list(index_uni(rowi),
                        cons_list(index_omni(),
                          cons_list(index_omni(), nil_index_list()))),
                      expm2(multiply(JAx, dt), pstream__),
                      "assigning variable eJAxs");
                  } 
                } 
                current_statement__ = 404;
                if (logical_eq(continuoustime, 0)) {
                  current_statement__ = 396;
                  if (dosmoother) {
                    current_statement__ = 395;
                    assign(eJAxs,
                      cons_list(index_uni(rowi),
                        cons_list(index_omni(),
                          cons_list(index_omni(), nil_index_list()))), JAx,
                      "assigning variable eJAxs");
                  } 
                  current_statement__ = 400;
                  if ((primitive_value(logical_eq(intoverstates, 1)) ||
                      primitive_value(logical_eq(dosmoother, 1)))) {
                    current_statement__ = 397;
                    assign(etacov, nil_index_list(),
                      quad_form_sym(
                        makesym(stan::model::deep_copy(etacov), verbose,
                          1, pstream__), transpose(JAx)),
                      "assigning variable etacov");
                    current_statement__ = 398;
                    assign(etacov,
                      cons_list(index_multi(derrind),
                        cons_list(index_multi(derrind), nil_index_list())),
                      add(
                        stan::model::deep_copy(
                          rvalue(etacov,
                            cons_list(index_multi(derrind),
                              cons_list(index_multi(derrind),
                                nil_index_list())), "etacov")),
                        rvalue(DIFFUSIONcov,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "DIFFUSIONcov")), "assigning variable etacov");
                  } 
                  current_statement__ = 401;
                  assign(state,
                    cons_list(index_min_max(1, nlatent), nil_index_list()),
                    multiply(
                      stan::model::deep_copy(
                        rvalue(state,
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list()), "state")), transpose(DRIFT)),
                    "assigning variable state");
                  current_statement__ = 402;
                  assign(state,
                    cons_list(index_multi(CINTnonzero), nil_index_list()),
                    add(
                      stan::model::deep_copy(
                        rvalue(state,
                          cons_list(index_multi(CINTnonzero),
                            nil_index_list()), "state")),
                      transpose(
                        rvalue(CINT,
                          cons_list(index_multi(CINTnonzero),
                            cons_list(index_uni(1), nil_index_list())),
                          "CINT"))), "assigning variable state");
                } 
              }
            } 
            current_statement__ = 425;
            if (logical_gt(ntdpred, 0)) {
              int nonzerotdpred;
              nonzerotdpred = std::numeric_limits<int>::min();
              
              current_statement__ = 409;
              nonzerotdpred = 0;
              current_statement__ = 412;
              for (int tdi = 1; tdi <= ntdpred; ++tdi) {
                current_statement__ = 411;
                if (logical_neq(tdpreds[(rowi - 1)][(tdi - 1)], 0.0)) {
                  current_statement__ = 410;
                  nonzerotdpred = 1;
                } }
              current_statement__ = 423;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  nonzerotdpred))) {
                current_statement__ = 413;
                assign(statetf,
                  cons_list(
                    index_multi(whichequals(whenvecs[(3 - 1)], 0,
                                  0, pstream__)), nil_index_list()),
                  parvectform(
                    whichequals(whenvecs[(3 - 1)], 0, 0, pstream__), state,
                    3, matsetup, matvalues, si, pstream__),
                  "assigning variable statetf");
                current_statement__ = 415;
                if ((primitive_value(statedep[(10 - 1)]) || primitive_value(
                    whenmat[(10 - 1)][(3 - 1)]))) {
                  current_statement__ = 414;
                  assign(PARS, nil_index_list(),
                    mcalc(stan::model::deep_copy(PARS), indparams, statetf,
                      std::vector<int>{3}, 10, matsetup, matvalues,
                      si, pstream__), "assigning variable PARS");
                } 
                current_statement__ = 417;
                if ((primitive_value(statedep[(9 - 1)]) || primitive_value(
                    whenmat[(9 - 1)][(3 - 1)]))) {
                  current_statement__ = 416;
                  assign(TDPREDEFFECT, nil_index_list(),
                    mcalc(stan::model::deep_copy(TDPREDEFFECT), indparams,
                      statetf, std::vector<int>{3}, 9, matsetup, matvalues,
                      si, pstream__), "assigning variable TDPREDEFFECT");
                } 
                current_statement__ = 419;
                if ((primitive_value(statedep[(53 - 1)]) || primitive_value(
                    whenmat[(53 - 1)][(3 - 1)]))) {
                  current_statement__ = 418;
                  assign(Jtd, nil_index_list(),
                    mcalc(stan::model::deep_copy(Jtd), indparams, statetf,
                      std::vector<int>{3}, 53, matsetup, matvalues,
                      si, pstream__), "assigning variable Jtd");
                } 
                current_statement__ = 420;
                assign(state,
                  cons_list(index_min_max(1, nlatent), nil_index_list()),
                  add(
                    stan::model::deep_copy(
                      rvalue(state,
                        cons_list(index_min_max(1, nlatent),
                          nil_index_list()), "state")),
                    transpose(multiply(TDPREDEFFECT, tdpreds[(rowi - 1)]))),
                  "assigning variable state");
                current_statement__ = 421;
                assign(etacov, nil_index_list(),
                  quad_form_sym(
                    makesym(stan::model::deep_copy(etacov), verbose,
                      1, pstream__), transpose(Jtd)),
                  "assigning variable etacov");
              } 
            } 
            current_statement__ = 431;
            if ((primitive_value(logical_gt(si, 0)) && primitive_value(
                logical_eq(intoverstates, 0)))) {
              current_statement__ = 427;
              if (logical_eq(T0check, 0)) {
                current_statement__ = 426;
                assign(state, nil_index_list(),
                  add(stan::model::deep_copy(state),
                    transpose(
                      multiply(cholesky_decompose(etacov),
                        rvalue(etaupdbasestates,
                          cons_list(
                            index_min_max((1 + ((rowi - 1) * nlatentpop)), 
                            (rowi * nlatentpop)), nil_index_list()),
                          "etaupdbasestates")))), "assigning variable state");
              } 
              current_statement__ = 429;
              if (logical_gt(T0check, 0)) {
                current_statement__ = 428;
                assign(state,
                  cons_list(index_multi(derrind), nil_index_list()),
                  add(
                    stan::model::deep_copy(
                      rvalue(state,
                        cons_list(index_multi(derrind), nil_index_list()),
                        "state")),
                    transpose(
                      multiply(
                        cholesky_decompose(
                          makesym(
                            rvalue(discreteDIFFUSION,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "discreteDIFFUSION"),
                            verbose, 1, pstream__)),
                        rvalue(
                          rvalue(etaupdbasestates,
  cons_list(
    index_min_max((1 + ((rowi - 1) * nlatentpop)), (nlatent +
                                                     ((rowi - 1) *
                                                       nlatentpop))),
    nil_index_list()), "etaupdbasestates"),
                          cons_list(index_multi(derrind), nil_index_list()),
                          "etaupdbasestates[(1 + ((rowi - 1) * nlatentpop)):(nlatent + ((rowi - 1) * nlatentpop))]")))),
                  "assigning variable state");
              } 
            } 
            current_statement__ = 435;
            if (logical_gt(verbose, 1)) {
              current_statement__ = 432;
              if (pstream__) {
                stan_print(pstream__, "etaprior = ");
                stan_print(pstream__, state);
                stan_print(pstream__, "\n");
              }
              current_statement__ = 433;
              if (pstream__) {
                stan_print(pstream__, "etapriorcov = ");
                stan_print(pstream__, etacov);
                stan_print(pstream__, "\n");
              }
            } 
            current_statement__ = 439;
            if (dosmoother) {
              current_statement__ = 436;
              assign(etacovb,
                cons_list(index_uni(1),
                  cons_list(index_uni(rowi), nil_index_list())), etacov,
                "assigning variable etacovb");
              current_statement__ = 437;
              assign(etab,
                cons_list(index_uni(1),
                  cons_list(index_uni(rowi), nil_index_list())),
                transpose(state), "assigning variable etab");
            } 
            current_statement__ = 479;
            if ((primitive_value((primitive_value(logical_eq(si, 0)) ||
                primitive_value(logical_gt(nobs_y[(rowi - 1)], 0)))) ||
                primitive_value(dosmoother))) {
              std::vector<int> zeroint;
              zeroint = std::vector<int>(1, std::numeric_limits<int>::min());
              
              current_statement__ = 441;
              validate_non_negative_index("basestate", "nlatentpop",
                                          nlatentpop);
              Eigen::Matrix<double, 1, -1> basestate;
              basestate = Eigen::Matrix<double, 1, -1>(nlatentpop);
              stan::math::fill(basestate, std::numeric_limits<double>::quiet_NaN());
              
              current_statement__ = 442;
              assign(basestate, nil_index_list(), state,
                "assigning variable basestate");
              current_statement__ = 443;
              assign(zeroint, cons_list(index_uni(1), nil_index_list()), 0,
                "assigning variable zeroint");
              {
                std::vector<int> sym1__;
                current_statement__ = 444;
                assign(sym1__, nil_index_list(),
                  append_array(Jyfinite, zeroint),
                  "assigning variable sym1__");
                current_statement__ = 444;
                for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__);
                     ++sym2__) {
                  {
                    int statei;
                    current_statement__ = 444;
                    statei = sym1__[(sym2__ - 1)];
                    current_statement__ = 445;
                    assign(state, nil_index_list(), basestate,
                      "assigning variable state");
                    current_statement__ = 447;
                    if ((primitive_value(logical_gt(statei, 0)) &&
                        primitive_value(
                        logical_gt((dosmoother + intoverstates), 0)))) {
                      current_statement__ = 446;
                      assign(state,
                        cons_list(index_uni(statei), nil_index_list()),
                        (state[(statei - 1)] + Jstep),
                        "assigning variable state");
                    } 
                    current_statement__ = 448;
                    assign(statetf,
                      cons_list(
                        index_multi(whichequals(whenvecs[(4 - 1)], 0,
                                      0, pstream__)), nil_index_list()),
                      parvectform(
                        whichequals(whenvecs[(4 - 1)], 0, 0, pstream__),
                        state, 4, matsetup, matvalues, si, pstream__),
                      "assigning variable statetf");
                    current_statement__ = 450;
                    if ((primitive_value(statedep[(10 - 1)]) ||
                        primitive_value(whenmat[(10 - 1)][(4 - 1)]))) {
                      current_statement__ = 449;
                      assign(PARS, nil_index_list(),
                        mcalc(stan::model::deep_copy(PARS), indparams,
                          statetf, std::vector<int>{4}, 10, matsetup,
                          matvalues, si, pstream__),
                        "assigning variable PARS");
                    } 
                    current_statement__ = 452;
                    if ((primitive_value(statedep[(2 - 1)]) ||
                        primitive_value(whenmat[(2 - 1)][(4 - 1)]))) {
                      current_statement__ = 451;
                      assign(LAMBDA, nil_index_list(),
                        mcalc(stan::model::deep_copy(LAMBDA), indparams,
                          statetf, std::vector<int>{4}, 2, matsetup,
                          matvalues, si, pstream__),
                        "assigning variable LAMBDA");
                    } 
                    current_statement__ = 454;
                    if ((primitive_value(statedep[(5 - 1)]) ||
                        primitive_value(whenmat[(5 - 1)][(4 - 1)]))) {
                      current_statement__ = 453;
                      assign(MANIFESTVAR, nil_index_list(),
                        mcalc(stan::model::deep_copy(MANIFESTVAR), indparams,
                          statetf, std::vector<int>{4}, 5, matsetup,
                          matvalues, si, pstream__),
                        "assigning variable MANIFESTVAR");
                    } 
                    current_statement__ = 456;
                    if ((primitive_value(statedep[(6 - 1)]) ||
                        primitive_value(whenmat[(6 - 1)][(4 - 1)]))) {
                      current_statement__ = 455;
                      assign(MANIFESTMEANS, nil_index_list(),
                        mcalc(stan::model::deep_copy(MANIFESTMEANS),
                          indparams, statetf, std::vector<int>{4}, 6,
                          matsetup, matvalues, si, pstream__),
                        "assigning variable MANIFESTMEANS");
                    } 
                    current_statement__ = 458;
                    if ((primitive_value(statedep[(54 - 1)]) ||
                        primitive_value(whenmat[(54 - 1)][(4 - 1)]))) {
                      current_statement__ = 457;
                      assign(Jy, nil_index_list(),
                        mcalc(stan::model::deep_copy(Jy), indparams, statetf,
                          std::vector<int>{4}, 54, matsetup, matvalues,
                          si, pstream__), "assigning variable Jy");
                    } 
                    current_statement__ = 464;
                    if ((primitive_value(logical_gt(statei, 0)) &&
                        primitive_value(logical_gt(intoverstates, 0)))) {
                      current_statement__ = 459;
                      assign(Jy,
                        cons_list(index_multi(o),
                          cons_list(index_uni(statei), nil_index_list())),
                        add(
                          multiply(
                            rvalue(LAMBDA,
                              cons_list(index_multi(o), nil_index_list()),
                              "LAMBDA"),
                            transpose(
                              rvalue(state,
                                cons_list(index_min_max(1, nlatent),
                                  nil_index_list()), "state"))),
                          rvalue(MANIFESTMEANS,
                            cons_list(index_multi(o),
                              cons_list(index_uni(1), nil_index_list())),
                            "MANIFESTMEANS")), "assigning variable Jy");
                      current_statement__ = 460;
                      assign(Jy,
                        cons_list(index_multi(o1),
                          cons_list(index_uni(statei), nil_index_list())),
                        to_vector(
                          inv_logit(
                            to_array_1d(
                              stan::model::deep_copy(
                                rvalue(Jy,
                                  cons_list(index_multi(o1),
                                    cons_list(index_uni(statei),
                                      nil_index_list())), "Jy"))))),
                        "assigning variable Jy");
                      current_statement__ = 462;
                      if (logical_gt(verbose, 1)) {
                        current_statement__ = 461;
                        if (pstream__) {
                          stan_print(pstream__, "Jy ");
                          stan_print(pstream__, Jy);
                          stan_print(pstream__, "\n");
                        }
                      } 
                    } 
                    current_statement__ = 475;
                    if (logical_eq(statei, 0)) {
                      current_statement__ = 465;
                      assign(syprior,
                        cons_list(index_multi(o), nil_index_list()),
                        add(
                          multiply(
                            rvalue(LAMBDA,
                              cons_list(index_multi(o), nil_index_list()),
                              "LAMBDA"),
                            transpose(
                              rvalue(state,
                                cons_list(index_min_max(1, nlatent),
                                  nil_index_list()), "state"))),
                          rvalue(MANIFESTMEANS,
                            cons_list(index_multi(o),
                              cons_list(index_uni(1), nil_index_list())),
                            "MANIFESTMEANS")), "assigning variable syprior");
                      current_statement__ = 466;
                      assign(syprior,
                        cons_list(index_multi(o1), nil_index_list()),
                        to_vector(
                          inv_logit(
                            to_array_1d(
                              stan::model::deep_copy(
                                rvalue(syprior,
                                  cons_list(index_multi(o1),
                                    nil_index_list()), "syprior"))))),
                        "assigning variable syprior");
                      current_statement__ = 473;
                      if (stan::math::size(Jyfinite)) {
                        current_statement__ = 468;
                        if (logical_gt(verbose, 1)) {
                          current_statement__ = 467;
                          if (pstream__) {
                            stan_print(pstream__, "syprior = ");
                            stan_print(pstream__, syprior);
                            stan_print(pstream__, "    Jyinit= ");
                            stan_print(pstream__, Jy);
                            stan_print(pstream__, "\n");
                          }
                        } 
                        current_statement__ = 469;
                        for (int sym1__ = 1;
                             sym1__ <= stan::math::size(Jyfinite); ++sym1__) {
                          {
                            int fi;
                            current_statement__ = 469;
                            fi = Jyfinite[(sym1__ - 1)];
                            current_statement__ = 470;
                            assign(Jy,
                              cons_list(index_multi(o),
                                cons_list(index_uni(fi), nil_index_list())),
                              subtract(
                                stan::model::deep_copy(
                                  rvalue(Jy,
                                    cons_list(index_multi(o),
                                      cons_list(index_uni(fi),
                                        nil_index_list())), "Jy")),
                                rvalue(syprior,
                                  cons_list(index_multi(o), nil_index_list()),
                                  "syprior")), "assigning variable Jy");
                            current_statement__ = 471;
                            assign(Jy,
                              cons_list(index_multi(o),
                                cons_list(index_uni(fi), nil_index_list())),
                              divide(
                                stan::model::deep_copy(
                                  rvalue(Jy,
                                    cons_list(index_multi(o),
                                      cons_list(index_uni(fi),
                                        nil_index_list())), "Jy")), Jstep),
                              "assigning variable Jy");
                          }}
                      } 
                    } 
                  }}
              }
              current_statement__ = 477;
              if (logical_gt(verbose, 1)) {
                current_statement__ = 476;
                if (pstream__) {
                  stan_print(pstream__, "Jy ");
                  stan_print(pstream__, Jy);
                  stan_print(pstream__, "\n");
                }
              } 
            } 
            current_statement__ = 481;
            if ((primitive_value((primitive_value((primitive_value(
                logical_eq(si, 0)) || primitive_value(
                whenmat[(5 - 1)][(5 - 1)]))) || primitive_value(
                whenmat[(5 - 1)][(4 - 1)]))) || primitive_value(
                statedep[(5 - 1)]))) {
              current_statement__ = 480;
              assign(MANIFESTcov, nil_index_list(),
                sdcovsqrt2cov(MANIFESTVAR, choleskymats, pstream__),
                "assigning variable MANIFESTcov");
            } 
            current_statement__ = 522;
            if ((primitive_value(logical_gt(si, 0)) && primitive_value(
                (primitive_value(logical_gt(nobs_y[(rowi - 1)], 0)) ||
                primitive_value(dosmoother))))) {
              current_statement__ = 490;
              if ((primitive_value(logical_eq(intoverstates, 1)) ||
                  primitive_value(logical_eq(dosmoother, 1)))) {
                current_statement__ = 482;
                assign(ycov,
                  cons_list(index_multi(o),
                    cons_list(index_multi(o), nil_index_list())),
                  add(
                    quad_form_sym(makesym(etacov, verbose, 1, pstream__),
                      transpose(
                        rvalue(Jy,
                          cons_list(index_multi(o),
                            cons_list(index_omni(), nil_index_list())), "Jy"))),
                    rvalue(MANIFESTcov,
                      cons_list(index_multi(o),
                        cons_list(index_multi(o), nil_index_list())),
                      "MANIFESTcov")), "assigning variable ycov");
                current_statement__ = 488;
                for (int wi = 1; wi <= nmanifest; ++wi) {
                  current_statement__ = 484;
                  if ((primitive_value(logical_eq(manifesttype[(wi - 1)], 1))
                      && primitive_value((primitive_value(
                      logical_neq(Y[(rowi - 1)][(wi - 1)], 99999)) ||
                      primitive_value(logical_eq(dosmoother, 1)))))) {
                    current_statement__ = 483;
                    assign(ycov,
                      cons_list(index_uni(wi),
                        cons_list(index_uni(wi), nil_index_list())),
                      (rvalue(ycov,
                         cons_list(index_uni(wi),
                           cons_list(index_uni(wi), nil_index_list())),
                         "ycov") +
                        stan::math::fabs(
                          ((syprior[(wi - 1)] - 1) * syprior[(wi - 1)]))),
                      "assigning variable ycov");
                  } 
                  current_statement__ = 486;
                  if ((primitive_value(logical_eq(manifesttype[(wi - 1)], 2))
                      && primitive_value((primitive_value(
                      logical_neq(Y[(rowi - 1)][(wi - 1)], 99999)) ||
                      primitive_value(logical_eq(dosmoother, 1)))))) {
                    current_statement__ = 485;
                    assign(ycov,
                      cons_list(index_uni(wi),
                        cons_list(index_uni(wi), nil_index_list())),
                      (rvalue(ycov,
                         cons_list(index_uni(wi),
                           cons_list(index_uni(wi), nil_index_list())),
                         "ycov") +
                        square(
                          stan::math::fabs(
                            (syprior[(wi - 1)] -
                              stan::math::round(syprior[(wi - 1)]))))),
                      "assigning variable ycov");
                  } }
              } 
              current_statement__ = 492;
              if ((primitive_value(logical_eq(intoverstates, 0)) &&
                  primitive_value(logical_gt(ncont_y[(rowi - 1)], 0)))) {
                current_statement__ = 491;
                assign(ypriorcov_sqrt,
                  cons_list(index_multi(o),
                    cons_list(index_multi(o), nil_index_list())),
                  cholesky_decompose(
                    makesym(
                      rvalue(MANIFESTcov,
                        cons_list(index_multi(o),
                          cons_list(index_multi(o), nil_index_list())),
                        "MANIFESTcov"), verbose, 1, pstream__)),
                  "assigning variable ypriorcov_sqrt");
              } 
              current_statement__ = 493;
              assign(err, cons_list(index_multi(od), nil_index_list()),
                subtract(
                  rvalue(Y,
                    cons_list(index_uni(rowi),
                      cons_list(index_multi(od), nil_index_list())), "Y"),
                  rvalue(syprior,
                    cons_list(index_multi(od), nil_index_list()), "syprior")),
                "assigning variable err");
              current_statement__ = 500;
              if ((primitive_value(logical_eq(intoverstates, 1)) &&
                  primitive_value(logical_gt(stan::math::size(od), 0)))) {
                current_statement__ = 495;
                if (logical_gt(verbose, 1)) {
                  current_statement__ = 494;
                  if (pstream__) {
                    stan_print(pstream__, "before K rowi =");
                    stan_print(pstream__, rowi);
                    stan_print(pstream__, "  si =");
                    stan_print(pstream__, si);
                    stan_print(pstream__, "  state =");
                    stan_print(pstream__, state);
                    stan_print(pstream__, "  statetf = ");
                    stan_print(pstream__, statetf);
                    stan_print(pstream__, "  etacov ");
                    stan_print(pstream__, etacov);
                    stan_print(pstream__, " indparams = ");
                    stan_print(pstream__, indparams);
                    stan_print(pstream__, "  syprior[o] =");
                    stan_print(pstream__, rvalue(syprior,
                                            cons_list(index_multi(o),
                                              nil_index_list()), "syprior"));
                    stan_print(pstream__, "  ycov[o,o] ");
                    stan_print(pstream__, rvalue(ycov,
                                            cons_list(index_multi(o),
                                              cons_list(index_multi(o),
                                                nil_index_list())), "ycov"));
                    stan_print(pstream__, "  PARS = ");
                    stan_print(pstream__, PARS);
                    stan_print(pstream__, "  DRIFT =");
                    stan_print(pstream__, DRIFT);
                    stan_print(pstream__, " DIFFUSION =");
                    stan_print(pstream__, DIFFUSION);
                    stan_print(pstream__, " CINT =");
                    stan_print(pstream__, CINT);
                    stan_print(pstream__, "  discreteCINT = ");
                    stan_print(pstream__, discreteCINT);
                    stan_print(pstream__, "  MANIFESTcov ");
                    stan_print(pstream__, MANIFESTcov);
                    stan_print(pstream__, "  MANIFESTMEANS ");
                    stan_print(pstream__, MANIFESTMEANS);
                    stan_print(pstream__, "  T0cov");
                    stan_print(pstream__, T0cov);
                    stan_print(pstream__, " T0MEANS ");
                    stan_print(pstream__, T0MEANS);
                    stan_print(pstream__, "LAMBDA = ");
                    stan_print(pstream__, LAMBDA);
                    stan_print(pstream__, "  Jy = ");
                    stan_print(pstream__, Jy);
                    stan_print(pstream__, " discreteDRIFT = ");
                    stan_print(pstream__, discreteDRIFT);
                    stan_print(pstream__, "  discreteDIFFUSION ");
                    stan_print(pstream__, discreteDIFFUSION);
                    stan_print(pstream__, "  asymDIFFUSIONcov ");
                    stan_print(pstream__, asymDIFFUSIONcov);
                    stan_print(pstream__, " DIFFUSIONcov = ");
                    stan_print(pstream__, DIFFUSIONcov);
                    stan_print(pstream__, " eJAx = ");
                    stan_print(pstream__, eJAx);
                    stan_print(pstream__, "  rawpopsd ");
                    stan_print(pstream__, rawpopsd);
                    stan_print(pstream__, "  rawpopsdbase ");
                    stan_print(pstream__, rawpopsdbase);
                    stan_print(pstream__, "  rawpopmeans ");
                    stan_print(pstream__, rawpopmeans);
                    stan_print(pstream__, "\n");
                  }
                } 
                current_statement__ = 496;
                assign(K,
                  cons_list(index_omni(),
                    cons_list(index_multi(od), nil_index_list())),
                  mdivide_right_spd(
                    multiply(etacov,
                      transpose(
                        rvalue(Jy,
                          cons_list(index_multi(od),
                            cons_list(index_omni(), nil_index_list())), "Jy"))),
                    makesym(
                      rvalue(ycov,
                        cons_list(index_multi(od),
                          cons_list(index_multi(od), nil_index_list())),
                        "ycov"), verbose, 1, pstream__)),
                  "assigning variable K");
                current_statement__ = 497;
                assign(etacov, nil_index_list(),
                  add(stan::model::deep_copy(etacov),
                    multiply(
                      multiply(
                        minus(
                          rvalue(K,
                            cons_list(index_omni(),
                              cons_list(index_multi(od), nil_index_list())),
                            "K")),
                        rvalue(Jy,
                          cons_list(index_multi(od),
                            cons_list(index_omni(), nil_index_list())), "Jy")),
                      stan::model::deep_copy(etacov))),
                  "assigning variable etacov");
                current_statement__ = 498;
                assign(state, nil_index_list(),
                  add(stan::model::deep_copy(state),
                    transpose(
                      multiply(
                        rvalue(K,
                          cons_list(index_omni(),
                            cons_list(index_multi(od), nil_index_list())),
                          "K"),
                        rvalue(err,
                          cons_list(index_multi(od), nil_index_list()),
                          "err")))), "assigning variable state");
              } 
              current_statement__ = 509;
              if (logical_eq(dosmoother, 1)) {
                current_statement__ = 501;
                assign(yb,
                  cons_list(index_uni(1),
                    cons_list(index_uni(rowi), nil_index_list())),
                  rvalue(syprior,
                    cons_list(index_multi(o), nil_index_list()), "syprior"),
                  "assigning variable yb");
                current_statement__ = 502;
                assign(etab,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())),
                  transpose(state), "assigning variable etab");
                current_statement__ = 503;
                assign(ycovb,
                  cons_list(index_uni(1),
                    cons_list(index_uni(rowi), nil_index_list())), ycov,
                  "assigning variable ycovb");
                current_statement__ = 504;
                assign(etacovb,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())), etacov,
                  "assigning variable etacovb");
                current_statement__ = 505;
                assign(ycovb,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())),
                  add(
                    quad_form_sym(makesym(etacov, verbose, 1, pstream__),
                      transpose(Jy)), MANIFESTcov),
                  "assigning variable ycovb");
                current_statement__ = 506;
                assign(yb,
                  cons_list(index_uni(2),
                    cons_list(index_uni(rowi), nil_index_list())),
                  add(
                    rvalue(MANIFESTMEANS,
                      cons_list(index_multi(o),
                        cons_list(index_uni(1), nil_index_list())),
                      "MANIFESTMEANS"),
                    multiply(
                      rvalue(LAMBDA,
                        cons_list(index_multi(o),
                          cons_list(index_omni(), nil_index_list())),
                        "LAMBDA"),
                      transpose(
                        rvalue(state,
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list()), "state")))),
                  "assigning variable yb");
                current_statement__ = 507;
                assign(Jys,
                  cons_list(index_uni(rowi),
                    cons_list(index_omni(),
                      cons_list(index_omni(), nil_index_list()))), Jy,
                  "assigning variable Jys");
              } 
              current_statement__ = 511;
              if (logical_gt(verbose, 1)) {
                current_statement__ = 510;
                if (pstream__) {
                  stan_print(pstream__, " After K rowi =");
                  stan_print(pstream__, rowi);
                  stan_print(pstream__, "  si =");
                  stan_print(pstream__, si);
                  stan_print(pstream__, "  state =");
                  stan_print(pstream__, state);
                  stan_print(pstream__, "  etacov ");
                  stan_print(pstream__, etacov);
                  stan_print(pstream__, "  K[,o] ");
                  stan_print(pstream__, rvalue(K,
                                          cons_list(index_omni(),
                                            cons_list(index_multi(o),
                                              nil_index_list())), "K"));
                  stan_print(pstream__, "\n");
                }
              } 
              current_statement__ = 513;
              if (logical_gt(nbinary_y[(rowi - 1)], 0)) {
                current_statement__ = 512;
                assign(llrow, cons_list(index_uni(rowi), nil_index_list()),
                  (llrow[(rowi - 1)] +
                    sum(
                      stan::math::log(
                        add(
                          add(1e-10,
                            elt_multiply(
                              rvalue(Y,
                                cons_list(index_uni(rowi),
                                  cons_list(index_multi(o1d),
                                    nil_index_list())), "Y"),
                              rvalue(syprior,
                                cons_list(index_multi(o1d), nil_index_list()),
                                "syprior"))),
                          elt_multiply(
                            subtract(1,
                              rvalue(Y,
                                cons_list(index_uni(rowi),
                                  cons_list(index_multi(o1d),
                                    nil_index_list())), "Y")),
                            subtract(1,
                              rvalue(syprior,
                                cons_list(index_multi(o1d), nil_index_list()),
                                "syprior"))))))), "assigning variable llrow");
              } 
              current_statement__ = 518;
              if ((primitive_value(logical_gt(stan::math::size(o0d), 0)) &&
                  primitive_value((primitive_value(
                  logical_eq(llsinglerow, 0)) || primitive_value(
                  logical_eq(llsinglerow, rowi)))))) {
                current_statement__ = 515;
                if (logical_eq(intoverstates, 1)) {
                  current_statement__ = 514;
                  assign(ypriorcov_sqrt,
                    cons_list(index_multi(o0d),
                      cons_list(index_multi(o0d), nil_index_list())),
                    cholesky_decompose(
                      rvalue(ycov,
                        cons_list(index_multi(o0d),
                          cons_list(index_multi(o0d), nil_index_list())),
                        "ycov")), "assigning variable ypriorcov_sqrt");
                } 
                current_statement__ = 516;
                assign(llrow, cons_list(index_uni(rowi), nil_index_list()),
                  (llrow[(rowi - 1)] +
                    multi_normal_cholesky_lpdf<false>(
                      rvalue(Y,
                        cons_list(index_uni(rowi),
                          cons_list(index_multi(o0d), nil_index_list())),
                        "Y"),
                      rvalue(syprior,
                        cons_list(index_multi(o0d), nil_index_list()),
                        "syprior"),
                      rvalue(ypriorcov_sqrt,
                        cons_list(index_multi(o0d),
                          cons_list(index_multi(o0d), nil_index_list())),
                        "ypriorcov_sqrt"))), "assigning variable llrow");
              } 
              current_statement__ = 520;
              if (logical_gt(verbose, 1)) {
                current_statement__ = 519;
                if (pstream__) {
                  stan_print(pstream__, llrow[(rowi - 1)]);
                  stan_print(pstream__, "\n");
                }
              } 
            } 
            current_statement__ = 528;
            if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                (primitive_value(
                logical_gt(
                  (((sum(
                       rvalue(whenmat,
                         cons_list(index_uni(3),
                           cons_list(index_omni(), nil_index_list())),
                         "whenmat")) +
                      sum(
                        rvalue(whenmat,
                          cons_list(index_uni(7),
                            cons_list(index_omni(), nil_index_list())),
                          "whenmat"))) + statedep[(3 - 1)]) +
                    statedep[(7 - 1)]), 0)) && primitive_value(
                savesubjectmatrices))))) {
              current_statement__ = 524;
              if (logical_eq(continuoustime, 1)) {
                current_statement__ = 523;
                assign(asymCINT,
                  cons_list(index_omni(),
                    cons_list(index_uni(1), nil_index_list())),
                  mdivide_left(
                    minus(
                      rvalue(DRIFT,
                        cons_list(index_min_max(1, nlatent),
                          cons_list(index_min_max(1, nlatent),
                            nil_index_list())), "DRIFT")),
                    rvalue(CINT,
                      cons_list(index_omni(),
                        cons_list(index_uni(1), nil_index_list())), "CINT")),
                  "assigning variable asymCINT");
              } 
              current_statement__ = 526;
              if (logical_eq(continuoustime, 0)) {
                current_statement__ = 525;
                assign(asymCINT,
                  cons_list(index_omni(),
                    cons_list(index_uni(1), nil_index_list())),
                  mdivide_left(
                    add_diag(
                      minus(
                        rvalue(DRIFT,
                          cons_list(index_min_max(1, nlatent),
                            cons_list(index_min_max(1, nlatent),
                              nil_index_list())), "DRIFT")), 1),
                    rvalue(CINT,
                      cons_list(index_omni(),
                        cons_list(index_uni(1), nil_index_list())), "CINT")),
                  "assigning variable asymCINT");
              } 
            } 
            current_statement__ = 533;
            if (logical_negation(continuoustime)) {
              current_statement__ = 531;
              if ((primitive_value(logical_eq(si, 0)) || primitive_value(
                  (primitive_value(
                  logical_gt(
                    (((sum(
                         rvalue(whenmat,
                           cons_list(index_uni(3),
                             cons_list(index_omni(), nil_index_list())),
                           "whenmat")) +
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(4),
                              cons_list(index_omni(), nil_index_list())),
                            "whenmat"))) + statedep[(3 - 1)]) +
                      statedep[(4 - 1)]), 0)) && primitive_value(
                  savesubjectmatrices))))) {
                current_statement__ = 529;
                assign(asymDIFFUSIONcov,
                  cons_list(index_multi(derrind),
                    cons_list(index_multi(derrind), nil_index_list())),
                  to_matrix(
                    mdivide_left(
                      add_diag(
                        minus(
                          sqkron_prod(
                            rvalue(JAx,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "JAx"),
                            rvalue(JAx,
                              cons_list(index_multi(derrind),
                                cons_list(index_multi(derrind),
                                  nil_index_list())), "JAx"), pstream__)), 1),
                      to_vector(
                        rvalue(DIFFUSIONcov,
                          cons_list(index_multi(derrind),
                            cons_list(index_multi(derrind), nil_index_list())),
                          "DIFFUSIONcov"))), ndiffusion, ndiffusion),
                  "assigning variable asymDIFFUSIONcov");
              } 
            } 
            current_statement__ = 550;
            if (logical_eq(si, 0)) {
              current_statement__ = 534;
              assign(pop_PARS, nil_index_list(), PARS,
                "assigning variable pop_PARS");
              current_statement__ = 535;
              assign(pop_T0MEANS, nil_index_list(), T0MEANS,
                "assigning variable pop_T0MEANS");
              current_statement__ = 536;
              assign(pop_LAMBDA, nil_index_list(), LAMBDA,
                "assigning variable pop_LAMBDA");
              current_statement__ = 537;
              assign(pop_DRIFT, nil_index_list(), DRIFT,
                "assigning variable pop_DRIFT");
              current_statement__ = 538;
              assign(pop_DIFFUSION, nil_index_list(), DIFFUSION,
                "assigning variable pop_DIFFUSION");
              current_statement__ = 539;
              assign(pop_MANIFESTVAR, nil_index_list(), MANIFESTVAR,
                "assigning variable pop_MANIFESTVAR");
              current_statement__ = 540;
              assign(pop_MANIFESTMEANS, nil_index_list(), MANIFESTMEANS,
                "assigning variable pop_MANIFESTMEANS");
              current_statement__ = 541;
              assign(pop_CINT, nil_index_list(), CINT,
                "assigning variable pop_CINT");
              current_statement__ = 542;
              assign(pop_T0VAR, nil_index_list(), T0VAR,
                "assigning variable pop_T0VAR");
              current_statement__ = 543;
              assign(pop_TDPREDEFFECT, nil_index_list(), TDPREDEFFECT,
                "assigning variable pop_TDPREDEFFECT");
              current_statement__ = 544;
              assign(pop_DIFFUSIONcov, nil_index_list(), DIFFUSIONcov,
                "assigning variable pop_DIFFUSIONcov");
              current_statement__ = 545;
              assign(pop_MANIFESTcov, nil_index_list(), MANIFESTcov,
                "assigning variable pop_MANIFESTcov");
              current_statement__ = 546;
              assign(pop_T0cov, nil_index_list(), T0cov,
                "assigning variable pop_T0cov");
              current_statement__ = 547;
              assign(pop_asymCINT, nil_index_list(), asymCINT,
                "assigning variable pop_asymCINT");
              current_statement__ = 548;
              assign(pop_asymDIFFUSIONcov, nil_index_list(),
                asymDIFFUSIONcov, "assigning variable pop_asymDIFFUSIONcov");
            } 
            current_statement__ = 608;
            if ((primitive_value((primitive_value(logical_gt(si, 0)) &&
                primitive_value(dosmoother))) && primitive_value(
                (primitive_value(logical_eq(rowi, ndatapoints)) ||
                primitive_value(
                logical_neq(subject[((rowi + 1) - 1)], subject[(rowi - 1)])))))) {
              int sri;
              sri = std::numeric_limits<int>::min();
              
              current_statement__ = 551;
              sri = rowi;
              current_statement__ = 606;
              while ((primitive_value(logical_gt(sri, 0)) && primitive_value(
                     logical_eq(subject[(sri - 1)], si)))) {
                current_statement__ = 566;
                if (logical_eq(sri, rowi)) {
                  current_statement__ = 561;
                  assign(etab,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(etab[(2 - 1)][(sri - 1)]),
                    "assigning variable etab");
                  current_statement__ = 562;
                  assign(yb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(yb[(2 - 1)][(sri - 1)]),
                    "assigning variable yb");
                  current_statement__ = 563;
                  assign(etacovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(etacovb[(2 - 1)][(sri - 1)]),
                    "assigning variable etacovb");
                  current_statement__ = 564;
                  assign(ycovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    stan::model::deep_copy(ycovb[(2 - 1)][(sri - 1)]),
                    "assigning variable ycovb");
                } else {
                  current_statement__ = 552;
                  validate_non_negative_index("smoother", "nlatentpop",
                                              nlatentpop);
                  current_statement__ = 553;
                  validate_non_negative_index("smoother", "nlatentpop",
                                              nlatentpop);
                  Eigen::Matrix<double, -1, -1> smoother;
                  smoother = Eigen::Matrix<double, -1, -1>(nlatentpop, nlatentpop);
                  stan::math::fill(smoother, std::numeric_limits<double>::quiet_NaN());
                  
                  current_statement__ = 555;
                  assign(smoother, nil_index_list(),
                    mdivide_right(
                      multiply(etacovb[(2 - 1)][(sri - 1)],
                        transpose(
                          rvalue(eJAxs,
                            cons_list(index_uni((sri + 1)),
                              cons_list(index_omni(),
                                cons_list(index_omni(), nil_index_list()))),
                            "eJAxs"))),
                      makesym(etacovb[(1 - 1)][((sri + 1) - 1)], verbose,
                        1, pstream__)), "assigning variable smoother");
                  current_statement__ = 556;
                  assign(etab,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri),
                        cons_list(index_omni(), nil_index_list()))),
                    add(
                      stan::model::deep_copy(
                        rvalue(etab,
                          cons_list(index_uni(2),
                            cons_list(index_uni(sri),
                              cons_list(index_omni(), nil_index_list()))),
                          "etab")),
                      multiply(smoother,
                        subtract(
                          stan::model::deep_copy(
                            rvalue(etab,
                              cons_list(index_uni(3),
                                cons_list(index_uni((sri + 1)),
                                  cons_list(index_omni(), nil_index_list()))),
                              "etab")),
                          stan::model::deep_copy(
                            rvalue(etab,
                              cons_list(index_uni(1),
                                cons_list(index_uni((sri + 1)),
                                  cons_list(index_omni(), nil_index_list()))),
                              "etab"))))), "assigning variable etab");
                  current_statement__ = 557;
                  assign(etacovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    add(stan::model::deep_copy(etacovb[(2 - 1)][(sri - 1)]),
                      multiply(
                        multiply(smoother,
                          subtract(
                            stan::model::deep_copy(
                              etacovb[(3 - 1)][((sri + 1) - 1)]),
                            stan::model::deep_copy(
                              etacovb[(1 - 1)][((sri + 1) - 1)]))),
                        transpose(smoother))), "assigning variable etacovb");
                  current_statement__ = 558;
                  assign(yb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri),
                        cons_list(index_omni(), nil_index_list()))),
                    add(
                      stan::model::deep_copy(
                        rvalue(yb,
                          cons_list(index_uni(2),
                            cons_list(index_uni(sri),
                              cons_list(index_omni(), nil_index_list()))),
                          "yb")),
                      multiply(
                        rvalue(Jys,
                          cons_list(index_uni(sri),
                            cons_list(index_omni(),
                              cons_list(index_omni(), nil_index_list()))),
                          "Jys"),
                        subtract(
                          rvalue(etab,
                            cons_list(index_uni(3),
                              cons_list(index_uni(sri),
                                cons_list(index_omni(), nil_index_list()))),
                            "etab"),
                          rvalue(etab,
                            cons_list(index_uni(2),
                              cons_list(index_uni(sri),
                                cons_list(index_omni(), nil_index_list()))),
                            "etab")))), "assigning variable yb");
                  current_statement__ = 559;
                  assign(ycovb,
                    cons_list(index_uni(3),
                      cons_list(index_uni(sri), nil_index_list())),
                    add(stan::model::deep_copy(ycovb[(2 - 1)][(sri - 1)]),
                      multiply(
                        multiply(
                          rvalue(Jys,
                            cons_list(index_uni(sri),
                              cons_list(index_omni(),
                                cons_list(index_omni(), nil_index_list()))),
                            "Jys"),
                          subtract(etacovb[(3 - 1)][(sri - 1)],
                            etacovb[(2 - 1)][(sri - 1)])),
                        transpose(
                          rvalue(Jys,
                            cons_list(index_uni(sri),
                              cons_list(index_omni(),
                                cons_list(index_omni(), nil_index_list()))),
                            "Jys")))), "assigning variable ycovb");
                }
                current_statement__ = 567;
                assign(state, nil_index_list(),
                  transpose(
                    rvalue(etab,
                      cons_list(index_uni(3),
                        cons_list(index_uni(sri),
                          cons_list(index_omni(), nil_index_list()))),
                      "etab")), "assigning variable state");
                current_statement__ = 568;
                sri = (sri + -1);
                current_statement__ = 570;
                while ((primitive_value(logical_gt(sri, 0)) &&
                       primitive_value(
                       logical_eq(dokalmanrows[(sri - 1)], 0)))) {
                  current_statement__ = 569;
                  sri = (sri + -1);
                }
                current_statement__ = 604;
                if ((primitive_value(savesubjectmatrices) && primitive_value(
                    (sri ?
                       logical_neq(subject[(sri - 1)],
                         subject[((sri + 1) - 1)]) : 1)))) {
                  current_statement__ = 572;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(10),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(10 - 1)]))) {
                    current_statement__ = 571;
                    assign(subj_PARS,
                      cons_list(index_uni(si), nil_index_list()), PARS,
                      "assigning variable subj_PARS");
                  } 
                  current_statement__ = 574;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(1),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(1 - 1)]))) {
                    current_statement__ = 573;
                    assign(subj_T0MEANS,
                      cons_list(index_uni(si), nil_index_list()), T0MEANS,
                      "assigning variable subj_T0MEANS");
                  } 
                  current_statement__ = 576;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(2),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(2 - 1)]))) {
                    current_statement__ = 575;
                    assign(subj_LAMBDA,
                      cons_list(index_uni(si), nil_index_list()), LAMBDA,
                      "assigning variable subj_LAMBDA");
                  } 
                  current_statement__ = 578;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(3),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(3 - 1)]))) {
                    current_statement__ = 577;
                    assign(subj_DRIFT,
                      cons_list(index_uni(si), nil_index_list()), DRIFT,
                      "assigning variable subj_DRIFT");
                  } 
                  current_statement__ = 580;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(4),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(4 - 1)]))) {
                    current_statement__ = 579;
                    assign(subj_DIFFUSION,
                      cons_list(index_uni(si), nil_index_list()), DIFFUSION,
                      "assigning variable subj_DIFFUSION");
                  } 
                  current_statement__ = 582;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(5),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(5 - 1)]))) {
                    current_statement__ = 581;
                    assign(subj_MANIFESTVAR,
                      cons_list(index_uni(si), nil_index_list()),
                      MANIFESTVAR, "assigning variable subj_MANIFESTVAR");
                  } 
                  current_statement__ = 584;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(6),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(6 - 1)]))) {
                    current_statement__ = 583;
                    assign(subj_MANIFESTMEANS,
                      cons_list(index_uni(si), nil_index_list()),
                      MANIFESTMEANS, "assigning variable subj_MANIFESTMEANS");
                  } 
                  current_statement__ = 586;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(7),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(7 - 1)]))) {
                    current_statement__ = 585;
                    assign(subj_CINT,
                      cons_list(index_uni(si), nil_index_list()), CINT,
                      "assigning variable subj_CINT");
                  } 
                  current_statement__ = 588;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(8),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(8 - 1)]))) {
                    current_statement__ = 587;
                    assign(subj_T0VAR,
                      cons_list(index_uni(si), nil_index_list()), T0VAR,
                      "assigning variable subj_T0VAR");
                  } 
                  current_statement__ = 590;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(9),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(9 - 1)]))) {
                    current_statement__ = 589;
                    assign(subj_TDPREDEFFECT,
                      cons_list(index_uni(si), nil_index_list()),
                      TDPREDEFFECT, "assigning variable subj_TDPREDEFFECT");
                  } 
                  current_statement__ = 592;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(31),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(31 - 1)]))) {
                    current_statement__ = 591;
                    assign(subj_DIFFUSIONcov,
                      cons_list(index_uni(si), nil_index_list()),
                      DIFFUSIONcov, "assigning variable subj_DIFFUSIONcov");
                  } 
                  current_statement__ = 594;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(32),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(32 - 1)]))) {
                    current_statement__ = 593;
                    assign(subj_MANIFESTcov,
                      cons_list(index_uni(si), nil_index_list()),
                      MANIFESTcov, "assigning variable subj_MANIFESTcov");
                  } 
                  current_statement__ = 596;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(33),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(33 - 1)]))) {
                    current_statement__ = 595;
                    assign(subj_T0cov,
                      cons_list(index_uni(si), nil_index_list()), T0cov,
                      "assigning variable subj_T0cov");
                  } 
                  current_statement__ = 598;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(21),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(21 - 1)]))) {
                    current_statement__ = 597;
                    assign(subj_asymCINT,
                      cons_list(index_uni(si), nil_index_list()), asymCINT,
                      "assigning variable subj_asymCINT");
                  } 
                  current_statement__ = 600;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(22),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(22 - 1)]))) {
                    current_statement__ = 599;
                    assign(subj_asymDIFFUSIONcov,
                      cons_list(index_uni(si), nil_index_list()),
                      asymDIFFUSIONcov,
                      "assigning variable subj_asymDIFFUSIONcov");
                  } 
                  current_statement__ = 602;
                  if ((primitive_value(
                      logical_gt(
                        sum(
                          rvalue(whenmat,
                            cons_list(index_uni(1),
                              cons_list(index_min_max(1, 5),
                                nil_index_list())), "whenmat")), 0)) ||
                      primitive_value(statedep[(1 - 1)]))) {
                    current_statement__ = 601;
                    assign(subj_T0MEANS,
                      cons_list(index_uni(si),
                        cons_list(index_omni(),
                          cons_list(index_uni(1), nil_index_list()))),
                      transpose(state), "assigning variable subj_T0MEANS");
                  } 
                } 
              }
            } 
          } 
          current_statement__ = 611;
          prevrow = rowi;}
        current_statement__ = 619;
        if (savescores) {
          current_statement__ = 614;
          assign(ya, nil_index_list(), yb, "assigning variable ya");
          current_statement__ = 615;
          assign(ycova, nil_index_list(), ycovb, "assigning variable ycova");
          current_statement__ = 616;
          assign(etaa, nil_index_list(), etab, "assigning variable etaa");
          current_statement__ = 617;
          assign(etacova, nil_index_list(), etacovb,
            "assigning variable etacova");
        } 
        current_statement__ = 620;
        ll = (ll + sum(llrow));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
          vars__.emplace_back(rawpopsd[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            vars__.emplace_back(
              rvalue(rawpopcovbase,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "rawpopcovbase"));}}
        for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            vars__.emplace_back(
              rvalue(rawpopcov,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "rawpopcov"));}}
        for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            vars__.emplace_back(
              rvalue(rawpopcovchol,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "rawpopcovchol"));}}
        for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            vars__.emplace_back(
              rvalue(rawpopcorr,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "rawpopcorr"));}}
        vars__.emplace_back(subset);
        vars__.emplace_back(firstsub);
        vars__.emplace_back(lastsub);
        vars__.emplace_back(ll);
        for (int sym1__ = 1; sym1__ <= llrow_1dim__; ++sym1__) {
          vars__.emplace_back(llrow[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nlatentpop; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nlatentpop; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= etacova_2dim__; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
                vars__.emplace_back(
                  rvalue(etacova,
                    cons_list(index_uni(sym4__),
                      cons_list(index_uni(sym3__),
                        cons_list(index_uni(sym2__),
                          cons_list(index_uni(sym1__), nil_index_list())))),
                    "etacova"));}}}}
        for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nmanifest; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= ycova_2dim__; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
                vars__.emplace_back(
                  rvalue(ycova,
                    cons_list(index_uni(sym4__),
                      cons_list(index_uni(sym3__),
                        cons_list(index_uni(sym2__),
                          cons_list(index_uni(sym1__), nil_index_list())))),
                    "ycova"));}}}}
        for (int sym1__ = 1; sym1__ <= nlatentpop; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= etaa_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
              vars__.emplace_back(
                etaa[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= ya_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
              vars__.emplace_back(
                ya[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= 0; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 0; ++sym2__) {
            vars__.emplace_back(calcs[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= pop_PARS_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_PARS_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_PARS,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_PARS"));}}
        for (int sym1__ = 1; sym1__ <= pop_T0MEANS_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_T0MEANS_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_T0MEANS,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_T0MEANS"));}}
        for (int sym1__ = 1; sym1__ <= pop_LAMBDA_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_LAMBDA_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_LAMBDA,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_LAMBDA"));}}
        for (int sym1__ = 1; sym1__ <= pop_DRIFT_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_DRIFT_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_DRIFT,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_DRIFT"));}}
        for (int sym1__ = 1; sym1__ <= pop_DIFFUSION_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_DIFFUSION_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_DIFFUSION,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_DIFFUSION"));}}
        for (int sym1__ = 1; sym1__ <= pop_MANIFESTVAR_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTVAR_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_MANIFESTVAR,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_MANIFESTVAR"));}}
        for (int sym1__ = 1; sym1__ <= pop_MANIFESTMEANS_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTMEANS_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_MANIFESTMEANS,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_MANIFESTMEANS"));}}
        for (int sym1__ = 1; sym1__ <= pop_CINT_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_CINT_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_CINT,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_CINT"));}}
        for (int sym1__ = 1; sym1__ <= pop_T0VAR_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_T0VAR_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_T0VAR,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_T0VAR"));}}
        for (int sym1__ = 1; sym1__ <= pop_TDPREDEFFECT_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_TDPREDEFFECT_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_TDPREDEFFECT,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_TDPREDEFFECT"));}}
        for (int sym1__ = 1; sym1__ <= pop_DIFFUSIONcov_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_DIFFUSIONcov_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_DIFFUSIONcov,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_DIFFUSIONcov"));}}
        for (int sym1__ = 1; sym1__ <= pop_MANIFESTcov_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTcov_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_MANIFESTcov,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_MANIFESTcov"));}}
        for (int sym1__ = 1; sym1__ <= pop_T0cov_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_T0cov_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_T0cov,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_T0cov"));}}
        for (int sym1__ = 1; sym1__ <= pop_asymCINT_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_asymCINT_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_asymCINT,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_asymCINT"));}}
        for (int sym1__ = 1; sym1__ <= pop_asymDIFFUSIONcov_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= pop_asymDIFFUSIONcov_1dim__;
               ++sym2__) {
            vars__.emplace_back(
              rvalue(pop_asymDIFFUSIONcov,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "pop_asymDIFFUSIONcov"));}}
        for (int sym1__ = 1; sym1__ <= subj_PARS_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_PARS_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_PARS_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_PARS,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_PARS"));}}}
        for (int sym1__ = 1; sym1__ <= subj_T0MEANS_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_T0MEANS_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_T0MEANS_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_T0MEANS,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_T0MEANS"));}}}
        for (int sym1__ = 1; sym1__ <= subj_LAMBDA_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_LAMBDA_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_LAMBDA_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_LAMBDA,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_LAMBDA"));}}}
        for (int sym1__ = 1; sym1__ <= subj_DRIFT_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_DRIFT_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_DRIFT_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_DRIFT,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_DRIFT"));}}}
        for (int sym1__ = 1; sym1__ <= subj_DIFFUSION_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_DIFFUSION_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_DIFFUSION_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_DIFFUSION,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_DIFFUSION"));}}}
        for (int sym1__ = 1; sym1__ <= subj_MANIFESTVAR_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTVAR_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_MANIFESTVAR_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_MANIFESTVAR,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_MANIFESTVAR"));}}}
        for (int sym1__ = 1; sym1__ <= subj_MANIFESTMEANS_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTMEANS_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_MANIFESTMEANS_1dim__;
                 ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_MANIFESTMEANS,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_MANIFESTMEANS"));}}}
        for (int sym1__ = 1; sym1__ <= subj_CINT_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_CINT_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_CINT_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_CINT,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_CINT"));}}}
        for (int sym1__ = 1; sym1__ <= subj_T0VAR_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_T0VAR_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_T0VAR_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_T0VAR,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_T0VAR"));}}}
        for (int sym1__ = 1; sym1__ <= subj_TDPREDEFFECT_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_TDPREDEFFECT_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_TDPREDEFFECT_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_TDPREDEFFECT,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_TDPREDEFFECT"));}}}
        for (int sym1__ = 1; sym1__ <= subj_DIFFUSIONcov_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_DIFFUSIONcov_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_DIFFUSIONcov_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_DIFFUSIONcov,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_DIFFUSIONcov"));}}}
        for (int sym1__ = 1; sym1__ <= subj_MANIFESTcov_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTcov_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_MANIFESTcov_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_MANIFESTcov,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_MANIFESTcov"));}}}
        for (int sym1__ = 1; sym1__ <= subj_T0cov_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_T0cov_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_T0cov_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_T0cov,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_T0cov"));}}}
        for (int sym1__ = 1; sym1__ <= subj_asymCINT_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_asymCINT_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_asymCINT_1dim__; ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_asymCINT,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_asymCINT"));}}}
        for (int sym1__ = 1; sym1__ <= subj_asymDIFFUSIONcov_3dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= subj_asymDIFFUSIONcov_2dim__;
               ++sym2__) {
            for (int sym3__ = 1; sym3__ <= subj_asymDIFFUSIONcov_1dim__;
                 ++sym3__) {
              vars__.emplace_back(
                rvalue(subj_asymDIFFUSIONcov,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "subj_asymDIFFUSIONcov"));}}}
        for (int sym1__ = 1; sym1__ <= tipreds_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= tipreds_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(tipreds,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "tipreds"));
          }}
        for (int sym1__ = 1; sym1__ <= ntipred; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nparams; ++sym2__) {
            vars__.emplace_back(
              rvalue(TIPREDEFFECT,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "TIPREDEFFECT"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> popmeans;
      popmeans = Eigen::Matrix<double, -1, 1>(nparams);
      stan::math::fill(popmeans, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> popsd;
      popsd = Eigen::Matrix<double, -1, 1>(nindvarying);
      stan::math::fill(popsd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> popcov;
      popcov = Eigen::Matrix<double, -1, -1>(nindvarying, nindvarying);
      stan::math::fill(popcov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> linearTIPREDEFFECT;
      linearTIPREDEFFECT = Eigen::Matrix<double, -1, -1>(nparams, ntipred);
      stan::math::fill(linearTIPREDEFFECT, std::numeric_limits<double>::quiet_NaN());
      
      {
        current_statement__ = 626;
        validate_non_negative_index("x", "popcovn", popcovn);
        current_statement__ = 627;
        validate_non_negative_index("x", "nindvarying", nindvarying);
        Eigen::Matrix<double, -1, -1> x;
        x = Eigen::Matrix<double, -1, -1>(popcovn, nindvarying);
        stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 633;
        if (nindvarying) {
          current_statement__ = 631;
          for (int ri = 1; ri <= rows(x); ++ri) {
            current_statement__ = 629;
            assign(x,
              cons_list(index_uni(ri),
                cons_list(index_omni(), nil_index_list())),
              transpose(
                multiply(rawpopcovchol,
                  to_vector(
                    normal_rng(
                      rvalue(rawpopmeans,
                        cons_list(index_multi(indvaryingindex),
                          nil_index_list()), "rawpopmeans"),
                      rep_vector(1, nindvarying), base_rng__)))),
              "assigning variable x");}
        } 
        current_statement__ = 670;
        for (int pi = 1; pi <= nparams; ++pi) {
          int found;
          found = std::numeric_limits<int>::min();
          
          current_statement__ = 634;
          found = 0;
          int pr1;
          pr1 = std::numeric_limits<int>::min();
          
          int pr2;
          pr2 = std::numeric_limits<int>::min();
          
          double rawpoppar;
          rawpoppar = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 637;
          rawpoppar = rawpopmeans[(pi - 1)];
          current_statement__ = 652;
          while (logical_negation(found)) {
            current_statement__ = 650;
            for (int ri = 1; ri <= stan::math::size(matsetup); ++ri) {
              current_statement__ = 648;
              if ((primitive_value(
                  logical_eq(matsetup[(ri - 1)][(3 - 1)], pi)) &&
                  primitive_value(
                  logical_lte(matsetup[(ri - 1)][(8 - 1)], 0)))) {
                current_statement__ = 638;
                pr1 = ri;
                current_statement__ = 639;
                pr2 = ri;
                current_statement__ = 640;
                found = 1;
                current_statement__ = 646;
                if ((primitive_value(intoverpop) && primitive_value(
                    matsetup[(ri - 1)][(5 - 1)]))) {
                  current_statement__ = 644;
                  for (int ri2 = 1; ri2 <= stan::math::size(matsetup); ++ri2) {
                    current_statement__ = 642;
                    if ((primitive_value((primitive_value((primitive_value(
                        matsetup[(ri2 - 1)][(8 - 1)]) && primitive_value(
                        logical_eq(matsetup[(ri2 - 1)][(3 - 1)],
                          matsetup[(ri - 1)][(1 - 1)])))) && primitive_value(
                        logical_gt(matsetup[(ri2 - 1)][(3 - 1)], nlatent))))
                        && primitive_value(
                        logical_lt(matsetup[(ri2 - 1)][(7 - 1)], 20)))) {
                      current_statement__ = 641;
                      pr2 = ri2;
                    } }
                } 
              } }
          }
          current_statement__ = 653;
          assign(popmeans, cons_list(index_uni(pi), nil_index_list()),
            tform(rawpoppar, matsetup[(pr2 - 1)][(4 - 1)],
              matvalues[(pr2 - 1)][(2 - 1)], matvalues[(pr2 - 1)][(3 - 1)],
              matvalues[(pr2 - 1)][(4 - 1)],
              matvalues[(pr2 - 1)][(6 - 1)], pstream__),
            "assigning variable popmeans");
          current_statement__ = 659;
          if (matsetup[(pr1 - 1)][(5 - 1)]) {
            current_statement__ = 656;
            for (int ri = 1; ri <= rows(x); ++ri) {
              current_statement__ = 654;
              assign(x,
                cons_list(index_uni(ri),
                  cons_list(index_uni(matsetup[(pr1 - 1)][(5 - 1)]),
                    nil_index_list())),
                tform(
                  rvalue(x,
                    cons_list(index_uni(ri),
                      cons_list(index_uni(matsetup[(pr1 - 1)][(5 - 1)]),
                        nil_index_list())), "x"),
                  matsetup[(pr2 - 1)][(4 - 1)],
                  matvalues[(pr2 - 1)][(2 - 1)],
                  matvalues[(pr2 - 1)][(3 - 1)],
                  matvalues[(pr2 - 1)][(4 - 1)],
                  matvalues[(pr2 - 1)][(6 - 1)], pstream__),
                "assigning variable x");}
            current_statement__ = 657;
            assign(x,
              cons_list(index_omni(),
                cons_list(index_uni(matsetup[(pr1 - 1)][(5 - 1)]),
                  nil_index_list())),
              add(
                stan::model::deep_copy(
                  rvalue(x,
                    cons_list(index_omni(),
                      cons_list(index_uni(matsetup[(pr1 - 1)][(5 - 1)]),
                        nil_index_list())), "x")),
                rep_vector(
                  -mean(
                     rvalue(x,
                       cons_list(index_omni(),
                         cons_list(index_uni(matsetup[(pr1 - 1)][(5 - 1)]),
                           nil_index_list())), "x")), rows(x))),
              "assigning variable x");
          } 
          current_statement__ = 668;
          if (logical_gt(ntipred, 0)) {
            current_statement__ = 666;
            for (int tij = 1; tij <= ntipred; ++tij) {
              current_statement__ = 664;
              if (logical_eq(
                    TIPREDEFFECTsetup[(matsetup[(pr1 - 1)][(3 - 1)] - 1)][
                    (tij - 1)], 0)) {
                current_statement__ = 662;
                assign(linearTIPREDEFFECT,
                  cons_list(index_uni(matsetup[(pr1 - 1)][(3 - 1)]),
                    cons_list(index_uni(tij), nil_index_list())), 0,
                  "assigning variable linearTIPREDEFFECT");
              } else {
                current_statement__ = 660;
                assign(linearTIPREDEFFECT,
                  cons_list(index_uni(matsetup[(pr1 - 1)][(3 - 1)]),
                    cons_list(index_uni(tij), nil_index_list())),
                  (((tform(
                       (rawpoppar +
                         (rvalue(TIPREDEFFECT,
                            cons_list(
                              index_uni(matsetup[(pr1 - 1)][(3 - 1)]),
                              cons_list(index_uni(tij), nil_index_list())),
                            "TIPREDEFFECT") * .01)),
                       matsetup[(pr2 - 1)][(4 - 1)],
                       matvalues[(pr2 - 1)][(2 - 1)],
                       matvalues[(pr2 - 1)][(3 - 1)],
                       matvalues[(pr2 - 1)][(4 - 1)],
                       matvalues[(pr2 - 1)][(6 - 1)], pstream__) -
                      tform(
                        (rawpoppar -
                          (rvalue(TIPREDEFFECT,
                             cons_list(
                               index_uni(matsetup[(pr1 - 1)][(3 - 1)]),
                               cons_list(index_uni(tij), nil_index_list())),
                             "TIPREDEFFECT") * .01)),
                        matsetup[(pr2 - 1)][(4 - 1)],
                        matvalues[(pr2 - 1)][(2 - 1)],
                        matvalues[(pr2 - 1)][(3 - 1)],
                        matvalues[(pr2 - 1)][(4 - 1)],
                        matvalues[(pr2 - 1)][(6 - 1)], pstream__)) / 2) *
                    100), "assigning variable linearTIPREDEFFECT");
              }}
          } }
        current_statement__ = 674;
        if (nindvarying) {
          current_statement__ = 671;
          assign(popcov, nil_index_list(),
            divide(crossprod(x), (rows(x) - 1)), "assigning variable popcov");
          current_statement__ = 672;
          assign(popsd, nil_index_list(), stan::math::sqrt(diagonal(popcov)),
            "assigning variable popsd");
        } 
      }
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        vars__.emplace_back(popmeans[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        vars__.emplace_back(popsd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
          vars__.emplace_back(
            rvalue(popcov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "popcov"));}
      }
      for (int sym1__ = 1; sym1__ <= ntipred; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nparams; ++sym2__) {
          vars__.emplace_back(
            rvalue(linearTIPREDEFFECT,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "linearTIPREDEFFECT"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> rawpopmeans;
      rawpopmeans = Eigen::Matrix<double, -1, 1>(nparams);
      stan::math::fill(rawpopmeans, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rawpopmeans_flat__;
        current_statement__ = 1;
        assign(rawpopmeans_flat__, nil_index_list(),
          context__.vals_r("rawpopmeans"),
          "assigning variable rawpopmeans_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
          current_statement__ = 1;
          assign(rawpopmeans, cons_list(index_uni(sym1__), nil_index_list()),
            rawpopmeans_flat__[(pos__ - 1)], "assigning variable rawpopmeans");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rawpopsdbase;
      rawpopsdbase = Eigen::Matrix<double, -1, 1>(nindvarying);
      stan::math::fill(rawpopsdbase, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rawpopsdbase_flat__;
        current_statement__ = 2;
        assign(rawpopsdbase_flat__, nil_index_list(),
          context__.vals_r("rawpopsdbase"),
          "assigning variable rawpopsdbase_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
          current_statement__ = 2;
          assign(rawpopsdbase,
            cons_list(index_uni(sym1__), nil_index_list()),
            rawpopsdbase_flat__[(pos__ - 1)],
            "assigning variable rawpopsdbase");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sqrtpcov;
      sqrtpcov = Eigen::Matrix<double, -1, 1>(nindvaryingoffdiagonals);
      stan::math::fill(sqrtpcov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sqrtpcov_flat__;
        current_statement__ = 3;
        assign(sqrtpcov_flat__, nil_index_list(),
          context__.vals_r("sqrtpcov"), "assigning variable sqrtpcov_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nindvaryingoffdiagonals; ++sym1__) {
          current_statement__ = 3;
          assign(sqrtpcov, cons_list(index_uni(sym1__), nil_index_list()),
            sqrtpcov_flat__[(pos__ - 1)], "assigning variable sqrtpcov");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> baseindparams;
      baseindparams = std::vector<Eigen::Matrix<double, -1, 1>>(baseindparams_1dim__, Eigen::Matrix<double, -1, 1>(baseindparams_2dim__));
      stan::math::fill(baseindparams, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> baseindparams_flat__;
        current_statement__ = 4;
        assign(baseindparams_flat__, nil_index_list(),
          context__.vals_r("baseindparams"),
          "assigning variable baseindparams_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= baseindparams_2dim__; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= baseindparams_1dim__; ++sym2__) {
            current_statement__ = 4;
            assign(baseindparams,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              baseindparams_flat__[(pos__ - 1)],
              "assigning variable baseindparams");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> tipredeffectparams;
      tipredeffectparams = Eigen::Matrix<double, -1, 1>(ntipredeffects);
      stan::math::fill(tipredeffectparams, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tipredeffectparams_flat__;
        current_statement__ = 5;
        assign(tipredeffectparams_flat__, nil_index_list(),
          context__.vals_r("tipredeffectparams"),
          "assigning variable tipredeffectparams_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= ntipredeffects; ++sym1__) {
          current_statement__ = 5;
          assign(tipredeffectparams,
            cons_list(index_uni(sym1__), nil_index_list()),
            tipredeffectparams_flat__[(pos__ - 1)],
            "assigning variable tipredeffectparams");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> tipredsimputed;
      tipredsimputed = Eigen::Matrix<double, -1, 1>(nmissingtipreds);
      stan::math::fill(tipredsimputed, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tipredsimputed_flat__;
        current_statement__ = 6;
        assign(tipredsimputed_flat__, nil_index_list(),
          context__.vals_r("tipredsimputed"),
          "assigning variable tipredsimputed_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= nmissingtipreds; ++sym1__) {
          current_statement__ = 6;
          assign(tipredsimputed,
            cons_list(index_uni(sym1__), nil_index_list()),
            tipredsimputed_flat__[(pos__ - 1)],
            "assigning variable tipredsimputed");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> etaupdbasestates;
      etaupdbasestates = Eigen::Matrix<double, -1, 1>(etaupdbasestates_1dim__);
      stan::math::fill(etaupdbasestates, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> etaupdbasestates_flat__;
        current_statement__ = 7;
        assign(etaupdbasestates_flat__, nil_index_list(),
          context__.vals_r("etaupdbasestates"),
          "assigning variable etaupdbasestates_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= etaupdbasestates_1dim__; ++sym1__) {
          current_statement__ = 7;
          assign(etaupdbasestates,
            cons_list(index_uni(sym1__), nil_index_list()),
            etaupdbasestates_flat__[(pos__ - 1)],
            "assigning variable etaupdbasestates");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> subsetpar;
      subsetpar = Eigen::Matrix<double, -1, 1>(subsetpar_1dim__);
      stan::math::fill(subsetpar, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> subsetpar_flat__;
        current_statement__ = 8;
        assign(subsetpar_flat__, nil_index_list(),
          context__.vals_r("subsetpar"),
          "assigning variable subsetpar_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= subsetpar_1dim__; ++sym1__) {
          current_statement__ = 8;
          assign(subsetpar, cons_list(index_uni(sym1__), nil_index_list()),
            subsetpar_flat__[(pos__ - 1)], "assigning variable subsetpar");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        vars__.emplace_back(rawpopmeans[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        vars__.emplace_back(rawpopsdbase[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nindvaryingoffdiagonals; ++sym1__) {
        vars__.emplace_back(sqrtpcov[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= baseindparams_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= baseindparams_2dim__; ++sym2__) {
          vars__.emplace_back(baseindparams[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= ntipredeffects; ++sym1__) {
        vars__.emplace_back(tipredeffectparams[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nmissingtipreds; ++sym1__) {
        vars__.emplace_back(tipredsimputed[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= etaupdbasestates_1dim__; ++sym1__) {
        vars__.emplace_back(etaupdbasestates[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= subsetpar_1dim__; ++sym1__) {
        vars__.emplace_back(subsetpar[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("rawpopmeans");
    names__.emplace_back("rawpopsdbase");
    names__.emplace_back("sqrtpcov");
    names__.emplace_back("baseindparams");
    names__.emplace_back("tipredeffectparams");
    names__.emplace_back("tipredsimputed");
    names__.emplace_back("etaupdbasestates");
    names__.emplace_back("subsetpar");
    names__.emplace_back("rawpopsd");
    names__.emplace_back("rawpopcovbase");
    names__.emplace_back("rawpopcov");
    names__.emplace_back("rawpopcovchol");
    names__.emplace_back("rawpopcorr");
    names__.emplace_back("subset");
    names__.emplace_back("firstsub");
    names__.emplace_back("lastsub");
    names__.emplace_back("ll");
    names__.emplace_back("llrow");
    names__.emplace_back("etacova");
    names__.emplace_back("ycova");
    names__.emplace_back("etaa");
    names__.emplace_back("ya");
    names__.emplace_back("calcs");
    names__.emplace_back("pop_PARS");
    names__.emplace_back("pop_T0MEANS");
    names__.emplace_back("pop_LAMBDA");
    names__.emplace_back("pop_DRIFT");
    names__.emplace_back("pop_DIFFUSION");
    names__.emplace_back("pop_MANIFESTVAR");
    names__.emplace_back("pop_MANIFESTMEANS");
    names__.emplace_back("pop_CINT");
    names__.emplace_back("pop_T0VAR");
    names__.emplace_back("pop_TDPREDEFFECT");
    names__.emplace_back("pop_DIFFUSIONcov");
    names__.emplace_back("pop_MANIFESTcov");
    names__.emplace_back("pop_T0cov");
    names__.emplace_back("pop_asymCINT");
    names__.emplace_back("pop_asymDIFFUSIONcov");
    names__.emplace_back("subj_PARS");
    names__.emplace_back("subj_T0MEANS");
    names__.emplace_back("subj_LAMBDA");
    names__.emplace_back("subj_DRIFT");
    names__.emplace_back("subj_DIFFUSION");
    names__.emplace_back("subj_MANIFESTVAR");
    names__.emplace_back("subj_MANIFESTMEANS");
    names__.emplace_back("subj_CINT");
    names__.emplace_back("subj_T0VAR");
    names__.emplace_back("subj_TDPREDEFFECT");
    names__.emplace_back("subj_DIFFUSIONcov");
    names__.emplace_back("subj_MANIFESTcov");
    names__.emplace_back("subj_T0cov");
    names__.emplace_back("subj_asymCINT");
    names__.emplace_back("subj_asymDIFFUSIONcov");
    names__.emplace_back("tipreds");
    names__.emplace_back("TIPREDEFFECT");
    names__.emplace_back("popmeans");
    names__.emplace_back("popsd");
    names__.emplace_back("popcov");
    names__.emplace_back("linearTIPREDEFFECT");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nparams)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nindvaryingoffdiagonals)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(baseindparams_1dim__)
                                             ,
                                             static_cast<size_t>(baseindparams_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(ntipredeffects)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nmissingtipreds)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(etaupdbasestates_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subsetpar_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)
                                             ,
                                             static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)
                                             ,
                                             static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)
                                             ,
                                             static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)
                                             ,
                                             static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(llrow_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3),
                                             static_cast<size_t>(etacova_2dim__)
                                             ,
                                             static_cast<size_t>(nlatentpop),
                                             static_cast<size_t>(nlatentpop)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3),
                                             static_cast<size_t>(ycova_2dim__)
                                             , static_cast<size_t>(nmanifest)
                                             , static_cast<size_t>(nmanifest)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3),
                                             static_cast<size_t>(etaa_2dim__)
                                             ,
                                             static_cast<size_t>(nlatentpop)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3),
                                             static_cast<size_t>(ya_2dim__),
                                             static_cast<size_t>(nmanifest)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(0),
                                             static_cast<size_t>(0)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_PARS_1dim__)
                                             ,
                                             static_cast<size_t>(pop_PARS_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_T0MEANS_1dim__)
                                             ,
                                             static_cast<size_t>(pop_T0MEANS_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_LAMBDA_1dim__)
                                             ,
                                             static_cast<size_t>(pop_LAMBDA_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_DRIFT_1dim__)
                                             ,
                                             static_cast<size_t>(pop_DRIFT_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_DIFFUSION_1dim__)
                                             ,
                                             static_cast<size_t>(pop_DIFFUSION_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_MANIFESTVAR_1dim__)
                                             ,
                                             static_cast<size_t>(pop_MANIFESTVAR_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_MANIFESTMEANS_1dim__)
                                             ,
                                             static_cast<size_t>(pop_MANIFESTMEANS_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_CINT_1dim__)
                                             ,
                                             static_cast<size_t>(pop_CINT_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_T0VAR_1dim__)
                                             ,
                                             static_cast<size_t>(pop_T0VAR_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_TDPREDEFFECT_1dim__)
                                             ,
                                             static_cast<size_t>(pop_TDPREDEFFECT_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_DIFFUSIONcov_1dim__)
                                             ,
                                             static_cast<size_t>(pop_DIFFUSIONcov_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_MANIFESTcov_1dim__)
                                             ,
                                             static_cast<size_t>(pop_MANIFESTcov_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_T0cov_1dim__)
                                             ,
                                             static_cast<size_t>(pop_T0cov_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_asymCINT_1dim__)
                                             ,
                                             static_cast<size_t>(pop_asymCINT_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(pop_asymDIFFUSIONcov_1dim__)
                                             ,
                                             static_cast<size_t>(pop_asymDIFFUSIONcov_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_PARS_1dim__)
                                             ,
                                             static_cast<size_t>(subj_PARS_2dim__)
                                             ,
                                             static_cast<size_t>(subj_PARS_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_T0MEANS_1dim__)
                                             ,
                                             static_cast<size_t>(subj_T0MEANS_2dim__)
                                             ,
                                             static_cast<size_t>(subj_T0MEANS_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_LAMBDA_1dim__)
                                             ,
                                             static_cast<size_t>(subj_LAMBDA_2dim__)
                                             ,
                                             static_cast<size_t>(subj_LAMBDA_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_DRIFT_1dim__)
                                             ,
                                             static_cast<size_t>(subj_DRIFT_2dim__)
                                             ,
                                             static_cast<size_t>(subj_DRIFT_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_DIFFUSION_1dim__)
                                             ,
                                             static_cast<size_t>(subj_DIFFUSION_2dim__)
                                             ,
                                             static_cast<size_t>(subj_DIFFUSION_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_MANIFESTVAR_1dim__)
                                             ,
                                             static_cast<size_t>(subj_MANIFESTVAR_2dim__)
                                             ,
                                             static_cast<size_t>(subj_MANIFESTVAR_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_MANIFESTMEANS_1dim__)
                                             ,
                                             static_cast<size_t>(subj_MANIFESTMEANS_2dim__)
                                             ,
                                             static_cast<size_t>(subj_MANIFESTMEANS_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_CINT_1dim__)
                                             ,
                                             static_cast<size_t>(subj_CINT_2dim__)
                                             ,
                                             static_cast<size_t>(subj_CINT_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_T0VAR_1dim__)
                                             ,
                                             static_cast<size_t>(subj_T0VAR_2dim__)
                                             ,
                                             static_cast<size_t>(subj_T0VAR_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_TDPREDEFFECT_1dim__)
                                             ,
                                             static_cast<size_t>(subj_TDPREDEFFECT_2dim__)
                                             ,
                                             static_cast<size_t>(subj_TDPREDEFFECT_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_DIFFUSIONcov_1dim__)
                                             ,
                                             static_cast<size_t>(subj_DIFFUSIONcov_2dim__)
                                             ,
                                             static_cast<size_t>(subj_DIFFUSIONcov_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_MANIFESTcov_1dim__)
                                             ,
                                             static_cast<size_t>(subj_MANIFESTcov_2dim__)
                                             ,
                                             static_cast<size_t>(subj_MANIFESTcov_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_T0cov_1dim__)
                                             ,
                                             static_cast<size_t>(subj_T0cov_2dim__)
                                             ,
                                             static_cast<size_t>(subj_T0cov_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_asymCINT_1dim__)
                                             ,
                                             static_cast<size_t>(subj_asymCINT_2dim__)
                                             ,
                                             static_cast<size_t>(subj_asymCINT_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(subj_asymDIFFUSIONcov_1dim__)
                                             ,
                                             static_cast<size_t>(subj_asymDIFFUSIONcov_2dim__)
                                             ,
                                             static_cast<size_t>(subj_asymDIFFUSIONcov_3dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(tipreds_1dim__)
                                             ,
                                             static_cast<size_t>(tipreds_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nparams),
                                             static_cast<size_t>(ntipred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nparams)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nindvarying)
                                             ,
                                             static_cast<size_t>(nindvarying)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nparams),
                                             static_cast<size_t>(ntipred)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rawpopmeans" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rawpopsdbase" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nindvaryingoffdiagonals; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sqrtpcov" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= baseindparams_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= baseindparams_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "baseindparams" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ntipredeffects; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tipredeffectparams" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nmissingtipreds; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tipredsimputed" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= etaupdbasestates_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "etaupdbasestates" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= subsetpar_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "subsetpar" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rawpopsd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcovbase" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcovchol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcorr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "subset");
      param_names__.emplace_back(std::string() + "firstsub");
      param_names__.emplace_back(std::string() + "lastsub");
      param_names__.emplace_back(std::string() + "ll");
      for (int sym1__ = 1; sym1__ <= llrow_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llrow" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlatentpop; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nlatentpop; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= etacova_2dim__; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "etacova" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    }}
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nmanifest; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= ycova_2dim__; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "ycova" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    }}
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nlatentpop; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= etaa_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "etaa" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= ya_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "ya" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 0; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 0; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "calcs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_PARS_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_PARS_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_PARS" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_T0MEANS_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_T0MEANS_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_T0MEANS" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_LAMBDA_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_LAMBDA_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_LAMBDA" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_DRIFT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_DRIFT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_DRIFT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_DIFFUSION_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_DIFFUSION_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_DIFFUSION" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_MANIFESTVAR_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTVAR_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_MANIFESTVAR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_MANIFESTMEANS_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTMEANS_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_MANIFESTMEANS" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_CINT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_CINT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_CINT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_T0VAR_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_T0VAR_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_T0VAR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_TDPREDEFFECT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_TDPREDEFFECT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_TDPREDEFFECT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_DIFFUSIONcov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_DIFFUSIONcov_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_DIFFUSIONcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_MANIFESTcov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTcov_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_MANIFESTcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_T0cov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_T0cov_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_T0cov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_asymCINT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_asymCINT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_asymCINT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_asymDIFFUSIONcov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_asymDIFFUSIONcov_1dim__;
               ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_asymDIFFUSIONcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_PARS_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_PARS_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_PARS_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_PARS" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_T0MEANS_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_T0MEANS_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_T0MEANS_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_T0MEANS" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_LAMBDA_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_LAMBDA_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_LAMBDA_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_LAMBDA" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_DRIFT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_DRIFT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_DRIFT_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_DRIFT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_DIFFUSION_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_DIFFUSION_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_DIFFUSION_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_DIFFUSION" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_MANIFESTVAR_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTVAR_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_MANIFESTVAR_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_MANIFESTVAR" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_MANIFESTMEANS_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTMEANS_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_MANIFESTMEANS_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_MANIFESTMEANS" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_CINT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_CINT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_CINT_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_CINT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_T0VAR_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_T0VAR_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_T0VAR_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_T0VAR" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_TDPREDEFFECT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_TDPREDEFFECT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_TDPREDEFFECT_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_TDPREDEFFECT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_DIFFUSIONcov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_DIFFUSIONcov_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_DIFFUSIONcov_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_DIFFUSIONcov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_MANIFESTcov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTcov_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_MANIFESTcov_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_MANIFESTcov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_T0cov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_T0cov_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_T0cov_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_T0cov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_asymCINT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_asymCINT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_asymCINT_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_asymCINT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_asymDIFFUSIONcov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_asymDIFFUSIONcov_2dim__;
               ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_asymDIFFUSIONcov_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_asymDIFFUSIONcov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= tipreds_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= tipreds_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tipreds" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ntipred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nparams; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "TIPREDEFFECT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "popmeans" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "popsd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "popcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ntipred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nparams; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "linearTIPREDEFFECT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rawpopmeans" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rawpopsdbase" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nindvaryingoffdiagonals; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sqrtpcov" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= baseindparams_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= baseindparams_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "baseindparams" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ntipredeffects; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tipredeffectparams" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nmissingtipreds; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tipredsimputed" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= etaupdbasestates_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "etaupdbasestates" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= subsetpar_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "subsetpar" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rawpopsd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcovbase" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcovchol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rawpopcorr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "subset");
      param_names__.emplace_back(std::string() + "firstsub");
      param_names__.emplace_back(std::string() + "lastsub");
      param_names__.emplace_back(std::string() + "ll");
      for (int sym1__ = 1; sym1__ <= llrow_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llrow" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nlatentpop; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nlatentpop; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= etacova_2dim__; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "etacova" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    }}
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nmanifest; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= ycova_2dim__; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "ycova" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    }}
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nlatentpop; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= etaa_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "etaa" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nmanifest; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= ya_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "ya" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 0; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 0; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "calcs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_PARS_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_PARS_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_PARS" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_T0MEANS_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_T0MEANS_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_T0MEANS" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_LAMBDA_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_LAMBDA_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_LAMBDA" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_DRIFT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_DRIFT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_DRIFT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_DIFFUSION_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_DIFFUSION_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_DIFFUSION" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_MANIFESTVAR_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTVAR_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_MANIFESTVAR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_MANIFESTMEANS_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTMEANS_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_MANIFESTMEANS" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_CINT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_CINT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_CINT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_T0VAR_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_T0VAR_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_T0VAR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_TDPREDEFFECT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_TDPREDEFFECT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_TDPREDEFFECT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_DIFFUSIONcov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_DIFFUSIONcov_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_DIFFUSIONcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_MANIFESTcov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_MANIFESTcov_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_MANIFESTcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_T0cov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_T0cov_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_T0cov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_asymCINT_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_asymCINT_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_asymCINT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= pop_asymDIFFUSIONcov_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= pop_asymDIFFUSIONcov_1dim__;
               ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pop_asymDIFFUSIONcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_PARS_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_PARS_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_PARS_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_PARS" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_T0MEANS_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_T0MEANS_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_T0MEANS_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_T0MEANS" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_LAMBDA_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_LAMBDA_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_LAMBDA_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_LAMBDA" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_DRIFT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_DRIFT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_DRIFT_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_DRIFT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_DIFFUSION_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_DIFFUSION_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_DIFFUSION_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_DIFFUSION" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_MANIFESTVAR_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTVAR_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_MANIFESTVAR_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_MANIFESTVAR" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_MANIFESTMEANS_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTMEANS_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_MANIFESTMEANS_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_MANIFESTMEANS" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_CINT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_CINT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_CINT_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_CINT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_T0VAR_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_T0VAR_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_T0VAR_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_T0VAR" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_TDPREDEFFECT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_TDPREDEFFECT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_TDPREDEFFECT_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_TDPREDEFFECT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_DIFFUSIONcov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_DIFFUSIONcov_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_DIFFUSIONcov_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_DIFFUSIONcov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_MANIFESTcov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_MANIFESTcov_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_MANIFESTcov_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_MANIFESTcov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_T0cov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_T0cov_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_T0cov_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_T0cov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_asymCINT_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_asymCINT_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_asymCINT_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_asymCINT" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= subj_asymDIFFUSIONcov_3dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= subj_asymDIFFUSIONcov_2dim__;
               ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= subj_asymDIFFUSIONcov_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "subj_asymDIFFUSIONcov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= tipreds_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= tipreds_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tipreds" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ntipred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nparams; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "TIPREDEFFECT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nparams; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "popmeans" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "popsd" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nindvarying; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nindvarying; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "popcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ntipred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nparams; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "linearTIPREDEFFECT" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rawpopmeans\",\"type\":{\"name\":\"vector\",\"length\":" << nparams << "},\"block\":\"parameters\"},{\"name\":\"rawpopsdbase\",\"type\":{\"name\":\"vector\",\"length\":" << nindvarying << "},\"block\":\"parameters\"},{\"name\":\"sqrtpcov\",\"type\":{\"name\":\"vector\",\"length\":" << nindvaryingoffdiagonals << "},\"block\":\"parameters\"},{\"name\":\"baseindparams\",\"type\":{\"name\":\"array\",\"length\":" << baseindparams_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << baseindparams_2dim__ << "}},\"block\":\"parameters\"},{\"name\":\"tipredeffectparams\",\"type\":{\"name\":\"vector\",\"length\":" << ntipredeffects << "},\"block\":\"parameters\"},{\"name\":\"tipredsimputed\",\"type\":{\"name\":\"vector\",\"length\":" << nmissingtipreds << "},\"block\":\"parameters\"},{\"name\":\"etaupdbasestates\",\"type\":{\"name\":\"vector\",\"length\":" << etaupdbasestates_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"subsetpar\",\"type\":{\"name\":\"vector\",\"length\":" << subsetpar_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"rawpopsd\",\"type\":{\"name\":\"vector\",\"length\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcovbase\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcovchol\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"subset\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"firstsub\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lastsub\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ll\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"llrow\",\"type\":{\"name\":\"vector\",\"length\":" << llrow_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"etacova\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << etacova_2dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << nlatentpop << ",\"cols\":" << nlatentpop << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"ycova\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << ycova_2dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << nmanifest << ",\"cols\":" << nmanifest << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"etaa\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << etaa_2dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << nlatentpop << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"ya\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << ya_2dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << nmanifest << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"calcs\",\"type\":{\"name\":\"array\",\"length\":" << 0 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 0 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"pop_PARS\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_PARS_1dim__ << ",\"cols\":" << pop_PARS_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_T0MEANS\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_T0MEANS_1dim__ << ",\"cols\":" << pop_T0MEANS_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_LAMBDA\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_LAMBDA_1dim__ << ",\"cols\":" << pop_LAMBDA_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_DRIFT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_DRIFT_1dim__ << ",\"cols\":" << pop_DRIFT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_DIFFUSION\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_DIFFUSION_1dim__ << ",\"cols\":" << pop_DIFFUSION_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_MANIFESTVAR\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_MANIFESTVAR_1dim__ << ",\"cols\":" << pop_MANIFESTVAR_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_MANIFESTMEANS\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_MANIFESTMEANS_1dim__ << ",\"cols\":" << pop_MANIFESTMEANS_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_CINT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_CINT_1dim__ << ",\"cols\":" << pop_CINT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_T0VAR\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_T0VAR_1dim__ << ",\"cols\":" << pop_T0VAR_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_TDPREDEFFECT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_TDPREDEFFECT_1dim__ << ",\"cols\":" << pop_TDPREDEFFECT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_DIFFUSIONcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_DIFFUSIONcov_1dim__ << ",\"cols\":" << pop_DIFFUSIONcov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_MANIFESTcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_MANIFESTcov_1dim__ << ",\"cols\":" << pop_MANIFESTcov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_T0cov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_T0cov_1dim__ << ",\"cols\":" << pop_T0cov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_asymCINT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_asymCINT_1dim__ << ",\"cols\":" << pop_asymCINT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_asymDIFFUSIONcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_asymDIFFUSIONcov_1dim__ << ",\"cols\":" << pop_asymDIFFUSIONcov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"subj_PARS\",\"type\":{\"name\":\"array\",\"length\":" << subj_PARS_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_PARS_2dim__ << ",\"cols\":" << subj_PARS_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_T0MEANS\",\"type\":{\"name\":\"array\",\"length\":" << subj_T0MEANS_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_T0MEANS_2dim__ << ",\"cols\":" << subj_T0MEANS_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_LAMBDA\",\"type\":{\"name\":\"array\",\"length\":" << subj_LAMBDA_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_LAMBDA_2dim__ << ",\"cols\":" << subj_LAMBDA_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_DRIFT\",\"type\":{\"name\":\"array\",\"length\":" << subj_DRIFT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_DRIFT_2dim__ << ",\"cols\":" << subj_DRIFT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_DIFFUSION\",\"type\":{\"name\":\"array\",\"length\":" << subj_DIFFUSION_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_DIFFUSION_2dim__ << ",\"cols\":" << subj_DIFFUSION_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_MANIFESTVAR\",\"type\":{\"name\":\"array\",\"length\":" << subj_MANIFESTVAR_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_MANIFESTVAR_2dim__ << ",\"cols\":" << subj_MANIFESTVAR_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_MANIFESTMEANS\",\"type\":{\"name\":\"array\",\"length\":" << subj_MANIFESTMEANS_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_MANIFESTMEANS_2dim__ << ",\"cols\":" << subj_MANIFESTMEANS_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_CINT\",\"type\":{\"name\":\"array\",\"length\":" << subj_CINT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_CINT_2dim__ << ",\"cols\":" << subj_CINT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_T0VAR\",\"type\":{\"name\":\"array\",\"length\":" << subj_T0VAR_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_T0VAR_2dim__ << ",\"cols\":" << subj_T0VAR_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_TDPREDEFFECT\",\"type\":{\"name\":\"array\",\"length\":" << subj_TDPREDEFFECT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_TDPREDEFFECT_2dim__ << ",\"cols\":" << subj_TDPREDEFFECT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_DIFFUSIONcov\",\"type\":{\"name\":\"array\",\"length\":" << subj_DIFFUSIONcov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_DIFFUSIONcov_2dim__ << ",\"cols\":" << subj_DIFFUSIONcov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_MANIFESTcov\",\"type\":{\"name\":\"array\",\"length\":" << subj_MANIFESTcov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_MANIFESTcov_2dim__ << ",\"cols\":" << subj_MANIFESTcov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_T0cov\",\"type\":{\"name\":\"array\",\"length\":" << subj_T0cov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_T0cov_2dim__ << ",\"cols\":" << subj_T0cov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_asymCINT\",\"type\":{\"name\":\"array\",\"length\":" << subj_asymCINT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_asymCINT_2dim__ << ",\"cols\":" << subj_asymCINT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_asymDIFFUSIONcov\",\"type\":{\"name\":\"array\",\"length\":" << subj_asymDIFFUSIONcov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_asymDIFFUSIONcov_2dim__ << ",\"cols\":" << subj_asymDIFFUSIONcov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tipreds\",\"type\":{\"name\":\"matrix\",\"rows\":" << tipreds_1dim__ << ",\"cols\":" << tipreds_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"TIPREDEFFECT\",\"type\":{\"name\":\"matrix\",\"rows\":" << nparams << ",\"cols\":" << ntipred << "},\"block\":\"transformed_parameters\"},{\"name\":\"popmeans\",\"type\":{\"name\":\"vector\",\"length\":" << nparams << "},\"block\":\"generated_quantities\"},{\"name\":\"popsd\",\"type\":{\"name\":\"vector\",\"length\":" << nindvarying << "},\"block\":\"generated_quantities\"},{\"name\":\"popcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"generated_quantities\"},{\"name\":\"linearTIPREDEFFECT\",\"type\":{\"name\":\"matrix\",\"rows\":" << nparams << ",\"cols\":" << ntipred << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rawpopmeans\",\"type\":{\"name\":\"vector\",\"length\":" << nparams << "},\"block\":\"parameters\"},{\"name\":\"rawpopsdbase\",\"type\":{\"name\":\"vector\",\"length\":" << nindvarying << "},\"block\":\"parameters\"},{\"name\":\"sqrtpcov\",\"type\":{\"name\":\"vector\",\"length\":" << nindvaryingoffdiagonals << "},\"block\":\"parameters\"},{\"name\":\"baseindparams\",\"type\":{\"name\":\"array\",\"length\":" << baseindparams_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << baseindparams_2dim__ << "}},\"block\":\"parameters\"},{\"name\":\"tipredeffectparams\",\"type\":{\"name\":\"vector\",\"length\":" << ntipredeffects << "},\"block\":\"parameters\"},{\"name\":\"tipredsimputed\",\"type\":{\"name\":\"vector\",\"length\":" << nmissingtipreds << "},\"block\":\"parameters\"},{\"name\":\"etaupdbasestates\",\"type\":{\"name\":\"vector\",\"length\":" << etaupdbasestates_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"subsetpar\",\"type\":{\"name\":\"vector\",\"length\":" << subsetpar_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"rawpopsd\",\"type\":{\"name\":\"vector\",\"length\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcovbase\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcovchol\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"rawpopcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"transformed_parameters\"},{\"name\":\"subset\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"firstsub\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lastsub\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ll\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"llrow\",\"type\":{\"name\":\"vector\",\"length\":" << llrow_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"etacova\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << etacova_2dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << nlatentpop << ",\"cols\":" << nlatentpop << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"ycova\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << ycova_2dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << nmanifest << ",\"cols\":" << nmanifest << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"etaa\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << etaa_2dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << nlatentpop << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"ya\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"array\",\"length\":" << ya_2dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << nmanifest << "}}},\"block\":\"transformed_parameters\"},{\"name\":\"calcs\",\"type\":{\"name\":\"array\",\"length\":" << 0 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 0 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"pop_PARS\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_PARS_1dim__ << ",\"cols\":" << pop_PARS_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_T0MEANS\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_T0MEANS_1dim__ << ",\"cols\":" << pop_T0MEANS_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_LAMBDA\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_LAMBDA_1dim__ << ",\"cols\":" << pop_LAMBDA_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_DRIFT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_DRIFT_1dim__ << ",\"cols\":" << pop_DRIFT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_DIFFUSION\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_DIFFUSION_1dim__ << ",\"cols\":" << pop_DIFFUSION_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_MANIFESTVAR\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_MANIFESTVAR_1dim__ << ",\"cols\":" << pop_MANIFESTVAR_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_MANIFESTMEANS\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_MANIFESTMEANS_1dim__ << ",\"cols\":" << pop_MANIFESTMEANS_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_CINT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_CINT_1dim__ << ",\"cols\":" << pop_CINT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_T0VAR\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_T0VAR_1dim__ << ",\"cols\":" << pop_T0VAR_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_TDPREDEFFECT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_TDPREDEFFECT_1dim__ << ",\"cols\":" << pop_TDPREDEFFECT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_DIFFUSIONcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_DIFFUSIONcov_1dim__ << ",\"cols\":" << pop_DIFFUSIONcov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_MANIFESTcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_MANIFESTcov_1dim__ << ",\"cols\":" << pop_MANIFESTcov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_T0cov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_T0cov_1dim__ << ",\"cols\":" << pop_T0cov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_asymCINT\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_asymCINT_1dim__ << ",\"cols\":" << pop_asymCINT_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"pop_asymDIFFUSIONcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << pop_asymDIFFUSIONcov_1dim__ << ",\"cols\":" << pop_asymDIFFUSIONcov_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"subj_PARS\",\"type\":{\"name\":\"array\",\"length\":" << subj_PARS_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_PARS_2dim__ << ",\"cols\":" << subj_PARS_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_T0MEANS\",\"type\":{\"name\":\"array\",\"length\":" << subj_T0MEANS_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_T0MEANS_2dim__ << ",\"cols\":" << subj_T0MEANS_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_LAMBDA\",\"type\":{\"name\":\"array\",\"length\":" << subj_LAMBDA_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_LAMBDA_2dim__ << ",\"cols\":" << subj_LAMBDA_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_DRIFT\",\"type\":{\"name\":\"array\",\"length\":" << subj_DRIFT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_DRIFT_2dim__ << ",\"cols\":" << subj_DRIFT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_DIFFUSION\",\"type\":{\"name\":\"array\",\"length\":" << subj_DIFFUSION_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_DIFFUSION_2dim__ << ",\"cols\":" << subj_DIFFUSION_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_MANIFESTVAR\",\"type\":{\"name\":\"array\",\"length\":" << subj_MANIFESTVAR_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_MANIFESTVAR_2dim__ << ",\"cols\":" << subj_MANIFESTVAR_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_MANIFESTMEANS\",\"type\":{\"name\":\"array\",\"length\":" << subj_MANIFESTMEANS_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_MANIFESTMEANS_2dim__ << ",\"cols\":" << subj_MANIFESTMEANS_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_CINT\",\"type\":{\"name\":\"array\",\"length\":" << subj_CINT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_CINT_2dim__ << ",\"cols\":" << subj_CINT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_T0VAR\",\"type\":{\"name\":\"array\",\"length\":" << subj_T0VAR_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_T0VAR_2dim__ << ",\"cols\":" << subj_T0VAR_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_TDPREDEFFECT\",\"type\":{\"name\":\"array\",\"length\":" << subj_TDPREDEFFECT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_TDPREDEFFECT_2dim__ << ",\"cols\":" << subj_TDPREDEFFECT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_DIFFUSIONcov\",\"type\":{\"name\":\"array\",\"length\":" << subj_DIFFUSIONcov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_DIFFUSIONcov_2dim__ << ",\"cols\":" << subj_DIFFUSIONcov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_MANIFESTcov\",\"type\":{\"name\":\"array\",\"length\":" << subj_MANIFESTcov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_MANIFESTcov_2dim__ << ",\"cols\":" << subj_MANIFESTcov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_T0cov\",\"type\":{\"name\":\"array\",\"length\":" << subj_T0cov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_T0cov_2dim__ << ",\"cols\":" << subj_T0cov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_asymCINT\",\"type\":{\"name\":\"array\",\"length\":" << subj_asymCINT_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_asymCINT_2dim__ << ",\"cols\":" << subj_asymCINT_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"subj_asymDIFFUSIONcov\",\"type\":{\"name\":\"array\",\"length\":" << subj_asymDIFFUSIONcov_1dim__ << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << subj_asymDIFFUSIONcov_2dim__ << ",\"cols\":" << subj_asymDIFFUSIONcov_3dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"tipreds\",\"type\":{\"name\":\"matrix\",\"rows\":" << tipreds_1dim__ << ",\"cols\":" << tipreds_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"TIPREDEFFECT\",\"type\":{\"name\":\"matrix\",\"rows\":" << nparams << ",\"cols\":" << ntipred << "},\"block\":\"transformed_parameters\"},{\"name\":\"popmeans\",\"type\":{\"name\":\"vector\",\"length\":" << nparams << "},\"block\":\"generated_quantities\"},{\"name\":\"popsd\",\"type\":{\"name\":\"vector\",\"length\":" << nindvarying << "},\"block\":\"generated_quantities\"},{\"name\":\"popcov\",\"type\":{\"name\":\"matrix\",\"rows\":" << nindvarying << ",\"cols\":" << nindvarying << "},\"block\":\"generated_quantities\"},{\"name\":\"linearTIPREDEFFECT\",\"type\":{\"name\":\"matrix\",\"rows\":" << nparams << ",\"cols\":" << ntipred << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_ctsm_namespace::model_ctsm;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ctsm_namespace::profiles__;
}
#endif
#endif
